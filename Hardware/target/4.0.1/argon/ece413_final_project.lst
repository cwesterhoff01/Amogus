
c:/Users/ashto/OneDrive/Documents/Particle/ece413_final_project/target/4.0.1/argon/ece413_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000028b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b68d0  000b68d0  000068d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b68f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003dfb8  000b68f8  0001dfb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007c8  2003e028  2003e028  0002e028  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6968  000b6968  00026968  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6990  000b6990  00026990  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012013a  00000000  00000000  00026994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001360f  00000000  00000000  00146ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003ae1d  00000000  00000000  0015a0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c38  00000000  00000000  00194efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a360  00000000  00000000  00197b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b559  00000000  00000000  001a1e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000414d1  00000000  00000000  001dd3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138db1  00000000  00000000  0021e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007b70  00000000  00000000  00357670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 f978 	bl	b6322 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 f99a 	bl	b6372 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003dfb8 	.word	0x2003dfb8
   b4048:	000b68f8 	.word	0x000b68f8
   b404c:	2003e028 	.word	0x2003e028
   b4050:	2003e028 	.word	0x2003e028
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fa9d 	bl	b559c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b68a8 	.word	0x000b68a8
   b407c:	000b68cc 	.word	0x000b68cc

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f86b 	bl	b4160 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 ba3d 	b.w	b550c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b82d 	b.w	b50f0 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b82b 	b.w	b50f0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b831 	b.w	b5100 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:

byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read

void setup()
{
   b40b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
   b40b2:	f001 fe13 	bl	b5cdc <_Z16_fetch_usbserialv>
   b40b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40ba:	f001 fe03 	bl	b5cc4 <_ZN9USBSerial5beginEl>

  pinMode(pulseLED, OUTPUT);
   b40be:	4b17      	ldr	r3, [pc, #92]	; (b411c <setup+0x6c>)
   b40c0:	2101      	movs	r1, #1
   b40c2:	7818      	ldrb	r0, [r3, #0]
   b40c4:	f002 f852 	bl	b616c <pinMode>
  pinMode(readLED, OUTPUT);
   b40c8:	4b15      	ldr	r3, [pc, #84]	; (b4120 <setup+0x70>)
   b40ca:	2101      	movs	r1, #1
   b40cc:	7818      	ldrb	r0, [r3, #0]
   b40ce:	f002 f84d 	bl	b616c <pinMode>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   b40d2:	f002 f8e3 	bl	b629c <_Z19__fetch_global_Wirev>
   b40d6:	4a13      	ldr	r2, [pc, #76]	; (b4124 <setup+0x74>)
   b40d8:	4601      	mov	r1, r0
   b40da:	2357      	movs	r3, #87	; 0x57
   b40dc:	4812      	ldr	r0, [pc, #72]	; (b4128 <setup+0x78>)
   b40de:	f000 facf 	bl	b4680 <_ZN8MAX301055beginER7TwoWiremh>
   b40e2:	b928      	cbnz	r0, b40f0 <setup+0x40>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   b40e4:	f001 fdfa 	bl	b5cdc <_Z16_fetch_usbserialv>
   b40e8:	4910      	ldr	r1, [pc, #64]	; (b412c <setup+0x7c>)
   b40ea:	f001 f9b0 	bl	b544e <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
   b40ee:	e7fe      	b.n	b40ee <setup+0x3e>
  }

  Serial.println(F("Attach sensor to finger with rubber band. Press any key to start conversion"));
   b40f0:	f001 fdf4 	bl	b5cdc <_Z16_fetch_usbserialv>
   b40f4:	490e      	ldr	r1, [pc, #56]	; (b4130 <setup+0x80>)
   b40f6:	f001 f9aa 	bl	b544e <_ZN5Print7printlnEPK19__FlashStringHelper>
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
   b40fa:	f240 139b 	movw	r3, #411	; 0x19b
   b40fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b4102:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4106:	2364      	movs	r3, #100	; 0x64
   b4108:	9300      	str	r3, [sp, #0]
   b410a:	4807      	ldr	r0, [pc, #28]	; (b4128 <setup+0x78>)
   b410c:	2302      	movs	r3, #2
   b410e:	2204      	movs	r2, #4
   b4110:	213c      	movs	r1, #60	; 0x3c
   b4112:	f000 fb75 	bl	b4800 <_ZN8MAX301055setupEhhhiii>
}
   b4116:	b005      	add	sp, #20
   b4118:	f85d fb04 	ldr.w	pc, [sp], #4
   b411c:	2003dfb8 	.word	0x2003dfb8
   b4120:	2003dfb9 	.word	0x2003dfb9
   b4124:	00061a80 	.word	0x00061a80
   b4128:	2003e1c4 	.word	0x2003e1c4
   b412c:	000b650c 	.word	0x000b650c
   b4130:	000b653f 	.word	0x000b653f

000b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4134:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4136:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4138:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b413a:	b17c      	cbz	r4, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b413c:	6863      	ldr	r3, [r4, #4]
   b413e:	3b01      	subs	r3, #1
   b4140:	6063      	str	r3, [r4, #4]
   b4142:	b95b      	cbnz	r3, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4144:	6823      	ldr	r3, [r4, #0]
   b4146:	4620      	mov	r0, r4
   b4148:	689b      	ldr	r3, [r3, #8]
   b414a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b414c:	68a3      	ldr	r3, [r4, #8]
   b414e:	3b01      	subs	r3, #1
   b4150:	60a3      	str	r3, [r4, #8]
   b4152:	b91b      	cbnz	r3, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4154:	6823      	ldr	r3, [r4, #0]
   b4156:	4620      	mov	r0, r4
   b4158:	68db      	ldr	r3, [r3, #12]
   b415a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b415c:	4628      	mov	r0, r5
   b415e:	bd38      	pop	{r3, r4, r5, pc}

000b4160 <loop>:

void loop()
{
   b4160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4164:	4f9d      	ldr	r7, [pc, #628]	; (b43dc <loop+0x27c>)

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   b4166:	4d9e      	ldr	r5, [pc, #632]	; (b43e0 <loop+0x280>)
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   b4168:	f8df a288 	ldr.w	sl, [pc, #648]	; b43f4 <loop+0x294>
    irBuffer[i] = particleSensor.getIR();
   b416c:	f8df 928c 	ldr.w	r9, [pc, #652]	; b43fc <loop+0x29c>
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4170:	2364      	movs	r3, #100	; 0x64
{
   b4172:	b08d      	sub	sp, #52	; 0x34
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4174:	603b      	str	r3, [r7, #0]
   b4176:	2600      	movs	r6, #0
  for (byte i = 0 ; i < bufferLength ; i++)
   b4178:	6839      	ldr	r1, [r7, #0]
   b417a:	b2f4      	uxtb	r4, r6
   b417c:	428c      	cmp	r4, r1
   b417e:	da32      	bge.n	b41e6 <loop+0x86>
    while (particleSensor.available() == false) //do we have new data?
   b4180:	4628      	mov	r0, r5
   b4182:	f000 f962 	bl	b444a <_ZN8MAX301059availableEv>
   b4186:	b918      	cbnz	r0, b4190 <loop+0x30>
      particleSensor.check(); //Check the sensor for new data
   b4188:	4628      	mov	r0, r5
   b418a:	f000 f9a0 	bl	b44ce <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
   b418e:	e7f7      	b.n	b4180 <loop+0x20>
    redBuffer[i] = particleSensor.getRed();
   b4190:	4628      	mov	r0, r5
   b4192:	f000 fa51 	bl	b4638 <_ZN8MAX301056getRedEv>
   b4196:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    irBuffer[i] = particleSensor.getIR();
   b419a:	4628      	mov	r0, r5
   b419c:	f000 fa58 	bl	b4650 <_ZN8MAX301055getIREv>
   b41a0:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   b41a4:	4628      	mov	r0, r5
   b41a6:	f000 f95d 	bl	b4464 <_ZN8MAX3010510nextSampleEv>

    Serial.print(F("red="));
   b41aa:	f001 fd97 	bl	b5cdc <_Z16_fetch_usbserialv>
   b41ae:	498d      	ldr	r1, [pc, #564]	; (b43e4 <loop+0x284>)
   b41b0:	f001 f933 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(redBuffer[i], DEC);
   b41b4:	f001 fd92 	bl	b5cdc <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41b8:	220a      	movs	r2, #10
   b41ba:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
   b41be:	f001 f948 	bl	b5452 <_ZN5Print11printNumberEmh>
    Serial.print(F(", ir="));
   b41c2:	f001 fd8b 	bl	b5cdc <_Z16_fetch_usbserialv>
   b41c6:	4988      	ldr	r1, [pc, #544]	; (b43e8 <loop+0x288>)
   b41c8:	f001 f927 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(irBuffer[i], DEC);
   b41cc:	f001 fd86 	bl	b5cdc <_Z16_fetch_usbserialv>
   b41d0:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
   b41d4:	4680      	mov	r8, r0
   b41d6:	220a      	movs	r2, #10
   b41d8:	f001 f93b 	bl	b5452 <_ZN5Print11printNumberEmh>
        n += println();
   b41dc:	4640      	mov	r0, r8
   b41de:	f001 f920 	bl	b5422 <_ZN5Print7printlnEv>
  for (byte i = 0 ; i < bufferLength ; i++)
   b41e2:	3601      	adds	r6, #1
   b41e4:	e7c8      	b.n	b4178 <loop+0x18>
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b41e6:	4b81      	ldr	r3, [pc, #516]	; (b43ec <loop+0x28c>)
   b41e8:	f8df 923c 	ldr.w	r9, [pc, #572]	; b4428 <loop+0x2c8>
   b41ec:	4d80      	ldr	r5, [pc, #512]	; (b43f0 <loop+0x290>)
   b41ee:	9300      	str	r3, [sp, #0]
   b41f0:	4a80      	ldr	r2, [pc, #512]	; (b43f4 <loop+0x294>)
   b41f2:	4b81      	ldr	r3, [pc, #516]	; (b43f8 <loop+0x298>)
   b41f4:	4881      	ldr	r0, [pc, #516]	; (b43fc <loop+0x29c>)
   b41f6:	f8cd 9008 	str.w	r9, [sp, #8]
   b41fa:	9501      	str	r5, [sp, #4]
   b41fc:	f000 fc5e 	bl	b4abc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>

      Serial.print(F(", HRvalid="));
      Serial.print(validHeartRate, DEC);

      Serial.print(F(", SPO2="));
      Serial.print(spo2, DEC);
   b4200:	4e7d      	ldr	r6, [pc, #500]	; (b43f8 <loop+0x298>)
      redBuffer[i - 25] = redBuffer[i];
   b4202:	497f      	ldr	r1, [pc, #508]	; (b4400 <loop+0x2a0>)
   b4204:	f8df b224 	ldr.w	fp, [pc, #548]	; b442c <loop+0x2cc>
   b4208:	f8df a224 	ldr.w	sl, [pc, #548]	; b4430 <loop+0x2d0>
      while (particleSensor.available() == false) //do we have new data?
   b420c:	4c74      	ldr	r4, [pc, #464]	; (b43e0 <loop+0x280>)
      redBuffer[i - 25] = redBuffer[i];
   b420e:	f44f 7296 	mov.w	r2, #300	; 0x12c
   b4212:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
   b4216:	f002 f892 	bl	b633e <memmove>
      irBuffer[i - 25] = irBuffer[i];
   b421a:	497a      	ldr	r1, [pc, #488]	; (b4404 <loop+0x2a4>)
   b421c:	f44f 7296 	mov.w	r2, #300	; 0x12c
   b4220:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
   b4224:	f002 f88b 	bl	b633e <memmove>
   b4228:	2319      	movs	r3, #25
   b422a:	9304      	str	r3, [sp, #16]
      while (particleSensor.available() == false) //do we have new data?
   b422c:	4620      	mov	r0, r4
   b422e:	f000 f90c 	bl	b444a <_ZN8MAX301059availableEv>
   b4232:	b918      	cbnz	r0, b423c <loop+0xdc>
        particleSensor.check(); //Check the sensor for new data
   b4234:	4620      	mov	r0, r4
   b4236:	f000 f94a 	bl	b44ce <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
   b423a:	e7f7      	b.n	b422c <loop+0xcc>
      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
   b423c:	4b72      	ldr	r3, [pc, #456]	; (b4408 <loop+0x2a8>)
   b423e:	f893 8000 	ldrb.w	r8, [r3]
   b4242:	4640      	mov	r0, r8
   b4244:	f001 ffbc 	bl	b61c0 <digitalRead>
   b4248:	fab0 f180 	clz	r1, r0
   b424c:	0949      	lsrs	r1, r1, #5
   b424e:	4640      	mov	r0, r8
   b4250:	f001 ff9d 	bl	b618e <digitalWrite>
      redBuffer[i] = particleSensor.getRed();
   b4254:	4620      	mov	r0, r4
   b4256:	f000 f9ef 	bl	b4638 <_ZN8MAX301056getRedEv>
   b425a:	f8cb 0000 	str.w	r0, [fp]
      irBuffer[i] = particleSensor.getIR();
   b425e:	4620      	mov	r0, r4
   b4260:	f000 f9f6 	bl	b4650 <_ZN8MAX301055getIREv>
   b4264:	f8ca 0000 	str.w	r0, [sl]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
   b4268:	4620      	mov	r0, r4
   b426a:	f000 f8fb 	bl	b4464 <_ZN8MAX3010510nextSampleEv>
      Serial.print(F("red="));
   b426e:	f001 fd35 	bl	b5cdc <_Z16_fetch_usbserialv>
   b4272:	495c      	ldr	r1, [pc, #368]	; (b43e4 <loop+0x284>)
   b4274:	f001 f8d1 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   b4278:	f001 fd30 	bl	b5cdc <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b427c:	220a      	movs	r2, #10
   b427e:	f85b 1b04 	ldr.w	r1, [fp], #4
   b4282:	f001 f8e6 	bl	b5452 <_ZN5Print11printNumberEmh>
      Serial.print(F(", ir="));
   b4286:	f001 fd29 	bl	b5cdc <_Z16_fetch_usbserialv>
   b428a:	4957      	ldr	r1, [pc, #348]	; (b43e8 <loop+0x288>)
   b428c:	f001 f8c5 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(irBuffer[i], DEC);
   b4290:	f001 fd24 	bl	b5cdc <_Z16_fetch_usbserialv>
   b4294:	220a      	movs	r2, #10
   b4296:	f85a 1b04 	ldr.w	r1, [sl], #4
   b429a:	f001 f8da 	bl	b5452 <_ZN5Print11printNumberEmh>
      Serial.print(F(", HR="));
   b429e:	f001 fd1d 	bl	b5cdc <_Z16_fetch_usbserialv>
   b42a2:	495a      	ldr	r1, [pc, #360]	; (b440c <loop+0x2ac>)
   b42a4:	f001 f8b9 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(heartRate, DEC);
   b42a8:	f001 fd18 	bl	b5cdc <_Z16_fetch_usbserialv>
   b42ac:	682a      	ldr	r2, [r5, #0]
        if (n < 0 && base == 10) {
   b42ae:	2a00      	cmp	r2, #0
   b42b0:	4680      	mov	r8, r0
   b42b2:	f280 808a 	bge.w	b43ca <loop+0x26a>
            t = print('-');
   b42b6:	212d      	movs	r1, #45	; 0x2d
   b42b8:	9205      	str	r2, [sp, #20]
   b42ba:	f001 f8ab 	bl	b5414 <_ZN5Print5printEc>
            val = -n;
   b42be:	9a05      	ldr	r2, [sp, #20]
   b42c0:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b42c2:	220a      	movs	r2, #10
   b42c4:	4640      	mov	r0, r8
   b42c6:	f001 f8c4 	bl	b5452 <_ZN5Print11printNumberEmh>
      Serial.print(F(", HRvalid="));
   b42ca:	f001 fd07 	bl	b5cdc <_Z16_fetch_usbserialv>
   b42ce:	4950      	ldr	r1, [pc, #320]	; (b4410 <loop+0x2b0>)
   b42d0:	f001 f8a3 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(validHeartRate, DEC);
   b42d4:	f001 fd02 	bl	b5cdc <_Z16_fetch_usbserialv>
   b42d8:	f999 2000 	ldrsb.w	r2, [r9]
        if (n < 0 && base == 10) {
   b42dc:	2a00      	cmp	r2, #0
   b42de:	4680      	mov	r8, r0
   b42e0:	da75      	bge.n	b43ce <loop+0x26e>
            t = print('-');
   b42e2:	212d      	movs	r1, #45	; 0x2d
   b42e4:	9205      	str	r2, [sp, #20]
   b42e6:	f001 f895 	bl	b5414 <_ZN5Print5printEc>
            val = -n;
   b42ea:	9a05      	ldr	r2, [sp, #20]
   b42ec:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b42ee:	220a      	movs	r2, #10
   b42f0:	4640      	mov	r0, r8
   b42f2:	f001 f8ae 	bl	b5452 <_ZN5Print11printNumberEmh>
      Serial.print(F(", SPO2="));
   b42f6:	f001 fcf1 	bl	b5cdc <_Z16_fetch_usbserialv>
   b42fa:	4946      	ldr	r1, [pc, #280]	; (b4414 <loop+0x2b4>)
   b42fc:	f001 f88d 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(spo2, DEC);
   b4300:	f001 fcec 	bl	b5cdc <_Z16_fetch_usbserialv>
   b4304:	6832      	ldr	r2, [r6, #0]
        if (n < 0 && base == 10) {
   b4306:	2a00      	cmp	r2, #0
   b4308:	4680      	mov	r8, r0
   b430a:	da62      	bge.n	b43d2 <loop+0x272>
            t = print('-');
   b430c:	212d      	movs	r1, #45	; 0x2d
   b430e:	9205      	str	r2, [sp, #20]
   b4310:	f001 f880 	bl	b5414 <_ZN5Print5printEc>
            val = -n;
   b4314:	9a05      	ldr	r2, [sp, #20]
   b4316:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b4318:	220a      	movs	r2, #10
   b431a:	4640      	mov	r0, r8
   b431c:	f001 f899 	bl	b5452 <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2Valid="));
   b4320:	f001 fcdc 	bl	b5cdc <_Z16_fetch_usbserialv>
   b4324:	493c      	ldr	r1, [pc, #240]	; (b4418 <loop+0x2b8>)
   b4326:	f001 f878 	bl	b541a <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(validSPO2, DEC);
   b432a:	f001 fcd7 	bl	b5cdc <_Z16_fetch_usbserialv>
   b432e:	4b2f      	ldr	r3, [pc, #188]	; (b43ec <loop+0x28c>)
   b4330:	f993 2000 	ldrsb.w	r2, [r3]
        if (n < 0 && base == 10) {
   b4334:	2a00      	cmp	r2, #0
   b4336:	4680      	mov	r8, r0
   b4338:	da4d      	bge.n	b43d6 <loop+0x276>
            t = print('-');
   b433a:	212d      	movs	r1, #45	; 0x2d
   b433c:	9205      	str	r2, [sp, #20]
   b433e:	f001 f869 	bl	b5414 <_ZN5Print5printEc>
            val = -n;
   b4342:	9a05      	ldr	r2, [sp, #20]
   b4344:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b4346:	220a      	movs	r2, #10
   b4348:	4640      	mov	r0, r8
   b434a:	f001 f882 	bl	b5452 <_ZN5Print11printNumberEmh>
        n += println();
   b434e:	4640      	mov	r0, r8
   b4350:	f001 f867 	bl	b5422 <_ZN5Print7printlnEv>
    for (byte i = 75; i < 100; i++)
   b4354:	9b04      	ldr	r3, [sp, #16]
   b4356:	3b01      	subs	r3, #1
   b4358:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b435c:	9304      	str	r3, [sp, #16]
   b435e:	f47f af65 	bne.w	b422c <loop+0xcc>

    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b4362:	4b22      	ldr	r3, [pc, #136]	; (b43ec <loop+0x28c>)
   b4364:	6839      	ldr	r1, [r7, #0]
   b4366:	4c2d      	ldr	r4, [pc, #180]	; (b441c <loop+0x2bc>)
   b4368:	9300      	str	r3, [sp, #0]
   b436a:	e9cd 5901 	strd	r5, r9, [sp, #4]
   b436e:	4633      	mov	r3, r6
   b4370:	4a20      	ldr	r2, [pc, #128]	; (b43f4 <loop+0x294>)
   b4372:	4822      	ldr	r0, [pc, #136]	; (b43fc <loop+0x29c>)
   b4374:	f000 fba2 	bl	b4abc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>

    //Publish events through particle device cloud
      Particle.publish("heartRate", String(heartRate), PRIVATE);
   b4378:	6829      	ldr	r1, [r5, #0]
   b437a:	220a      	movs	r2, #10
   b437c:	a808      	add	r0, sp, #32
   b437e:	f000 ffea 	bl	b5356 <_ZN6StringC1Elh>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4382:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4384:	9a08      	ldr	r2, [sp, #32]
   b4386:	4926      	ldr	r1, [pc, #152]	; (b4420 <loop+0x2c0>)
   b4388:	f88d 3000 	strb.w	r3, [sp]
   b438c:	a806      	add	r0, sp, #24
   b438e:	233c      	movs	r3, #60	; 0x3c
   b4390:	f001 fa62 	bl	b5858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4394:	a807      	add	r0, sp, #28
   b4396:	f7ff fecd 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b439a:	a808      	add	r0, sp, #32
   b439c:	f000 ff7e 	bl	b529c <_ZN6StringD1Ev>
      Particle.publish("sp02", String(spo2), PRIVATE);
   b43a0:	6831      	ldr	r1, [r6, #0]
   b43a2:	220a      	movs	r2, #10
   b43a4:	a808      	add	r0, sp, #32
   b43a6:	f000 ffd6 	bl	b5356 <_ZN6StringC1Elh>
   b43aa:	7823      	ldrb	r3, [r4, #0]
   b43ac:	9a08      	ldr	r2, [sp, #32]
   b43ae:	491d      	ldr	r1, [pc, #116]	; (b4424 <loop+0x2c4>)
   b43b0:	f88d 3000 	strb.w	r3, [sp]
   b43b4:	a806      	add	r0, sp, #24
   b43b6:	233c      	movs	r3, #60	; 0x3c
   b43b8:	f001 fa4e 	bl	b5858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43bc:	a807      	add	r0, sp, #28
   b43be:	f7ff feb9 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b43c2:	a808      	add	r0, sp, #32
   b43c4:	f000 ff6a 	bl	b529c <_ZN6StringD1Ev>
  }
   b43c8:	e71b      	b.n	b4202 <loop+0xa2>
            val = n;
   b43ca:	4611      	mov	r1, r2
   b43cc:	e779      	b.n	b42c2 <loop+0x162>
   b43ce:	4611      	mov	r1, r2
   b43d0:	e78d      	b.n	b42ee <loop+0x18e>
   b43d2:	4611      	mov	r1, r2
   b43d4:	e7a0      	b.n	b4318 <loop+0x1b8>
   b43d6:	4611      	mov	r1, r2
   b43d8:	e7b5      	b.n	b4346 <loop+0x1e6>
   b43da:	bf00      	nop
   b43dc:	2003e02c 	.word	0x2003e02c
   b43e0:	2003e1c4 	.word	0x2003e1c4
   b43e4:	000b658b 	.word	0x000b658b
   b43e8:	000b6590 	.word	0x000b6590
   b43ec:	2003e395 	.word	0x2003e395
   b43f0:	2003e030 	.word	0x2003e030
   b43f4:	2003e200 	.word	0x2003e200
   b43f8:	2003e390 	.word	0x2003e390
   b43fc:	2003e034 	.word	0x2003e034
   b4400:	2003e264 	.word	0x2003e264
   b4404:	2003e098 	.word	0x2003e098
   b4408:	2003dfb9 	.word	0x2003dfb9
   b440c:	000b6596 	.word	0x000b6596
   b4410:	000b659c 	.word	0x000b659c
   b4414:	000b65a7 	.word	0x000b65a7
   b4418:	000b65af 	.word	0x000b65af
   b441c:	2003e028 	.word	0x2003e028
   b4420:	000b65bc 	.word	0x000b65bc
   b4424:	000b65c6 	.word	0x000b65c6
   b4428:	2003e394 	.word	0x2003e394
   b442c:	2003e32c 	.word	0x2003e32c
   b4430:	2003e160 	.word	0x2003e160

000b4434 <_GLOBAL__sub_I_particleSensor>:
        val_(val) {
   b4434:	4b02      	ldr	r3, [pc, #8]	; (b4440 <_GLOBAL__sub_I_particleSensor+0xc>)
MAX30105 particleSensor;
   b4436:	4803      	ldr	r0, [pc, #12]	; (b4444 <_GLOBAL__sub_I_particleSensor+0x10>)
   b4438:	2201      	movs	r2, #1
   b443a:	701a      	strb	r2, [r3, #0]
   b443c:	f000 b804 	b.w	b4448 <_ZN8MAX30105C1Ev>
   b4440:	2003e028 	.word	0x2003e028
   b4444:	2003e1c4 	.word	0x2003e1c4

000b4448 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   b4448:	4770      	bx	lr

000b444a <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
   b444a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b444e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
   b4452:	1a18      	subs	r0, r3, r0
   b4454:	b2c3      	uxtb	r3, r0
   b4456:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
   b4458:	2800      	cmp	r0, #0
   b445a:	bfbc      	itt	lt
   b445c:	1d18      	addlt	r0, r3, #4
   b445e:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
   b4460:	b2c0      	uxtb	r0, r0
   b4462:	4770      	bx	lr

000b4464 <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
   b4464:	b508      	push	{r3, lr}
   b4466:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
   b4468:	f7ff ffef 	bl	b444a <_ZN8MAX301059availableEv>
   b446c:	b130      	cbz	r0, b447c <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
   b446e:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   b4472:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b4474:	f003 0303 	and.w	r3, r3, #3
   b4478:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
   b447c:	bd08      	pop	{r3, pc}

000b447e <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b447e:	b570      	push	{r4, r5, r6, lr}
   b4480:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b4482:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b4484:	4616      	mov	r6, r2
   b4486:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   b4488:	f001 fd34 	bl	b5ef4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b448c:	6820      	ldr	r0, [r4, #0]
   b448e:	6803      	ldr	r3, [r0, #0]
   b4490:	4631      	mov	r1, r6
   b4492:	689b      	ldr	r3, [r3, #8]
   b4494:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   b4496:	2100      	movs	r1, #0
   b4498:	6820      	ldr	r0, [r4, #0]
   b449a:	f001 fd32 	bl	b5f02 <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   b449e:	6820      	ldr	r0, [r4, #0]
   b44a0:	2201      	movs	r2, #1
   b44a2:	4629      	mov	r1, r5
   b44a4:	f001 fd23 	bl	b5eee <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b44a8:	6820      	ldr	r0, [r4, #0]
   b44aa:	6803      	ldr	r3, [r0, #0]
   b44ac:	691b      	ldr	r3, [r3, #16]
   b44ae:	4798      	blx	r3
   b44b0:	b120      	cbz	r0, b44bc <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   b44b2:	6820      	ldr	r0, [r4, #0]
   b44b4:	6803      	ldr	r3, [r0, #0]
   b44b6:	695b      	ldr	r3, [r3, #20]
   b44b8:	4798      	blx	r3
   b44ba:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   b44bc:	bd70      	pop	{r4, r5, r6, pc}

000b44be <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   b44be:	7901      	ldrb	r1, [r0, #4]
   b44c0:	2204      	movs	r2, #4
   b44c2:	f7ff bfdc 	b.w	b447e <_ZN8MAX3010513readRegister8Ehh>

000b44c6 <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   b44c6:	7901      	ldrb	r1, [r0, #4]
   b44c8:	2206      	movs	r2, #6
   b44ca:	f7ff bfd8 	b.w	b447e <_ZN8MAX3010513readRegister8Ehh>

000b44ce <_ZN8MAX301055checkEv>:
{
   b44ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b44d2:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   b44d4:	f7ff fff7 	bl	b44c6 <_ZN8MAX3010514getReadPointerEv>
   b44d8:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   b44da:	4620      	mov	r0, r4
   b44dc:	f7ff ffef 	bl	b44be <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b44e0:	4285      	cmp	r5, r0
   b44e2:	f000 808e 	beq.w	b4602 <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b44e6:	1b45      	subs	r5, r0, r5
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b44e8:	f04f 0157 	mov.w	r1, #87	; 0x57
   b44ec:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b44ee:	7966      	ldrb	r6, [r4, #5]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b44f0:	bf48      	it	mi
   b44f2:	3520      	addmi	r5, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b44f4:	f001 fd02 	bl	b5efc <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   b44f8:	6820      	ldr	r0, [r4, #0]
   b44fa:	6803      	ldr	r3, [r0, #0]
   b44fc:	2107      	movs	r1, #7
   b44fe:	689b      	ldr	r3, [r3, #8]
   b4500:	4798      	blx	r3
    _i2cPort->endTransmission();
   b4502:	6820      	ldr	r0, [r4, #0]
   b4504:	f001 fd01 	bl	b5f0a <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4508:	436e      	muls	r6, r5
   b450a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b450e:	f04f 0820 	mov.w	r8, #32
        temp[3] = 0;
   b4512:	f04f 0900 	mov.w	r9, #0
    while (bytesLeftToRead > 0)
   b4516:	2e00      	cmp	r6, #0
   b4518:	dd74      	ble.n	b4604 <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
   b451a:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b451c:	bfc8      	it	gt
   b451e:	7962      	ldrbgt	r2, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b4520:	6820      	ldr	r0, [r4, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4522:	bfc9      	itett	gt
   b4524:	eb02 0242 	addgt.w	r2, r2, r2, lsl #1
   b4528:	4637      	movle	r7, r6
   b452a:	fbb8 f7f2 	udivgt	r7, r8, r2
   b452e:	4357      	mulgt	r7, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b4530:	463a      	mov	r2, r7
   b4532:	2157      	movs	r1, #87	; 0x57
      bytesLeftToRead -= toGet;
   b4534:	1bf6      	subs	r6, r6, r7
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b4536:	f001 fcda 	bl	b5eee <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
   b453a:	2f00      	cmp	r7, #0
   b453c:	ddeb      	ble.n	b4516 <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b453e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b4542:	6820      	ldr	r0, [r4, #0]
        temp[3] = 0;
   b4544:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b4548:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b454a:	f003 0303 	and.w	r3, r3, #3
   b454e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b4552:	6803      	ldr	r3, [r0, #0]
   b4554:	695b      	ldr	r3, [r3, #20]
   b4556:	4798      	blx	r3
   b4558:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   b455c:	6820      	ldr	r0, [r4, #0]
   b455e:	6803      	ldr	r3, [r0, #0]
   b4560:	695b      	ldr	r3, [r3, #20]
   b4562:	4798      	blx	r3
   b4564:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   b4568:	6820      	ldr	r0, [r4, #0]
   b456a:	6803      	ldr	r3, [r0, #0]
   b456c:	695b      	ldr	r3, [r3, #20]
   b456e:	4798      	blx	r3
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4570:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[0] = _i2cPort->read();
   b4574:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4578:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b457a:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b457c:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4580:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
   b4584:	7963      	ldrb	r3, [r4, #5]
   b4586:	2b01      	cmp	r3, #1
   b4588:	d919      	bls.n	b45be <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
   b458a:	6820      	ldr	r0, [r4, #0]
   b458c:	6803      	ldr	r3, [r0, #0]
   b458e:	695b      	ldr	r3, [r3, #20]
   b4590:	4798      	blx	r3
   b4592:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b4596:	6820      	ldr	r0, [r4, #0]
   b4598:	6803      	ldr	r3, [r0, #0]
   b459a:	695b      	ldr	r3, [r3, #20]
   b459c:	4798      	blx	r3
   b459e:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b45a2:	6820      	ldr	r0, [r4, #0]
   b45a4:	6803      	ldr	r3, [r0, #0]
   b45a6:	695b      	ldr	r3, [r3, #20]
   b45a8:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b45aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b45ae:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b45b2:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b45b4:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b45b6:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b45ba:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
   b45be:	7963      	ldrb	r3, [r4, #5]
   b45c0:	2b02      	cmp	r3, #2
   b45c2:	d919      	bls.n	b45f8 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
   b45c4:	6820      	ldr	r0, [r4, #0]
   b45c6:	6803      	ldr	r3, [r0, #0]
   b45c8:	695b      	ldr	r3, [r3, #20]
   b45ca:	4798      	blx	r3
   b45cc:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b45d0:	6820      	ldr	r0, [r4, #0]
   b45d2:	6803      	ldr	r3, [r0, #0]
   b45d4:	695b      	ldr	r3, [r3, #20]
   b45d6:	4798      	blx	r3
   b45d8:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b45dc:	6820      	ldr	r0, [r4, #0]
   b45de:	6803      	ldr	r3, [r0, #0]
   b45e0:	695b      	ldr	r3, [r3, #20]
   b45e2:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b45e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b45e8:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b45ec:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b45ee:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b45f0:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b45f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b45f8:	7963      	ldrb	r3, [r4, #5]
   b45fa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b45fe:	441f      	add	r7, r3
      while (toGet > 0)
   b4600:	e79b      	b.n	b453a <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
   b4602:	2500      	movs	r5, #0
}
   b4604:	b2a8      	uxth	r0, r5
   b4606:	b003      	add	sp, #12
   b4608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b460c <_ZN8MAX301059safeCheckEh>:
{
   b460c:	b570      	push	{r4, r5, r6, lr}
   b460e:	4605      	mov	r5, r0
   b4610:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4612:	f000 fbc1 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
   b4616:	4604      	mov	r4, r0
   b4618:	f000 fbbe 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b461c:	1b00      	subs	r0, r0, r4
   b461e:	42b0      	cmp	r0, r6
   b4620:	d808      	bhi.n	b4634 <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b4622:	4628      	mov	r0, r5
   b4624:	f7ff ff53 	bl	b44ce <_ZN8MAX301055checkEv>
   b4628:	2801      	cmp	r0, #1
   b462a:	d004      	beq.n	b4636 <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b462c:	2001      	movs	r0, #1
   b462e:	f000 ff41 	bl	b54b4 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b4632:	e7f1      	b.n	b4618 <_ZN8MAX301059safeCheckEh+0xc>
   b4634:	2000      	movs	r0, #0
}
   b4636:	bd70      	pop	{r4, r5, r6, pc}

000b4638 <_ZN8MAX301056getRedEv>:
{
   b4638:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b463a:	21fa      	movs	r1, #250	; 0xfa
{
   b463c:	4604      	mov	r4, r0
  if(safeCheck(250))
   b463e:	f7ff ffe5 	bl	b460c <_ZN8MAX301059safeCheckEh>
   b4642:	b120      	cbz	r0, b464e <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
   b4644:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b4648:	3302      	adds	r3, #2
   b464a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b464e:	bd10      	pop	{r4, pc}

000b4650 <_ZN8MAX301055getIREv>:
{
   b4650:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b4652:	21fa      	movs	r1, #250	; 0xfa
{
   b4654:	4604      	mov	r4, r0
  if(safeCheck(250))
   b4656:	f7ff ffd9 	bl	b460c <_ZN8MAX301059safeCheckEh>
   b465a:	b120      	cbz	r0, b4666 <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b465c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b4660:	3306      	adds	r3, #6
   b4662:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b4666:	bd10      	pop	{r4, pc}

000b4668 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   b4668:	7901      	ldrb	r1, [r0, #4]
   b466a:	22ff      	movs	r2, #255	; 0xff
   b466c:	f7ff bf07 	b.w	b447e <_ZN8MAX3010513readRegister8Ehh>

000b4670 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b4670:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b4672:	22fe      	movs	r2, #254	; 0xfe
   b4674:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   b4676:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b4678:	f7ff ff01 	bl	b447e <_ZN8MAX3010513readRegister8Ehh>
   b467c:	71a0      	strb	r0, [r4, #6]
}
   b467e:	bd10      	pop	{r4, pc}

000b4680 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4680:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4682:	4604      	mov	r4, r0
   b4684:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4686:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4688:	461d      	mov	r5, r3
   b468a:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   b468c:	f001 fc00 	bl	b5e90 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4690:	9901      	ldr	r1, [sp, #4]
   b4692:	6820      	ldr	r0, [r4, #0]
   b4694:	f001 fbf8 	bl	b5e88 <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   b4698:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   b469a:	4620      	mov	r0, r4
   b469c:	f7ff ffe4 	bl	b4668 <_ZN8MAX3010510readPartIDEv>
   b46a0:	2815      	cmp	r0, #21
   b46a2:	d105      	bne.n	b46b0 <_ZN8MAX301055beginER7TwoWiremh+0x30>
  readRevisionID();
   b46a4:	4620      	mov	r0, r4
   b46a6:	f7ff ffe3 	bl	b4670 <_ZN8MAX3010514readRevisionIDEv>
  return true;
   b46aa:	2001      	movs	r0, #1
}
   b46ac:	b003      	add	sp, #12
   b46ae:	bd30      	pop	{r4, r5, pc}
    return false;
   b46b0:	2000      	movs	r0, #0
   b46b2:	e7fb      	b.n	b46ac <_ZN8MAX301055beginER7TwoWiremh+0x2c>

000b46b4 <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b46b4:	b570      	push	{r4, r5, r6, lr}
   b46b6:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b46b8:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b46ba:	4616      	mov	r6, r2
   b46bc:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   b46be:	f001 fc19 	bl	b5ef4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b46c2:	6820      	ldr	r0, [r4, #0]
   b46c4:	6803      	ldr	r3, [r0, #0]
   b46c6:	4631      	mov	r1, r6
   b46c8:	689b      	ldr	r3, [r3, #8]
   b46ca:	4798      	blx	r3
  _i2cPort->write(value);
   b46cc:	6820      	ldr	r0, [r4, #0]
   b46ce:	6803      	ldr	r3, [r0, #0]
   b46d0:	4629      	mov	r1, r5
   b46d2:	689b      	ldr	r3, [r3, #8]
   b46d4:	4798      	blx	r3
  _i2cPort->endTransmission();
   b46d6:	6820      	ldr	r0, [r4, #0]
}
   b46d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   b46dc:	f001 bc15 	b.w	b5f0a <_ZN7TwoWire15endTransmissionEv>

000b46e0 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b46e0:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   b46e2:	220c      	movs	r2, #12
   b46e4:	7901      	ldrb	r1, [r0, #4]
   b46e6:	f7ff bfe5 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b46ea <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b46ea:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   b46ec:	220d      	movs	r2, #13
   b46ee:	7901      	ldrb	r1, [r0, #4]
   b46f0:	f7ff bfe0 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b46f4 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b46f4:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   b46f6:	220e      	movs	r2, #14
   b46f8:	7901      	ldrb	r1, [r0, #4]
   b46fa:	f7ff bfdb 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b46fe <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b46fe:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   b4700:	2210      	movs	r2, #16
   b4702:	7901      	ldrb	r1, [r0, #4]
   b4704:	f7ff bfd6 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b4708 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4708:	b510      	push	{r4, lr}
   b470a:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   b470c:	7901      	ldrb	r1, [r0, #4]
   b470e:	2300      	movs	r3, #0
   b4710:	2204      	movs	r2, #4
   b4712:	f7ff ffcf 	bl	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   b4716:	7921      	ldrb	r1, [r4, #4]
   b4718:	4620      	mov	r0, r4
   b471a:	2300      	movs	r3, #0
   b471c:	2205      	movs	r2, #5
   b471e:	f7ff ffc9 	bl	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b4722:	7921      	ldrb	r1, [r4, #4]
   b4724:	4620      	mov	r0, r4
   b4726:	2300      	movs	r3, #0
}
   b4728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b472c:	2206      	movs	r2, #6
   b472e:	f7ff bfc1 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b4732 <_ZN8MAX301057bitMaskEhhh>:
{
   b4732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4736:	460d      	mov	r5, r1
   b4738:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b473a:	460a      	mov	r2, r1
   b473c:	7901      	ldrb	r1, [r0, #4]
{
   b473e:	4604      	mov	r4, r0
   b4740:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b4742:	f7ff fe9c 	bl	b447e <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b4746:	4038      	ands	r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b4748:	ea46 0300 	orr.w	r3, r6, r0
   b474c:	7921      	ldrb	r1, [r4, #4]
   b474e:	462a      	mov	r2, r5
   b4750:	4620      	mov	r0, r4
}
   b4752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b4756:	f7ff bfad 	b.w	b46b4 <_ZN8MAX3010514writeRegister8Ehhh>

000b475a <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b475a:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b475c:	22bf      	movs	r2, #191	; 0xbf
   b475e:	2340      	movs	r3, #64	; 0x40
   b4760:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b4762:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b4764:	f7ff ffe5 	bl	b4732 <_ZN8MAX301057bitMaskEhhh>
   b4768:	f000 fb16 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
   b476c:	4605      	mov	r5, r0
   b476e:	f000 fb13 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b4772:	1b40      	subs	r0, r0, r5
   b4774:	2863      	cmp	r0, #99	; 0x63
   b4776:	d80a      	bhi.n	b478e <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   b4778:	7921      	ldrb	r1, [r4, #4]
   b477a:	2209      	movs	r2, #9
   b477c:	4620      	mov	r0, r4
   b477e:	f7ff fe7e 	bl	b447e <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b4782:	0643      	lsls	r3, r0, #25
   b4784:	d503      	bpl.n	b478e <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b4786:	2001      	movs	r0, #1
   b4788:	f000 fe94 	bl	b54b4 <delay>
  while (millis() - startTime < 100)
   b478c:	e7ef      	b.n	b476e <_ZN8MAX301059softResetEv+0x14>
}
   b478e:	bd38      	pop	{r3, r4, r5, pc}

000b4790 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4790:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b4792:	22f8      	movs	r2, #248	; 0xf8
   b4794:	2109      	movs	r1, #9
   b4796:	f7ff bfcc 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b479a <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b479a:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b479c:	229f      	movs	r2, #159	; 0x9f
   b479e:	210a      	movs	r1, #10
   b47a0:	f7ff bfc7 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b47a4 <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b47a4:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b47a6:	22e3      	movs	r2, #227	; 0xe3
   b47a8:	210a      	movs	r1, #10
   b47aa:	f7ff bfc2 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b47ae <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b47ae:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b47b0:	22fc      	movs	r2, #252	; 0xfc
   b47b2:	210a      	movs	r1, #10
   b47b4:	f7ff bfbd 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b47b8 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b47b8:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b47ba:	4613      	mov	r3, r2
   b47bc:	2903      	cmp	r1, #3
   b47be:	d814      	bhi.n	b47ea <_ZN8MAX3010510enableSlotEhh+0x32>
   b47c0:	e8df f001 	tbb	[pc, r1]
   b47c4:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b47c8:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b47ca:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b47cc:	f7ff bfb1 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b47d0:	011b      	lsls	r3, r3, #4
   b47d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b47d6:	228f      	movs	r2, #143	; 0x8f
   b47d8:	e7f7      	b.n	b47ca <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b47da:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b47dc:	2112      	movs	r1, #18
   b47de:	e7f5      	b.n	b47cc <_ZN8MAX3010510enableSlotEhh+0x14>
   b47e0:	011b      	lsls	r3, r3, #4
   b47e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b47e6:	228f      	movs	r2, #143	; 0x8f
   b47e8:	e7f8      	b.n	b47dc <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b47ea:	4770      	bx	lr

000b47ec <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b47ec:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b47ee:	221f      	movs	r2, #31
   b47f0:	2108      	movs	r1, #8
   b47f2:	f7ff bf9e 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b47f6 <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b47f6:	2310      	movs	r3, #16
   b47f8:	22ef      	movs	r2, #239	; 0xef
   b47fa:	2108      	movs	r1, #8
   b47fc:	f7ff bf99 	b.w	b4732 <_ZN8MAX301057bitMaskEhhh>

000b4800 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4804:	4615      	mov	r5, r2
   b4806:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b480a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b480e:	4604      	mov	r4, r0
   b4810:	4688      	mov	r8, r1
   b4812:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b4814:	f7ff ffa1 	bl	b475a <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b4818:	2d01      	cmp	r5, #1
   b481a:	d149      	bne.n	b48b0 <_ZN8MAX301055setupEhhhiii+0xb0>
   b481c:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b481e:	4620      	mov	r0, r4
   b4820:	f7ff ffe4 	bl	b47ec <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b4824:	4620      	mov	r0, r4
   b4826:	f7ff ffe6 	bl	b47f6 <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b482a:	2e03      	cmp	r6, #3
   b482c:	d154      	bne.n	b48d8 <_ZN8MAX301055setupEhhhiii+0xd8>
   b482e:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4830:	4620      	mov	r0, r4
   b4832:	f7ff ffad 	bl	b4790 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b4836:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b483a:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b483c:	da51      	bge.n	b48e2 <_ZN8MAX301055setupEhhhiii+0xe2>
   b483e:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b4840:	4620      	mov	r0, r4
   b4842:	f7ff ffaa 	bl	b479a <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b4846:	2f63      	cmp	r7, #99	; 0x63
   b4848:	dc58      	bgt.n	b48fc <_ZN8MAX301055setupEhhhiii+0xfc>
   b484a:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b484c:	4620      	mov	r0, r4
   b484e:	f7ff ffa9 	bl	b47a4 <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b4852:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b4856:	dc71      	bgt.n	b493c <_ZN8MAX301055setupEhhhiii+0x13c>
   b4858:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b485a:	4620      	mov	r0, r4
   b485c:	f7ff ffa7 	bl	b47ae <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b4860:	4641      	mov	r1, r8
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff ff3c 	bl	b46e0 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b4868:	4641      	mov	r1, r8
   b486a:	4620      	mov	r0, r4
   b486c:	f7ff ff3d 	bl	b46ea <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b4870:	4641      	mov	r1, r8
   b4872:	4620      	mov	r0, r4
   b4874:	f7ff ff3e 	bl	b46f4 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4878:	4641      	mov	r1, r8
   b487a:	4620      	mov	r0, r4
   b487c:	f7ff ff3f 	bl	b46fe <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4880:	2201      	movs	r2, #1
   b4882:	4611      	mov	r1, r2
   b4884:	4620      	mov	r0, r4
   b4886:	f7ff ff97 	bl	b47b8 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b488a:	2e01      	cmp	r6, #1
   b488c:	d90b      	bls.n	b48a6 <_ZN8MAX301055setupEhhhiii+0xa6>
   b488e:	2202      	movs	r2, #2
   b4890:	4611      	mov	r1, r2
   b4892:	4620      	mov	r0, r4
   b4894:	f7ff ff90 	bl	b47b8 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4898:	2e02      	cmp	r6, #2
   b489a:	d004      	beq.n	b48a6 <_ZN8MAX301055setupEhhhiii+0xa6>
   b489c:	2203      	movs	r2, #3
   b489e:	4611      	mov	r1, r2
   b48a0:	4620      	mov	r0, r4
   b48a2:	f7ff ff89 	bl	b47b8 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b48a6:	4620      	mov	r0, r4
}
   b48a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b48ac:	f7ff bf2c 	b.w	b4708 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b48b0:	2d02      	cmp	r5, #2
   b48b2:	d101      	bne.n	b48b8 <_ZN8MAX301055setupEhhhiii+0xb8>
   b48b4:	2120      	movs	r1, #32
   b48b6:	e7b2      	b.n	b481e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b48b8:	2d04      	cmp	r5, #4
   b48ba:	d101      	bne.n	b48c0 <_ZN8MAX301055setupEhhhiii+0xc0>
   b48bc:	2140      	movs	r1, #64	; 0x40
   b48be:	e7ae      	b.n	b481e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b48c0:	2d08      	cmp	r5, #8
   b48c2:	d101      	bne.n	b48c8 <_ZN8MAX301055setupEhhhiii+0xc8>
   b48c4:	2160      	movs	r1, #96	; 0x60
   b48c6:	e7aa      	b.n	b481e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b48c8:	2d10      	cmp	r5, #16
   b48ca:	d101      	bne.n	b48d0 <_ZN8MAX301055setupEhhhiii+0xd0>
   b48cc:	2180      	movs	r1, #128	; 0x80
   b48ce:	e7a6      	b.n	b481e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b48d0:	2d20      	cmp	r5, #32
   b48d2:	d1f3      	bne.n	b48bc <_ZN8MAX301055setupEhhhiii+0xbc>
   b48d4:	21a0      	movs	r1, #160	; 0xa0
   b48d6:	e7a2      	b.n	b481e <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b48d8:	2e02      	cmp	r6, #2
   b48da:	bf0c      	ite	eq
   b48dc:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b48de:	2102      	movne	r1, #2
   b48e0:	e7a6      	b.n	b4830 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b48e2:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b48e6:	da01      	bge.n	b48ec <_ZN8MAX301055setupEhhhiii+0xec>
   b48e8:	2120      	movs	r1, #32
   b48ea:	e7a9      	b.n	b4840 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b48ec:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b48f0:	da01      	bge.n	b48f6 <_ZN8MAX301055setupEhhhiii+0xf6>
   b48f2:	2140      	movs	r1, #64	; 0x40
   b48f4:	e7a4      	b.n	b4840 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b48f6:	d1a2      	bne.n	b483e <_ZN8MAX301055setupEhhhiii+0x3e>
   b48f8:	2160      	movs	r1, #96	; 0x60
   b48fa:	e7a1      	b.n	b4840 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b48fc:	2fc7      	cmp	r7, #199	; 0xc7
   b48fe:	dc01      	bgt.n	b4904 <_ZN8MAX301055setupEhhhiii+0x104>
   b4900:	2104      	movs	r1, #4
   b4902:	e7a3      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b4904:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4908:	da01      	bge.n	b490e <_ZN8MAX301055setupEhhhiii+0x10e>
   b490a:	2108      	movs	r1, #8
   b490c:	e79e      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b490e:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b4912:	da01      	bge.n	b4918 <_ZN8MAX301055setupEhhhiii+0x118>
   b4914:	210c      	movs	r1, #12
   b4916:	e799      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b4918:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b491c:	da01      	bge.n	b4922 <_ZN8MAX301055setupEhhhiii+0x122>
   b491e:	2110      	movs	r1, #16
   b4920:	e794      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b4922:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b4926:	da01      	bge.n	b492c <_ZN8MAX301055setupEhhhiii+0x12c>
   b4928:	2114      	movs	r1, #20
   b492a:	e78f      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b492c:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b4930:	da01      	bge.n	b4936 <_ZN8MAX301055setupEhhhiii+0x136>
   b4932:	2118      	movs	r1, #24
   b4934:	e78a      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b4936:	d188      	bne.n	b484a <_ZN8MAX301055setupEhhhiii+0x4a>
   b4938:	211c      	movs	r1, #28
   b493a:	e787      	b.n	b484c <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b493c:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b4940:	dc01      	bgt.n	b4946 <_ZN8MAX301055setupEhhhiii+0x146>
   b4942:	2101      	movs	r1, #1
   b4944:	e789      	b.n	b485a <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b4946:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b494a:	dc01      	bgt.n	b4950 <_ZN8MAX301055setupEhhhiii+0x150>
   b494c:	2102      	movs	r1, #2
   b494e:	e784      	b.n	b485a <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b4950:	f240 139b 	movw	r3, #411	; 0x19b
   b4954:	4599      	cmp	r9, r3
   b4956:	f47f af7f 	bne.w	b4858 <_ZN8MAX301055setupEhhhiii+0x58>
   b495a:	2103      	movs	r1, #3
   b495c:	e77d      	b.n	b485a <_ZN8MAX301055setupEhhhiii+0x5a>

000b495e <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b4962:	2400      	movs	r4, #0
   b4964:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b4966:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b496a:	2401      	movs	r4, #1
  while (i < n_size-1){
   b496c:	45a0      	cmp	r8, r4
   b496e:	dd27      	ble.n	b49c0 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b4970:	9d06      	ldr	r5, [sp, #24]
   b4972:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b4976:	45ac      	cmp	ip, r5
   b4978:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b497c:	f104 0501 	add.w	r5, r4, #1
   b4980:	dd1c      	ble.n	b49bc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4982:	4416      	add	r6, r2
   b4984:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4988:	45b4      	cmp	ip, r6
   b498a:	dd17      	ble.n	b49bc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b498c:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b498e:	429e      	cmp	r6, r3
   b4990:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b4994:	eba6 0e04 	sub.w	lr, r6, r4
   b4998:	4635      	mov	r5, r6
   b499a:	d003      	beq.n	b49a4 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b499c:	45bc      	cmp	ip, r7
   b499e:	f106 0601 	add.w	r6, r6, #1
   b49a2:	d0f4      	beq.n	b498e <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b49a4:	45bc      	cmp	ip, r7
   b49a6:	dd09      	ble.n	b49bc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b49a8:	680e      	ldr	r6, [r1, #0]
   b49aa:	2e0e      	cmp	r6, #14
   b49ac:	dc06      	bgt.n	b49bc <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b49ae:	1c75      	adds	r5, r6, #1
   b49b0:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b49b2:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b49b6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b49ba:	4425      	add	r5, r4
{
   b49bc:	462c      	mov	r4, r5
   b49be:	e7d5      	b.n	b496c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b49c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b49c4 <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b49c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b49c6:	2301      	movs	r3, #1
   b49c8:	4604      	mov	r4, r0
   b49ca:	428b      	cmp	r3, r1
   b49cc:	da0f      	bge.n	b49ee <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b49ce:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b49d2:	461a      	mov	r2, r3
   b49d4:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b49d6:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b49da:	42b7      	cmp	r7, r6
   b49dc:	dd03      	ble.n	b49e6 <_Z17maxim_sort_ascendPll+0x22>
   b49de:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b49e0:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b49e4:	d1f7      	bne.n	b49d6 <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b49e6:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b49ea:	3301      	adds	r3, #1
   b49ec:	e7ed      	b.n	b49ca <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b49ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b49f0 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b49f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b49f4:	2301      	movs	r3, #1
{
   b49f6:	4690      	mov	r8, r2
   b49f8:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b49fa:	4543      	cmp	r3, r8
   b49fc:	da16      	bge.n	b4a2c <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b49fe:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4a02:	461c      	mov	r4, r3
   b4a04:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4a08:	46ac      	mov	ip, r5
   b4a0a:	f8d9 2000 	ldr.w	r2, [r9]
   b4a0e:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b4a12:	4696      	mov	lr, r2
   b4a14:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b4a18:	4596      	cmp	lr, r2
   b4a1a:	dd03      	ble.n	b4a24 <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b4a1c:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b4a1e:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b4a22:	d1f2      	bne.n	b4a0a <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b4a24:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4a28:	3301      	adds	r3, #1
   b4a2a:	e7e6      	b.n	b49fa <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b4a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4a30 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b4a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a34:	4604      	mov	r4, r0
   b4a36:	461f      	mov	r7, r3
   b4a38:	4610      	mov	r0, r2
   b4a3a:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b4a3c:	680a      	ldr	r2, [r1, #0]
   b4a3e:	4621      	mov	r1, r4
   b4a40:	f7ff ffd6 	bl	b49f0 <_Z26maxim_sort_indices_descendPlS_l>
   b4a44:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4a48:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b4a4c:	6829      	ldr	r1, [r5, #0]
   b4a4e:	4291      	cmp	r1, r2
   b4a50:	dd1d      	ble.n	b4a8e <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b4a52:	1c53      	adds	r3, r2, #1
   b4a54:	461e      	mov	r6, r3
   b4a56:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4a58:	42b1      	cmp	r1, r6
   b4a5a:	d016      	beq.n	b4a8a <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b4a5c:	1c50      	adds	r0, r2, #1
   b4a5e:	bf18      	it	ne
   b4a60:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b4a64:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b4a68:	bf08      	it	eq
   b4a6a:	4610      	moveq	r0, r2
   b4a6c:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b4a70:	42b8      	cmp	r0, r7
   b4a72:	dc01      	bgt.n	b4a78 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b4a74:	4586      	cmp	lr, r0
   b4a76:	dd06      	ble.n	b4a86 <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b4a78:	6828      	ldr	r0, [r5, #0]
   b4a7a:	f100 0801 	add.w	r8, r0, #1
   b4a7e:	f8c5 8000 	str.w	r8, [r5]
   b4a82:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4a86:	3601      	adds	r6, #1
   b4a88:	e7e6      	b.n	b4a58 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b4a8a:	461a      	mov	r2, r3
   b4a8c:	e7de      	b.n	b4a4c <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a8e:	4620      	mov	r0, r4
}
   b4a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a94:	f7ff bf96 	b.w	b49c4 <_Z17maxim_sort_ascendPll>

000b4a98 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b4a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b4a9a:	9d06      	ldr	r5, [sp, #24]
   b4a9c:	9500      	str	r5, [sp, #0]
   b4a9e:	f7ff ff5e 	bl	b495e <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b4aa2:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b4aa4:	9b07      	ldr	r3, [sp, #28]
   b4aa6:	f7ff ffc3 	bl	b4a30 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b4aaa:	6822      	ldr	r2, [r4, #0]
   b4aac:	9b08      	ldr	r3, [sp, #32]
   b4aae:	429a      	cmp	r2, r3
   b4ab0:	bfd4      	ite	le
   b4ab2:	6022      	strle	r2, [r4, #0]
   b4ab4:	6023      	strgt	r3, [r4, #0]
}
   b4ab6:	b003      	add	sp, #12
   b4ab8:	bd30      	pop	{r4, r5, pc}
	...

000b4abc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
   b4abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ac0:	b09d      	sub	sp, #116	; 0x74
   b4ac2:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b4ac6:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4ac8:	2200      	movs	r2, #0
{
   b4aca:	469b      	mov	fp, r3
   b4acc:	4605      	mov	r5, r0
   b4ace:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b4ad0:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4ad2:	42a2      	cmp	r2, r4
   b4ad4:	da04      	bge.n	b4ae0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
   b4ad6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   b4ada:	3201      	adds	r2, #1
   b4adc:	440b      	add	r3, r1
   b4ade:	e7f8      	b.n	b4ad2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b4ae0:	4f8d      	ldr	r7, [pc, #564]	; (b4d18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   b4ae2:	fbb3 f3f4 	udiv	r3, r3, r4
   b4ae6:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4ae8:	2200      	movs	r2, #0
   b4aea:	42a2      	cmp	r2, r4
   b4aec:	da06      	bge.n	b4afc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b4aee:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   b4af2:	1a59      	subs	r1, r3, r1
   b4af4:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4af8:	3201      	adds	r2, #1
   b4afa:	e7f6      	b.n	b4aea <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x2e>
   b4afc:	4a86      	ldr	r2, [pc, #536]	; (b4d18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4afe:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4b00:	6813      	ldr	r3, [r2, #0]
   b4b02:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b4b06:	4403      	add	r3, r0
   b4b08:	6850      	ldr	r0, [r2, #4]
   b4b0a:	4403      	add	r3, r0
   b4b0c:	6890      	ldr	r0, [r2, #8]
   b4b0e:	181b      	adds	r3, r3, r0
   b4b10:	bf48      	it	mi
   b4b12:	3303      	addmi	r3, #3
   b4b14:	3101      	adds	r1, #1
   b4b16:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4b18:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4b1a:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4b1e:	d1ef      	bne.n	b4b00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b4b20:	2300      	movs	r3, #0
   b4b22:	4a7d      	ldr	r2, [pc, #500]	; (b4d18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4b24:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b4b26:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4b2a:	f10a 0a01 	add.w	sl, sl, #1
   b4b2e:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b4b32:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4b34:	d1f7      	bne.n	b4b26 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b4b36:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b4b3a:	4293      	cmp	r3, r2
   b4b3c:	dd4f      	ble.n	b4bde <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b4b3e:	fb93 fafa 	sdiv	sl, r3, sl
   b4b42:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b4b46:	bfa8      	it	ge
   b4b48:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b4b4c:	223c      	movs	r2, #60	; 0x3c
   b4b4e:	2100      	movs	r1, #0
   b4b50:	a80d      	add	r0, sp, #52	; 0x34
   b4b52:	f001 fc0e 	bl	b6372 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b4b56:	2304      	movs	r3, #4
   b4b58:	220f      	movs	r2, #15
   b4b5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4b5e:	f8cd a000 	str.w	sl, [sp]
   b4b62:	4a6d      	ldr	r2, [pc, #436]	; (b4d18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   b4b64:	2364      	movs	r3, #100	; 0x64
   b4b66:	a907      	add	r1, sp, #28
   b4b68:	a80d      	add	r0, sp, #52	; 0x34
   b4b6a:	f7ff ff95 	bl	b4a98 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b4b6e:	9b07      	ldr	r3, [sp, #28]
   b4b70:	2b01      	cmp	r3, #1
   b4b72:	f04f 0200 	mov.w	r2, #0
   b4b76:	dd35      	ble.n	b4be4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
   b4b78:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b7a:	f04f 0c01 	mov.w	ip, #1
   b4b7e:	4608      	mov	r0, r1
   b4b80:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b4b84:	6800      	ldr	r0, [r0, #0]
   b4b86:	f10c 0c01 	add.w	ip, ip, #1
   b4b8a:	ebae 0000 	sub.w	r0, lr, r0
   b4b8e:	4563      	cmp	r3, ip
   b4b90:	f101 0104 	add.w	r1, r1, #4
   b4b94:	4402      	add	r2, r0
   b4b96:	d1f2      	bne.n	b4b7e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b4b98:	1e59      	subs	r1, r3, #1
   b4b9a:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b4b9e:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b4ba2:	fb91 f2f2 	sdiv	r2, r1, r2
   b4ba6:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b4baa:	2201      	movs	r2, #1
   b4bac:	495b      	ldr	r1, [pc, #364]	; (b4d1c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
   b4bae:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4bb2:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4bb4:	42a2      	cmp	r2, r4
   b4bb6:	db19      	blt.n	b4bec <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b4bb8:	2200      	movs	r2, #0
   b4bba:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b4bbe:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b4bc2:	ae0d      	add	r6, sp, #52	; 0x34
   b4bc4:	920c      	str	r2, [sp, #48]	; 0x30
   b4bc6:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4bc8:	4293      	cmp	r3, r2
   b4bca:	dd1b      	ble.n	b4c04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b4bcc:	f851 0b04 	ldr.w	r0, [r1], #4
   b4bd0:	2864      	cmp	r0, #100	; 0x64
   b4bd2:	dd15      	ble.n	b4c00 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b4bd4:	4b52      	ldr	r3, [pc, #328]	; (b4d20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
   b4bd6:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b4bda:	2300      	movs	r3, #0
   b4bdc:	e092      	b.n	b4d04 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b4bde:	f04f 0a1e 	mov.w	sl, #30
   b4be2:	e7b3      	b.n	b4b4c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b4be4:	494e      	ldr	r1, [pc, #312]	; (b4d20 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
   b4be6:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b4bea:	e7df      	b.n	b4bac <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b4bec:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   b4bf0:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b4bf4:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   b4bf8:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4bfc:	3201      	adds	r2, #1
   b4bfe:	e7d9      	b.n	b4bb4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4c00:	3201      	adds	r2, #1
   b4c02:	e7e1      	b.n	b4bc8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b4c04:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4c06:	3b01      	subs	r3, #1
   b4c08:	4f43      	ldr	r7, [pc, #268]	; (b4d18 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4c0a:	f8df c110 	ldr.w	ip, [pc, #272]	; b4d1c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4c0e:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b4c10:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b4c12:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4c14:	9305      	str	r3, [sp, #20]
   b4c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4c1a:	4293      	cmp	r3, r2
   b4c1c:	dd56      	ble.n	b4ccc <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b4c1e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b4c22:	f856 0b04 	ldr.w	r0, [r6], #4
   b4c26:	4613      	mov	r3, r2
   b4c28:	eba8 0900 	sub.w	r9, r8, r0
   b4c2c:	3301      	adds	r3, #1
   b4c2e:	f1b9 0f03 	cmp.w	r9, #3
   b4c32:	9304      	str	r3, [sp, #16]
   b4c34:	ddef      	ble.n	b4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b4c36:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4c3a:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b4c3c:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4c3e:	4598      	cmp	r8, r3
   b4c40:	dd0e      	ble.n	b4c60 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4c42:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b4c46:	4572      	cmp	r2, lr
   b4c48:	bfc8      	it	gt
   b4c4a:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4c4c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4c50:	bfc8      	it	gt
   b4c52:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4c54:	4552      	cmp	r2, sl
   b4c56:	bfc4      	itt	gt
   b4c58:	461d      	movgt	r5, r3
   b4c5a:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4c5c:	3301      	adds	r3, #1
   b4c5e:	e7ee      	b.n	b4c3e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b4c60:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4c64:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b4c68:	1a9b      	subs	r3, r3, r2
   b4c6a:	1a22      	subs	r2, r4, r0
   b4c6c:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b4c6e:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4c72:	fb93 f3f9 	sdiv	r3, r3, r9
   b4c76:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b4c78:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4c7c:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b4c7e:	fb0a f202 	mul.w	r2, sl, r2
   b4c82:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c86:	f1ba 0f00 	cmp.w	sl, #0
   b4c8a:	ddc4      	ble.n	b4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
   b4c8c:	2904      	cmp	r1, #4
   b4c8e:	dcc2      	bgt.n	b4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b4c90:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b4c94:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b4c98:	1a28      	subs	r0, r5, r0
   b4c9a:	1ad2      	subs	r2, r2, r3
   b4c9c:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b4c9e:	fb90 f0f9 	sdiv	r0, r0, r9
   b4ca2:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b4ca4:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b4ca8:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b4caa:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4cae:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b4cb2:	d0b0      	beq.n	b4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4cb4:	ab1c      	add	r3, sp, #112	; 0x70
   b4cb6:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b4cba:	2364      	movs	r3, #100	; 0x64
   b4cbc:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b4cc0:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4cc2:	fb92 f2fa 	sdiv	r2, r2, sl
   b4cc6:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b4cca:	e7a4      	b.n	b4c16 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b4ccc:	a808      	add	r0, sp, #32
   b4cce:	f7ff fe79 	bl	b49c4 <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b4cd2:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b4cd4:	2903      	cmp	r1, #3
   b4cd6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b4cda:	dd18      	ble.n	b4d0e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b4cdc:	a91c      	add	r1, sp, #112	; 0x70
   b4cde:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4ce2:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b4ce6:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b4cea:	4413      	add	r3, r2
   b4cec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b4cf0:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b4cf2:	1eda      	subs	r2, r3, #3
   b4cf4:	2ab4      	cmp	r2, #180	; 0xb4
   b4cf6:	f63f af6d 	bhi.w	b4bd4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b4cfa:	4a0a      	ldr	r2, [pc, #40]	; (b4d24 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
   b4cfc:	5cd3      	ldrb	r3, [r2, r3]
   b4cfe:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b4d02:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b4d04:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b4d06:	7013      	strb	r3, [r2, #0]
}
   b4d08:	b01d      	add	sp, #116	; 0x74
   b4d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b4d0e:	aa1c      	add	r2, sp, #112	; 0x70
   b4d10:	4413      	add	r3, r2
   b4d12:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b4d16:	e7ec      	b.n	b4cf2 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
   b4d18:	2003e398 	.word	0x2003e398
   b4d1c:	2003e528 	.word	0x2003e528
   b4d20:	fffffc19 	.word	0xfffffc19
   b4d24:	000b65cb 	.word	0x000b65cb

000b4d28 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <netdb_freeaddrinfo+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	689b      	ldr	r3, [r3, #8]
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	00030268 	.word	0x00030268

000b4d38 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <netdb_getaddrinfo+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	68db      	ldr	r3, [r3, #12]
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	00030268 	.word	0x00030268

000b4d48 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d48:	b508      	push	{r3, lr}
   b4d4a:	4b02      	ldr	r3, [pc, #8]	; (b4d54 <HAL_Pin_Mode+0xc>)
   b4d4c:	681b      	ldr	r3, [r3, #0]
   b4d4e:	689b      	ldr	r3, [r3, #8]
   b4d50:	9301      	str	r3, [sp, #4]
   b4d52:	bd08      	pop	{r3, pc}
   b4d54:	0003022c 	.word	0x0003022c

000b4d58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d58:	b508      	push	{r3, lr}
   b4d5a:	4b02      	ldr	r3, [pc, #8]	; (b4d64 <HAL_Get_Pin_Mode+0xc>)
   b4d5c:	681b      	ldr	r3, [r3, #0]
   b4d5e:	68db      	ldr	r3, [r3, #12]
   b4d60:	9301      	str	r3, [sp, #4]
   b4d62:	bd08      	pop	{r3, pc}
   b4d64:	0003022c 	.word	0x0003022c

000b4d68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d68:	b508      	push	{r3, lr}
   b4d6a:	4b02      	ldr	r3, [pc, #8]	; (b4d74 <HAL_GPIO_Write+0xc>)
   b4d6c:	681b      	ldr	r3, [r3, #0]
   b4d6e:	691b      	ldr	r3, [r3, #16]
   b4d70:	9301      	str	r3, [sp, #4]
   b4d72:	bd08      	pop	{r3, pc}
   b4d74:	0003022c 	.word	0x0003022c

000b4d78 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b4d78:	b508      	push	{r3, lr}
   b4d7a:	4b02      	ldr	r3, [pc, #8]	; (b4d84 <HAL_GPIO_Read+0xc>)
   b4d7c:	681b      	ldr	r3, [r3, #0]
   b4d7e:	695b      	ldr	r3, [r3, #20]
   b4d80:	9301      	str	r3, [sp, #4]
   b4d82:	bd08      	pop	{r3, pc}
   b4d84:	0003022c 	.word	0x0003022c

000b4d88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d88:	b508      	push	{r3, lr}
   b4d8a:	4b02      	ldr	r3, [pc, #8]	; (b4d94 <HAL_RNG_GetRandomNumber+0xc>)
   b4d8c:	681b      	ldr	r3, [r3, #0]
   b4d8e:	685b      	ldr	r3, [r3, #4]
   b4d90:	9301      	str	r3, [sp, #4]
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	00030218 	.word	0x00030218

000b4d98 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d98:	b508      	push	{r3, lr}
   b4d9a:	4b02      	ldr	r3, [pc, #8]	; (b4da4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d9c:	681b      	ldr	r3, [r3, #0]
   b4d9e:	695b      	ldr	r3, [r3, #20]
   b4da0:	9301      	str	r3, [sp, #4]
   b4da2:	bd08      	pop	{r3, pc}
   b4da4:	00030218 	.word	0x00030218

000b4da8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4da8:	b508      	push	{r3, lr}
   b4daa:	4b02      	ldr	r3, [pc, #8]	; (b4db4 <os_mutex_recursive_create+0xc>)
   b4dac:	681b      	ldr	r3, [r3, #0]
   b4dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4db0:	9301      	str	r3, [sp, #4]
   b4db2:	bd08      	pop	{r3, pc}
   b4db4:	00030248 	.word	0x00030248

000b4db8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4db8:	b508      	push	{r3, lr}
   b4dba:	4b02      	ldr	r3, [pc, #8]	; (b4dc4 <inet_inet_ntop+0xc>)
   b4dbc:	681b      	ldr	r3, [r3, #0]
   b4dbe:	695b      	ldr	r3, [r3, #20]
   b4dc0:	9301      	str	r3, [sp, #4]
   b4dc2:	bd08      	pop	{r3, pc}
   b4dc4:	00030264 	.word	0x00030264

000b4dc8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4dc8:	b508      	push	{r3, lr}
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <hal_usart_write+0xc>)
   b4dcc:	681b      	ldr	r3, [r3, #0]
   b4dce:	68db      	ldr	r3, [r3, #12]
   b4dd0:	9301      	str	r3, [sp, #4]
   b4dd2:	bd08      	pop	{r3, pc}
   b4dd4:	0003023c 	.word	0x0003023c

000b4dd8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dd8:	b508      	push	{r3, lr}
   b4dda:	4b02      	ldr	r3, [pc, #8]	; (b4de4 <hal_usart_available+0xc>)
   b4ddc:	681b      	ldr	r3, [r3, #0]
   b4dde:	691b      	ldr	r3, [r3, #16]
   b4de0:	9301      	str	r3, [sp, #4]
   b4de2:	bd08      	pop	{r3, pc}
   b4de4:	0003023c 	.word	0x0003023c

000b4de8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4de8:	b508      	push	{r3, lr}
   b4dea:	4b02      	ldr	r3, [pc, #8]	; (b4df4 <hal_usart_read+0xc>)
   b4dec:	681b      	ldr	r3, [r3, #0]
   b4dee:	695b      	ldr	r3, [r3, #20]
   b4df0:	9301      	str	r3, [sp, #4]
   b4df2:	bd08      	pop	{r3, pc}
   b4df4:	0003023c 	.word	0x0003023c

000b4df8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4df8:	b508      	push	{r3, lr}
   b4dfa:	4b02      	ldr	r3, [pc, #8]	; (b4e04 <hal_usart_peek+0xc>)
   b4dfc:	681b      	ldr	r3, [r3, #0]
   b4dfe:	699b      	ldr	r3, [r3, #24]
   b4e00:	9301      	str	r3, [sp, #4]
   b4e02:	bd08      	pop	{r3, pc}
   b4e04:	0003023c 	.word	0x0003023c

000b4e08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e08:	b508      	push	{r3, lr}
   b4e0a:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <hal_usart_flush+0xc>)
   b4e0c:	681b      	ldr	r3, [r3, #0]
   b4e0e:	69db      	ldr	r3, [r3, #28]
   b4e10:	9301      	str	r3, [sp, #4]
   b4e12:	bd08      	pop	{r3, pc}
   b4e14:	0003023c 	.word	0x0003023c

000b4e18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e18:	b508      	push	{r3, lr}
   b4e1a:	4b02      	ldr	r3, [pc, #8]	; (b4e24 <hal_usart_is_enabled+0xc>)
   b4e1c:	681b      	ldr	r3, [r3, #0]
   b4e1e:	6a1b      	ldr	r3, [r3, #32]
   b4e20:	9301      	str	r3, [sp, #4]
   b4e22:	bd08      	pop	{r3, pc}
   b4e24:	0003023c 	.word	0x0003023c

000b4e28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e28:	b508      	push	{r3, lr}
   b4e2a:	4b02      	ldr	r3, [pc, #8]	; (b4e34 <hal_usart_available_data_for_write+0xc>)
   b4e2c:	681b      	ldr	r3, [r3, #0]
   b4e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e30:	9301      	str	r3, [sp, #4]
   b4e32:	bd08      	pop	{r3, pc}
   b4e34:	0003023c 	.word	0x0003023c

000b4e38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e38:	b508      	push	{r3, lr}
   b4e3a:	4b02      	ldr	r3, [pc, #8]	; (b4e44 <hal_usart_init_ex+0xc>)
   b4e3c:	681b      	ldr	r3, [r3, #0]
   b4e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e40:	9301      	str	r3, [sp, #4]
   b4e42:	bd08      	pop	{r3, pc}
   b4e44:	0003023c 	.word	0x0003023c

000b4e48 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4e48:	b508      	push	{r3, lr}
   b4e4a:	4b02      	ldr	r3, [pc, #8]	; (b4e54 <hal_i2c_set_speed+0xc>)
   b4e4c:	681b      	ldr	r3, [r3, #0]
   b4e4e:	681b      	ldr	r3, [r3, #0]
   b4e50:	9301      	str	r3, [sp, #4]
   b4e52:	bd08      	pop	{r3, pc}
   b4e54:	00030228 	.word	0x00030228

000b4e58 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4e58:	b508      	push	{r3, lr}
   b4e5a:	4b02      	ldr	r3, [pc, #8]	; (b4e64 <hal_i2c_begin+0xc>)
   b4e5c:	681b      	ldr	r3, [r3, #0]
   b4e5e:	68db      	ldr	r3, [r3, #12]
   b4e60:	9301      	str	r3, [sp, #4]
   b4e62:	bd08      	pop	{r3, pc}
   b4e64:	00030228 	.word	0x00030228

000b4e68 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4e68:	b508      	push	{r3, lr}
   b4e6a:	4b02      	ldr	r3, [pc, #8]	; (b4e74 <hal_i2c_begin_transmission+0xc>)
   b4e6c:	681b      	ldr	r3, [r3, #0]
   b4e6e:	699b      	ldr	r3, [r3, #24]
   b4e70:	9301      	str	r3, [sp, #4]
   b4e72:	bd08      	pop	{r3, pc}
   b4e74:	00030228 	.word	0x00030228

000b4e78 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e78:	b508      	push	{r3, lr}
   b4e7a:	4b02      	ldr	r3, [pc, #8]	; (b4e84 <hal_i2c_end_transmission+0xc>)
   b4e7c:	681b      	ldr	r3, [r3, #0]
   b4e7e:	69db      	ldr	r3, [r3, #28]
   b4e80:	9301      	str	r3, [sp, #4]
   b4e82:	bd08      	pop	{r3, pc}
   b4e84:	00030228 	.word	0x00030228

000b4e88 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e88:	b508      	push	{r3, lr}
   b4e8a:	4b02      	ldr	r3, [pc, #8]	; (b4e94 <hal_i2c_write+0xc>)
   b4e8c:	681b      	ldr	r3, [r3, #0]
   b4e8e:	6a1b      	ldr	r3, [r3, #32]
   b4e90:	9301      	str	r3, [sp, #4]
   b4e92:	bd08      	pop	{r3, pc}
   b4e94:	00030228 	.word	0x00030228

000b4e98 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e98:	b508      	push	{r3, lr}
   b4e9a:	4b02      	ldr	r3, [pc, #8]	; (b4ea4 <hal_i2c_available+0xc>)
   b4e9c:	681b      	ldr	r3, [r3, #0]
   b4e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ea0:	9301      	str	r3, [sp, #4]
   b4ea2:	bd08      	pop	{r3, pc}
   b4ea4:	00030228 	.word	0x00030228

000b4ea8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4ea8:	b508      	push	{r3, lr}
   b4eaa:	4b02      	ldr	r3, [pc, #8]	; (b4eb4 <hal_i2c_read+0xc>)
   b4eac:	681b      	ldr	r3, [r3, #0]
   b4eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4eb0:	9301      	str	r3, [sp, #4]
   b4eb2:	bd08      	pop	{r3, pc}
   b4eb4:	00030228 	.word	0x00030228

000b4eb8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4eb8:	b508      	push	{r3, lr}
   b4eba:	4b02      	ldr	r3, [pc, #8]	; (b4ec4 <hal_i2c_peek+0xc>)
   b4ebc:	681b      	ldr	r3, [r3, #0]
   b4ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ec0:	9301      	str	r3, [sp, #4]
   b4ec2:	bd08      	pop	{r3, pc}
   b4ec4:	00030228 	.word	0x00030228

000b4ec8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ec8:	b508      	push	{r3, lr}
   b4eca:	4b02      	ldr	r3, [pc, #8]	; (b4ed4 <hal_i2c_flush+0xc>)
   b4ecc:	681b      	ldr	r3, [r3, #0]
   b4ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ed0:	9301      	str	r3, [sp, #4]
   b4ed2:	bd08      	pop	{r3, pc}
   b4ed4:	00030228 	.word	0x00030228

000b4ed8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <hal_i2c_is_enabled+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030228 	.word	0x00030228

000b4ee8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <hal_i2c_init+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030228 	.word	0x00030228

000b4ef8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <hal_i2c_request_ex+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	00030228 	.word	0x00030228

000b4f08 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <hal_spi_init+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	69db      	ldr	r3, [r3, #28]
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	00030230 	.word	0x00030230

000b4f18 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <hal_spi_is_enabled+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	6a1b      	ldr	r3, [r3, #32]
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	00030230 	.word	0x00030230

000b4f28 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <HAL_USB_USART_Init+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	681b      	ldr	r3, [r3, #0]
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	0003024c 	.word	0x0003024c

000b4f38 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <HAL_USB_USART_Begin+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	685b      	ldr	r3, [r3, #4]
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	0003024c 	.word	0x0003024c

000b4f48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <HAL_USB_USART_Available_Data+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	691b      	ldr	r3, [r3, #16]
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	0003024c 	.word	0x0003024c

000b4f58 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	695b      	ldr	r3, [r3, #20]
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	0003024c 	.word	0x0003024c

000b4f68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <HAL_USB_USART_Receive_Data+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	699b      	ldr	r3, [r3, #24]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	0003024c 	.word	0x0003024c

000b4f78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <HAL_USB_USART_Send_Data+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	69db      	ldr	r3, [r3, #28]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	0003024c 	.word	0x0003024c

000b4f88 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <HAL_USB_USART_Flush_Data+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	6a1b      	ldr	r3, [r3, #32]
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	0003024c 	.word	0x0003024c

000b4f98 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <set_system_mode+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	685b      	ldr	r3, [r3, #4]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030220 	.word	0x00030220

000b4fa8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <system_delay_ms+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	695b      	ldr	r3, [r3, #20]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030220 	.word	0x00030220

000b4fb8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <application_thread_current+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030220 	.word	0x00030220

000b4fc8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <application_thread_invoke+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030220 	.word	0x00030220

000b4fd8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b03      	ldr	r3, [pc, #12]	; (b4fe8 <system_ctrl_set_app_request_handler+0x10>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4fe2:	9301      	str	r3, [sp, #4]
   b4fe4:	bd08      	pop	{r3, pc}
   b4fe6:	0000      	.short	0x0000
   b4fe8:	00030220 	.word	0x00030220

000b4fec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b03      	ldr	r3, [pc, #12]	; (b4ffc <system_ctrl_set_result+0x10>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4ff6:	9301      	str	r3, [sp, #4]
   b4ff8:	bd08      	pop	{r3, pc}
   b4ffa:	0000      	.short	0x0000
   b4ffc:	00030220 	.word	0x00030220

000b5000 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <network_connect+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	685b      	ldr	r3, [r3, #4]
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	00030240 	.word	0x00030240

000b5010 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <network_connecting+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	00030240 	.word	0x00030240

000b5020 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <network_disconnect+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	68db      	ldr	r3, [r3, #12]
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030240 	.word	0x00030240

000b5030 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <network_ready+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	691b      	ldr	r3, [r3, #16]
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030240 	.word	0x00030240

000b5040 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <network_on+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	695b      	ldr	r3, [r3, #20]
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	00030240 	.word	0x00030240

000b5050 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <network_off+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	699b      	ldr	r3, [r3, #24]
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	00030240 	.word	0x00030240

000b5060 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <network_listen+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	69db      	ldr	r3, [r3, #28]
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	00030240 	.word	0x00030240

000b5070 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <network_listening+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	6a1b      	ldr	r3, [r3, #32]
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	00030240 	.word	0x00030240

000b5080 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <network_set_listen_timeout+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	00030240 	.word	0x00030240

000b5090 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <network_get_listen_timeout+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	00030240 	.word	0x00030240

000b50a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <network_is_on+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	00030240 	.word	0x00030240

000b50b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <network_is_off+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	00030240 	.word	0x00030240

000b50c0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <spark_cloud_flag_connected+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	695b      	ldr	r3, [r3, #20]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	00030244 	.word	0x00030244

000b50d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <spark_send_event+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	6a1b      	ldr	r3, [r3, #32]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	00030244 	.word	0x00030244

000b50e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <spark_set_random_seed_from_cloud_handler+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	00030244 	.word	0x00030244

000b50f0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <malloc+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	681b      	ldr	r3, [r3, #0]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003021c 	.word	0x0003021c

000b5100 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <free+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	685b      	ldr	r3, [r3, #4]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003021c 	.word	0x0003021c

000b5110 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <realloc+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	689b      	ldr	r3, [r3, #8]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003021c 	.word	0x0003021c

000b5120 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <abort+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003021c 	.word	0x0003021c

000b5130 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <_malloc_r+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	0003021c 	.word	0x0003021c

000b5140 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <__assert_func+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	0003021c 	.word	0x0003021c

000b5150 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b02      	ldr	r3, [pc, #8]	; (b515c <newlib_impure_ptr_callback+0xc>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5158:	9301      	str	r3, [sp, #4]
   b515a:	bd08      	pop	{r3, pc}
   b515c:	0003021c 	.word	0x0003021c

000b5160 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5160:	2200      	movs	r2, #0
   b5162:	6840      	ldr	r0, [r0, #4]
   b5164:	4611      	mov	r1, r2
   b5166:	f7ff bf83 	b.w	b5070 <network_listening>

000b516a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b516a:	2200      	movs	r2, #0
   b516c:	6840      	ldr	r0, [r0, #4]
   b516e:	4611      	mov	r1, r2
   b5170:	f7ff bf8e 	b.w	b5090 <network_get_listen_timeout>

000b5174 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5174:	6840      	ldr	r0, [r0, #4]
   b5176:	2200      	movs	r2, #0
   b5178:	f7ff bf82 	b.w	b5080 <network_set_listen_timeout>

000b517c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b517c:	6840      	ldr	r0, [r0, #4]
   b517e:	2200      	movs	r2, #0
   b5180:	f081 0101 	eor.w	r1, r1, #1
   b5184:	f7ff bf6c 	b.w	b5060 <network_listen>

000b5188 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5188:	2300      	movs	r3, #0
   b518a:	6840      	ldr	r0, [r0, #4]
   b518c:	461a      	mov	r2, r3
   b518e:	4619      	mov	r1, r3
   b5190:	f7ff bf5e 	b.w	b5050 <network_off>

000b5194 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5194:	2300      	movs	r3, #0
   b5196:	6840      	ldr	r0, [r0, #4]
   b5198:	461a      	mov	r2, r3
   b519a:	4619      	mov	r1, r3
   b519c:	f7ff bf50 	b.w	b5040 <network_on>

000b51a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b51a0:	2200      	movs	r2, #0
   b51a2:	6840      	ldr	r0, [r0, #4]
   b51a4:	4611      	mov	r1, r2
   b51a6:	f7ff bf43 	b.w	b5030 <network_ready>

000b51aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b51aa:	2200      	movs	r2, #0
   b51ac:	6840      	ldr	r0, [r0, #4]
   b51ae:	4611      	mov	r1, r2
   b51b0:	f7ff bf2e 	b.w	b5010 <network_connecting>

000b51b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51b4:	6840      	ldr	r0, [r0, #4]
   b51b6:	2200      	movs	r2, #0
   b51b8:	2102      	movs	r1, #2
   b51ba:	f7ff bf31 	b.w	b5020 <network_disconnect>

000b51be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51be:	2300      	movs	r3, #0
   b51c0:	6840      	ldr	r0, [r0, #4]
   b51c2:	461a      	mov	r2, r3
   b51c4:	f7ff bf1c 	b.w	b5000 <network_connect>

000b51c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b51c8:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b51ca:	2203      	movs	r2, #3
   b51cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b51ce:	4a02      	ldr	r2, [pc, #8]	; (b51d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b51d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b51d2:	4770      	bx	lr
   b51d4:	2003e6b8 	.word	0x2003e6b8
   b51d8:	000b668c 	.word	0x000b668c

000b51dc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b51dc:	b510      	push	{r4, lr}
   b51de:	4604      	mov	r4, r0
   b51e0:	4608      	mov	r0, r1
{
    _spi = spi;
   b51e2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b51e4:	f7ff fe90 	bl	b4f08 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b51e8:	2300      	movs	r3, #0
   b51ea:	6063      	str	r3, [r4, #4]
}
   b51ec:	4620      	mov	r0, r4
   b51ee:	bd10      	pop	{r4, pc}

000b51f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b51f0:	4b05      	ldr	r3, [pc, #20]	; (b5208 <_GLOBAL__sub_I_System+0x18>)
   b51f2:	2202      	movs	r2, #2
   b51f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51f6:	4b05      	ldr	r3, [pc, #20]	; (b520c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b51f8:	4a05      	ldr	r2, [pc, #20]	; (b5210 <_GLOBAL__sub_I_System+0x20>)
   b51fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b51fc:	2000      	movs	r0, #0
   b51fe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5202:	f7ff bec9 	b.w	b4f98 <set_system_mode>
   b5206:	bf00      	nop
   b5208:	2003e6cc 	.word	0x2003e6cc
   b520c:	2003e6c0 	.word	0x2003e6c0
   b5210:	ffff0000 	.word	0xffff0000

000b5214 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   b5214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   b5218:	1e93      	subs	r3, r2, #2
{
   b521a:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   b521c:	2b22      	cmp	r3, #34	; 0x22
   b521e:	f04f 0300 	mov.w	r3, #0
{
   b5222:	460d      	mov	r5, r1
   b5224:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   b5226:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   b522a:	d927      	bls.n	b527c <ltoa+0x68>

      if (10 == base && N < 0L)
   b522c:	2800      	cmp	r0, #0
   b522e:	da2a      	bge.n	b5286 <ltoa+0x72>
      {
            *head++ = '-';
   b5230:	462e      	mov	r6, r5
   b5232:	232d      	movs	r3, #45	; 0x2d
   b5234:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   b5238:	4240      	negs	r0, r0
   b523a:	240a      	movs	r4, #10
      *tail-- = '\0';
   b523c:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   b5240:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   b5244:	4622      	mov	r2, r4
   b5246:	4601      	mov	r1, r0
   b5248:	a801      	add	r0, sp, #4
   b524a:	f001 f856 	bl	b62fa <ldiv>
   b524e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   b5250:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   b5252:	2b09      	cmp	r3, #9
   b5254:	bfcc      	ite	gt
   b5256:	2237      	movgt	r2, #55	; 0x37
   b5258:	2230      	movle	r2, #48	; 0x30
   b525a:	fa52 f383 	uxtab	r3, r2, r3
   b525e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   b5262:	f108 0801 	add.w	r8, r8, #1
   b5266:	2800      	cmp	r0, #0
   b5268:	d1ec      	bne.n	b5244 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   b526a:	4642      	mov	r2, r8
   b526c:	1c79      	adds	r1, r7, #1
   b526e:	4630      	mov	r0, r6
   b5270:	f001 f857 	bl	b6322 <memcpy>
      return str;
}
   b5274:	4628      	mov	r0, r5
   b5276:	b00c      	add	sp, #48	; 0x30
   b5278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   b527c:	2a0a      	cmp	r2, #10
   b527e:	d0d5      	beq.n	b522c <ltoa+0x18>
      if (uarg)
   b5280:	b118      	cbz	r0, b528a <ltoa+0x76>
   b5282:	462e      	mov	r6, r5
   b5284:	e7da      	b.n	b523c <ltoa+0x28>
   b5286:	240a      	movs	r4, #10
   b5288:	e7fa      	b.n	b5280 <ltoa+0x6c>
      else  *tail-- = '0';
   b528a:	2330      	movs	r3, #48	; 0x30
   b528c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   b5290:	462e      	mov	r6, r5
   b5292:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   b5296:	f04f 0802 	mov.w	r8, #2
   b529a:	e7e6      	b.n	b526a <ltoa+0x56>

000b529c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b529c:	b510      	push	{r4, lr}
   b529e:	4604      	mov	r4, r0
{
	free(buffer);
   b52a0:	6800      	ldr	r0, [r0, #0]
   b52a2:	f7ff ff2d 	bl	b5100 <free>
}
   b52a6:	4620      	mov	r0, r4
   b52a8:	bd10      	pop	{r4, pc}

000b52aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b52aa:	b510      	push	{r4, lr}
   b52ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b52ae:	6800      	ldr	r0, [r0, #0]
   b52b0:	b108      	cbz	r0, b52b6 <_ZN6String10invalidateEv+0xc>
   b52b2:	f7ff ff25 	bl	b5100 <free>
	buffer = NULL;
   b52b6:	2300      	movs	r3, #0
	capacity = len = 0;
   b52b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52bc:	6023      	str	r3, [r4, #0]
}
   b52be:	bd10      	pop	{r4, pc}

000b52c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52c0:	b538      	push	{r3, r4, r5, lr}
   b52c2:	4604      	mov	r4, r0
   b52c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52c6:	6800      	ldr	r0, [r0, #0]
   b52c8:	3101      	adds	r1, #1
   b52ca:	f7ff ff21 	bl	b5110 <realloc>
	if (newbuffer) {
   b52ce:	b110      	cbz	r0, b52d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52d4:	2001      	movs	r0, #1
	}
	return 0;
}
   b52d6:	bd38      	pop	{r3, r4, r5, pc}

000b52d8 <_ZN6String7reserveEj>:
{
   b52d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52da:	6803      	ldr	r3, [r0, #0]
{
   b52dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52de:	b123      	cbz	r3, b52ea <_ZN6String7reserveEj+0x12>
   b52e0:	6843      	ldr	r3, [r0, #4]
   b52e2:	428b      	cmp	r3, r1
   b52e4:	d301      	bcc.n	b52ea <_ZN6String7reserveEj+0x12>
   b52e6:	2001      	movs	r0, #1
}
   b52e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b52ea:	4620      	mov	r0, r4
   b52ec:	f7ff ffe8 	bl	b52c0 <_ZN6String12changeBufferEj>
   b52f0:	2800      	cmp	r0, #0
   b52f2:	d0f9      	beq.n	b52e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b52f4:	68a3      	ldr	r3, [r4, #8]
   b52f6:	2b00      	cmp	r3, #0
   b52f8:	d1f5      	bne.n	b52e6 <_ZN6String7reserveEj+0xe>
   b52fa:	6822      	ldr	r2, [r4, #0]
   b52fc:	7013      	strb	r3, [r2, #0]
   b52fe:	e7f2      	b.n	b52e6 <_ZN6String7reserveEj+0xe>

000b5300 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5300:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5302:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5304:	4611      	mov	r1, r2
   b5306:	9201      	str	r2, [sp, #4]
{
   b5308:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b530a:	f7ff ffe5 	bl	b52d8 <_ZN6String7reserveEj>
   b530e:	9a01      	ldr	r2, [sp, #4]
   b5310:	b928      	cbnz	r0, b531e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5312:	4620      	mov	r0, r4
   b5314:	f7ff ffc9 	bl	b52aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5318:	4620      	mov	r0, r4
   b531a:	b003      	add	sp, #12
   b531c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b531e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5320:	4629      	mov	r1, r5
   b5322:	6820      	ldr	r0, [r4, #0]
   b5324:	f000 fffd 	bl	b6322 <memcpy>
	buffer[len] = 0;
   b5328:	6822      	ldr	r2, [r4, #0]
   b532a:	68a3      	ldr	r3, [r4, #8]
   b532c:	2100      	movs	r1, #0
   b532e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5330:	e7f2      	b.n	b5318 <_ZN6String4copyEPKcj+0x18>

000b5332 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5332:	b513      	push	{r0, r1, r4, lr}
   b5334:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5336:	b159      	cbz	r1, b5350 <_ZN6StringaSEPKc+0x1e>
   b5338:	4608      	mov	r0, r1
   b533a:	9101      	str	r1, [sp, #4]
   b533c:	f001 f86d 	bl	b641a <strlen>
   b5340:	9901      	ldr	r1, [sp, #4]
   b5342:	4602      	mov	r2, r0
   b5344:	4620      	mov	r0, r4
   b5346:	f7ff ffdb 	bl	b5300 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b534a:	4620      	mov	r0, r4
   b534c:	b002      	add	sp, #8
   b534e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5350:	f7ff ffab 	bl	b52aa <_ZN6String10invalidateEv>
   b5354:	e7f9      	b.n	b534a <_ZN6StringaSEPKc+0x18>

000b5356 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   b5356:	b510      	push	{r4, lr}
   b5358:	4604      	mov	r4, r0
   b535a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b535c:	2300      	movs	r3, #0
	capacity = 0;
   b535e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5362:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5364:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   b5366:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   b5368:	a901      	add	r1, sp, #4
   b536a:	f7ff ff53 	bl	b5214 <ltoa>
	*this = buf;
   b536e:	a901      	add	r1, sp, #4
   b5370:	4620      	mov	r0, r4
   b5372:	f7ff ffde 	bl	b5332 <_ZN6StringaSEPKc>
}
   b5376:	4620      	mov	r0, r4
   b5378:	b00a      	add	sp, #40	; 0x28
   b537a:	bd10      	pop	{r4, pc}

000b537c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b537c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b537e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5380:	4604      	mov	r4, r0
      if (_M_manager)
   b5382:	b113      	cbz	r3, b538a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5384:	2203      	movs	r2, #3
   b5386:	4601      	mov	r1, r0
   b5388:	4798      	blx	r3
    }
   b538a:	4620      	mov	r0, r4
   b538c:	bd10      	pop	{r4, pc}

000b538e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b538e:	b513      	push	{r0, r1, r4, lr}
   b5390:	460b      	mov	r3, r1
   b5392:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5394:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5398:	466c      	mov	r4, sp
   b539a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b539e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b53a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b53a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b53aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b53ae:	b002      	add	sp, #8
   b53b0:	bd10      	pop	{r4, pc}
	...

000b53b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b53b4:	4802      	ldr	r0, [pc, #8]	; (b53c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b53b6:	2300      	movs	r3, #0
   b53b8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b53ba:	f7ff bcf5 	b.w	b4da8 <os_mutex_recursive_create>
   b53be:	bf00      	nop
   b53c0:	2003e6d0 	.word	0x2003e6d0

000b53c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b53c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53c6:	4606      	mov	r6, r0
   b53c8:	460d      	mov	r5, r1
  size_t n = 0;
   b53ca:	188f      	adds	r7, r1, r2
   b53cc:	2400      	movs	r4, #0
  while (size--) {
   b53ce:	42bd      	cmp	r5, r7
   b53d0:	d00c      	beq.n	b53ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b53d2:	6833      	ldr	r3, [r6, #0]
   b53d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b53d8:	689b      	ldr	r3, [r3, #8]
   b53da:	4630      	mov	r0, r6
   b53dc:	4798      	blx	r3
     if (chunk>=0)
   b53de:	1e03      	subs	r3, r0, #0
   b53e0:	db01      	blt.n	b53e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b53e2:	441c      	add	r4, r3
  while (size--) {
   b53e4:	e7f3      	b.n	b53ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b53e6:	2c00      	cmp	r4, #0
   b53e8:	bf08      	it	eq
   b53ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b53ec:	4620      	mov	r0, r4
   b53ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53f0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b53f0:	b513      	push	{r0, r1, r4, lr}
   b53f2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b53f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b53f6:	b159      	cbz	r1, b5410 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b53f8:	9101      	str	r1, [sp, #4]
   b53fa:	f001 f80e 	bl	b641a <strlen>
   b53fe:	6823      	ldr	r3, [r4, #0]
   b5400:	9901      	ldr	r1, [sp, #4]
   b5402:	68db      	ldr	r3, [r3, #12]
   b5404:	4602      	mov	r2, r0
   b5406:	4620      	mov	r0, r4
    }
   b5408:	b002      	add	sp, #8
   b540a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b540e:	4718      	bx	r3
    }
   b5410:	b002      	add	sp, #8
   b5412:	bd10      	pop	{r4, pc}

000b5414 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5414:	6803      	ldr	r3, [r0, #0]
   b5416:	689b      	ldr	r3, [r3, #8]
   b5418:	4718      	bx	r3

000b541a <_ZN5Print5printEPK19__FlashStringHelper>:
   b541a:	b508      	push	{r3, lr}
   b541c:	f7ff ffe8 	bl	b53f0 <_ZN5Print5writeEPKc>
   b5420:	bd08      	pop	{r3, pc}

000b5422 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5422:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5424:	210d      	movs	r1, #13
{
   b5426:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5428:	f7ff fff4 	bl	b5414 <_ZN5Print5printEc>
  n += print('\n');
   b542c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b542e:	4604      	mov	r4, r0
  n += print('\n');
   b5430:	4628      	mov	r0, r5
   b5432:	f7ff ffef 	bl	b5414 <_ZN5Print5printEc>
  return n;
}
   b5436:	4420      	add	r0, r4
   b5438:	bd38      	pop	{r3, r4, r5, pc}

000b543a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b543a:	b538      	push	{r3, r4, r5, lr}
   b543c:	4605      	mov	r5, r0
  return write(str);
   b543e:	f7ff ffd7 	bl	b53f0 <_ZN5Print5writeEPKc>
   b5442:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5444:	4628      	mov	r0, r5
   b5446:	f7ff ffec 	bl	b5422 <_ZN5Print7printlnEv>
  return n;
}
   b544a:	4420      	add	r0, r4
   b544c:	bd38      	pop	{r3, r4, r5, pc}

000b544e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b544e:	f7ff bff4 	b.w	b543a <_ZN5Print7printlnEPKc>

000b5452 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5452:	b530      	push	{r4, r5, lr}
   b5454:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5456:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5458:	2a01      	cmp	r2, #1
  *str = '\0';
   b545a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b545e:	bf98      	it	ls
   b5460:	220a      	movls	r2, #10
   b5462:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5464:	460d      	mov	r5, r1
   b5466:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b546a:	fb01 5312 	mls	r3, r1, r2, r5
   b546e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5472:	2b09      	cmp	r3, #9
   b5474:	bf94      	ite	ls
   b5476:	3330      	addls	r3, #48	; 0x30
   b5478:	3337      	addhi	r3, #55	; 0x37
   b547a:	b2db      	uxtb	r3, r3
  } while(n);
   b547c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b547e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5482:	d9ef      	bls.n	b5464 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5484:	4621      	mov	r1, r4
   b5486:	f7ff ffb3 	bl	b53f0 <_ZN5Print5writeEPKc>
}
   b548a:	b00b      	add	sp, #44	; 0x2c
   b548c:	bd30      	pop	{r4, r5, pc}
	...

000b5490 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5490:	4b01      	ldr	r3, [pc, #4]	; (b5498 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5492:	4a02      	ldr	r2, [pc, #8]	; (b549c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5494:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5496:	4770      	bx	lr
   b5498:	2003e6d4 	.word	0x2003e6d4
   b549c:	000b66c0 	.word	0x000b66c0

000b54a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b54a0:	4b02      	ldr	r3, [pc, #8]	; (b54ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b54a2:	681a      	ldr	r2, [r3, #0]
   b54a4:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b54a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b54a8:	4770      	bx	lr
   b54aa:	bf00      	nop
   b54ac:	2003dfbc 	.word	0x2003dfbc
   b54b0:	2003e6d8 	.word	0x2003e6d8

000b54b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b54b4:	2100      	movs	r1, #0
   b54b6:	f7ff bd77 	b.w	b4fa8 <system_delay_ms>
	...

000b54bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b54bc:	4b01      	ldr	r3, [pc, #4]	; (b54c4 <_GLOBAL__sub_I_RGB+0x8>)
   b54be:	2200      	movs	r2, #0
   b54c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b54c2:	4770      	bx	lr
   b54c4:	2003e6dc 	.word	0x2003e6dc

000b54c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b54c8:	4b01      	ldr	r3, [pc, #4]	; (b54d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b54ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b54cc:	4770      	bx	lr
   b54ce:	bf00      	nop
   b54d0:	2003dfc0 	.word	0x2003dfc0

000b54d4 <serialEventRun>:
{
   b54d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b54d6:	4b0b      	ldr	r3, [pc, #44]	; (b5504 <serialEventRun+0x30>)
   b54d8:	b143      	cbz	r3, b54ec <serialEventRun+0x18>
   b54da:	f000 fbff 	bl	b5cdc <_Z16_fetch_usbserialv>
   b54de:	6803      	ldr	r3, [r0, #0]
   b54e0:	691b      	ldr	r3, [r3, #16]
   b54e2:	4798      	blx	r3
   b54e4:	2800      	cmp	r0, #0
   b54e6:	dd01      	ble.n	b54ec <serialEventRun+0x18>
        serialEvent();
   b54e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b54ec:	4b06      	ldr	r3, [pc, #24]	; (b5508 <serialEventRun+0x34>)
   b54ee:	b143      	cbz	r3, b5502 <serialEventRun+0x2e>
   b54f0:	f000 fe94 	bl	b621c <_Z22__fetch_global_Serial1v>
   b54f4:	6803      	ldr	r3, [r0, #0]
   b54f6:	691b      	ldr	r3, [r3, #16]
   b54f8:	4798      	blx	r3
   b54fa:	2800      	cmp	r0, #0
   b54fc:	dd01      	ble.n	b5502 <serialEventRun+0x2e>
        serialEvent1();
   b54fe:	f3af 8000 	nop.w
}
   b5502:	bd08      	pop	{r3, pc}
	...

000b550c <_post_loop>:
{
   b550c:	b508      	push	{r3, lr}
	serialEventRun();
   b550e:	f7ff ffe1 	bl	b54d4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5512:	f7ff fc41 	bl	b4d98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5516:	4b01      	ldr	r3, [pc, #4]	; (b551c <_post_loop+0x10>)
   b5518:	6018      	str	r0, [r3, #0]
}
   b551a:	bd08      	pop	{r3, pc}
   b551c:	2003e740 	.word	0x2003e740

000b5520 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5520:	4805      	ldr	r0, [pc, #20]	; (b5538 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5522:	4a06      	ldr	r2, [pc, #24]	; (b553c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5524:	4906      	ldr	r1, [pc, #24]	; (b5540 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5526:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5528:	1a12      	subs	r2, r2, r0
   b552a:	f000 fefa 	bl	b6322 <memcpy>
    __backup_sram_signature = signature;
   b552e:	4b05      	ldr	r3, [pc, #20]	; (b5544 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5530:	4a05      	ldr	r2, [pc, #20]	; (b5548 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5532:	601a      	str	r2, [r3, #0]
}
   b5534:	bd08      	pop	{r3, pc}
   b5536:	bf00      	nop
   b5538:	2003f400 	.word	0x2003f400
   b553c:	2003f404 	.word	0x2003f404
   b5540:	000b68f4 	.word	0x000b68f4
   b5544:	2003f400 	.word	0x2003f400
   b5548:	9a271c1e 	.word	0x9a271c1e

000b554c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b554c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b554e:	2300      	movs	r3, #0
   b5550:	9300      	str	r3, [sp, #0]
   b5552:	461a      	mov	r2, r3
   b5554:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5558:	f7ff fd48 	bl	b4fec <system_ctrl_set_result>
}
   b555c:	b003      	add	sp, #12
   b555e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5564 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5564:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5566:	8843      	ldrh	r3, [r0, #2]
   b5568:	2b0a      	cmp	r3, #10
   b556a:	d008      	beq.n	b557e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b556c:	2b50      	cmp	r3, #80	; 0x50
   b556e:	d10b      	bne.n	b5588 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5570:	4b09      	ldr	r3, [pc, #36]	; (b5598 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5572:	681b      	ldr	r3, [r3, #0]
   b5574:	b14b      	cbz	r3, b558a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5576:	b003      	add	sp, #12
   b5578:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b557c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b557e:	f7ff ffe5 	bl	b554c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5582:	b003      	add	sp, #12
   b5584:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5588:	2300      	movs	r3, #0
   b558a:	9300      	str	r3, [sp, #0]
   b558c:	461a      	mov	r2, r3
   b558e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5592:	f7ff fd2b 	bl	b4fec <system_ctrl_set_result>
}
   b5596:	e7f4      	b.n	b5582 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5598:	2003e6f0 	.word	0x2003e6f0

000b559c <module_user_init_hook>:
{
   b559c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b559e:	4812      	ldr	r0, [pc, #72]	; (b55e8 <module_user_init_hook+0x4c>)
   b55a0:	2100      	movs	r1, #0
   b55a2:	f7ff fdd5 	bl	b5150 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b55a6:	4b11      	ldr	r3, [pc, #68]	; (b55ec <module_user_init_hook+0x50>)
   b55a8:	681a      	ldr	r2, [r3, #0]
   b55aa:	4b11      	ldr	r3, [pc, #68]	; (b55f0 <module_user_init_hook+0x54>)
   b55ac:	429a      	cmp	r2, r3
   b55ae:	4b11      	ldr	r3, [pc, #68]	; (b55f4 <module_user_init_hook+0x58>)
   b55b0:	bf0c      	ite	eq
   b55b2:	2201      	moveq	r2, #1
   b55b4:	2200      	movne	r2, #0
   b55b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b55b8:	d001      	beq.n	b55be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b55ba:	f7ff ffb1 	bl	b5520 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b55be:	f7ff fbe3 	bl	b4d88 <HAL_RNG_GetRandomNumber>
   b55c2:	4604      	mov	r4, r0
    srand(seed);
   b55c4:	f000 fede 	bl	b6384 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b55c8:	4b0b      	ldr	r3, [pc, #44]	; (b55f8 <module_user_init_hook+0x5c>)
   b55ca:	b113      	cbz	r3, b55d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b55cc:	4620      	mov	r0, r4
   b55ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b55d2:	2100      	movs	r1, #0
   b55d4:	4808      	ldr	r0, [pc, #32]	; (b55f8 <module_user_init_hook+0x5c>)
   b55d6:	f7ff fd83 	bl	b50e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b55da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b55de:	4807      	ldr	r0, [pc, #28]	; (b55fc <module_user_init_hook+0x60>)
   b55e0:	2100      	movs	r1, #0
   b55e2:	f7ff bcf9 	b.w	b4fd8 <system_ctrl_set_app_request_handler>
   b55e6:	bf00      	nop
   b55e8:	000b54c9 	.word	0x000b54c9
   b55ec:	2003f400 	.word	0x2003f400
   b55f0:	9a271c1e 	.word	0x9a271c1e
   b55f4:	2003e6ec 	.word	0x2003e6ec
   b55f8:	00000000 	.word	0x00000000
   b55fc:	000b5565 	.word	0x000b5565

000b5600 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5600:	4770      	bx	lr

000b5602 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5602:	2000      	movs	r0, #0
   b5604:	4770      	bx	lr

000b5606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5606:	b510      	push	{r4, lr}
   b5608:	2110      	movs	r1, #16
   b560a:	4604      	mov	r4, r0
   b560c:	f7fe fd45 	bl	b409a <_ZdlPvj>
   b5610:	4620      	mov	r0, r4
   b5612:	bd10      	pop	{r4, pc}

000b5614 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5614:	b508      	push	{r3, lr}
      { delete this; }
   b5616:	f7ff fff6 	bl	b5606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b561a:	bd08      	pop	{r3, pc}

000b561c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b561c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b561e:	2200      	movs	r2, #0
   b5620:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5624:	6002      	str	r2, [r0, #0]
   b5626:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5628:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b562a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b562c:	680c      	ldr	r4, [r1, #0]
   b562e:	8085      	strh	r5, [r0, #4]
   b5630:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5632:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5634:	bd30      	pop	{r4, r5, pc}

000b5636 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5636:	b510      	push	{r4, lr}
   b5638:	4604      	mov	r4, r0
    free((void*)msg_);
   b563a:	6800      	ldr	r0, [r0, #0]
   b563c:	f7ff fd60 	bl	b5100 <free>
}
   b5640:	4620      	mov	r0, r4
   b5642:	bd10      	pop	{r4, pc}

000b5644 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5644:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5646:	68c4      	ldr	r4, [r0, #12]
   b5648:	b1f4      	cbz	r4, b5688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b564a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b564c:	2b02      	cmp	r3, #2
   b564e:	d103      	bne.n	b5658 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5650:	f104 000c 	add.w	r0, r4, #12
   b5654:	f7ff ffef 	bl	b5636 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5658:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b565a:	b135      	cbz	r5, b566a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b565c:	4628      	mov	r0, r5
   b565e:	f7ff fe8d 	bl	b537c <_ZNSt14_Function_baseD1Ev>
   b5662:	2110      	movs	r1, #16
   b5664:	4628      	mov	r0, r5
   b5666:	f7fe fd18 	bl	b409a <_ZdlPvj>
   b566a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b566c:	b135      	cbz	r5, b567c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b566e:	4628      	mov	r0, r5
   b5670:	f7ff fe84 	bl	b537c <_ZNSt14_Function_baseD1Ev>
   b5674:	2110      	movs	r1, #16
   b5676:	4628      	mov	r0, r5
   b5678:	f7fe fd0f 	bl	b409a <_ZdlPvj>
   b567c:	4620      	mov	r0, r4
   b567e:	2114      	movs	r1, #20
   b5680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5684:	f7fe bd09 	b.w	b409a <_ZdlPvj>
   b5688:	bd38      	pop	{r3, r4, r5, pc}

000b568a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b568a:	680b      	ldr	r3, [r1, #0]
   b568c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b568e:	684b      	ldr	r3, [r1, #4]
   b5690:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5692:	b113      	cbz	r3, b569a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5694:	685a      	ldr	r2, [r3, #4]
   b5696:	3201      	adds	r2, #1
   b5698:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b569a:	4770      	bx	lr

000b569c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b569c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b569e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b56a0:	4668      	mov	r0, sp
   b56a2:	460d      	mov	r5, r1
   b56a4:	f7ff fff1 	bl	b568a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b56a8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b56aa:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b56ac:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b56ae:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b56b0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b56b2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b56b4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b56b6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b56b8:	f7fe fd3c 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b56bc:	b135      	cbz	r5, b56cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b56be:	1d28      	adds	r0, r5, #4
   b56c0:	f7fe fd38 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b56c4:	2108      	movs	r1, #8
   b56c6:	4628      	mov	r0, r5
   b56c8:	f7fe fce7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b56cc:	4620      	mov	r0, r4
   b56ce:	b003      	add	sp, #12
   b56d0:	bd30      	pop	{r4, r5, pc}

000b56d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b56d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b56d4:	b510      	push	{r4, lr}
      if (_M_empty())
   b56d6:	b90a      	cbnz	r2, b56dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b56d8:	f000 fe06 	bl	b62e8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b56dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b56e0:	68c3      	ldr	r3, [r0, #12]
   b56e2:	4718      	bx	r3

000b56e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b56e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b56e6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b56e8:	f100 0110 	add.w	r1, r0, #16
   b56ec:	f7ff fff1 	bl	b56d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b56f0:	bd08      	pop	{r3, pc}

000b56f2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b56f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b56f4:	b510      	push	{r4, lr}
      if (_M_empty())
   b56f6:	b90a      	cbnz	r2, b56fc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b56f8:	f000 fdf6 	bl	b62e8 <_ZSt25__throw_bad_function_callv>
    }
   b56fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5700:	68c3      	ldr	r3, [r0, #12]
   b5702:	4718      	bx	r3

000b5704 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5704:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5706:	6800      	ldr	r0, [r0, #0]
   b5708:	f100 0110 	add.w	r1, r0, #16
   b570c:	f7ff fff1 	bl	b56f2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5710:	bd08      	pop	{r3, pc}
	...

000b5714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5714:	b538      	push	{r3, r4, r5, lr}
   b5716:	2300      	movs	r3, #0
   b5718:	4604      	mov	r4, r0
   b571a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b571c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b571e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5720:	f7fe fcb7 	bl	b4092 <_Znwj>
   b5724:	b128      	cbz	r0, b5732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5726:	2301      	movs	r3, #1
   b5728:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b572c:	4b02      	ldr	r3, [pc, #8]	; (b5738 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b572e:	6003      	str	r3, [r0, #0]
   b5730:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5732:	6020      	str	r0, [r4, #0]
	}
   b5734:	4620      	mov	r0, r4
   b5736:	bd38      	pop	{r3, r4, r5, pc}
   b5738:	000b66e8 	.word	0x000b66e8

000b573c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b573c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b573e:	2300      	movs	r3, #0
   b5740:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5742:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5744:	4604      	mov	r4, r0
   b5746:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5748:	b12b      	cbz	r3, b5756 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b574a:	2202      	movs	r2, #2
   b574c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b574e:	68eb      	ldr	r3, [r5, #12]
   b5750:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5752:	68ab      	ldr	r3, [r5, #8]
   b5754:	60a3      	str	r3, [r4, #8]
    }
   b5756:	4620      	mov	r0, r4
   b5758:	bd38      	pop	{r3, r4, r5, pc}
	...

000b575c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b575c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b575e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5760:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5762:	4668      	mov	r0, sp
   b5764:	f7ff ff5a 	bl	b561c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5768:	f04f 0302 	mov.w	r3, #2
   b576c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5770:	2a00      	cmp	r2, #0
   b5772:	d103      	bne.n	b577c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5774:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5778:	2900      	cmp	r1, #0
   b577a:	d1f7      	bne.n	b576c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b577c:	d125      	bne.n	b57ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b577e:	f104 050c 	add.w	r5, r4, #12
   b5782:	4669      	mov	r1, sp
   b5784:	4628      	mov	r0, r5
   b5786:	f7ff ff49 	bl	b561c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b578a:	f3bf 8f5b 	dmb	ish
   b578e:	2301      	movs	r3, #1
   b5790:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5792:	2000      	movs	r0, #0
   b5794:	f104 0308 	add.w	r3, r4, #8
   b5798:	f3bf 8f5b 	dmb	ish
   b579c:	e853 6f00 	ldrex	r6, [r3]
   b57a0:	e843 0200 	strex	r2, r0, [r3]
   b57a4:	2a00      	cmp	r2, #0
   b57a6:	d1f9      	bne.n	b579c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b57a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b57ac:	b16e      	cbz	r6, b57ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b57ae:	f7ff fc03 	bl	b4fb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b57b2:	b178      	cbz	r0, b57d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b57b4:	4629      	mov	r1, r5
   b57b6:	4630      	mov	r0, r6
   b57b8:	f7ff ff8b 	bl	b56d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b57bc:	4630      	mov	r0, r6
   b57be:	f7ff fddd 	bl	b537c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b57c2:	2110      	movs	r1, #16
   b57c4:	4630      	mov	r0, r6
   b57c6:	f7fe fc68 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b57ca:	4668      	mov	r0, sp
   b57cc:	f7ff ff33 	bl	b5636 <_ZN8particle5ErrorD1Ev>
    }
   b57d0:	b009      	add	sp, #36	; 0x24
   b57d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b57d4:	4631      	mov	r1, r6
   b57d6:	a802      	add	r0, sp, #8
   b57d8:	f7ff ffb0 	bl	b573c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b57dc:	68e0      	ldr	r0, [r4, #12]
   b57de:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b57e2:	b108      	cbz	r0, b57e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b57e4:	f000 fdfc 	bl	b63e0 <strdup>
        type_(type) {
   b57e8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b57ea:	2010      	movs	r0, #16
   b57ec:	f8ad 501c 	strh.w	r5, [sp, #28]
   b57f0:	f7fe fc4f 	bl	b4092 <_Znwj>
   b57f4:	4605      	mov	r5, r0
   b57f6:	b1e8      	cbz	r0, b5834 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b57f8:	2700      	movs	r7, #0
   b57fa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b57fc:	2018      	movs	r0, #24
   b57fe:	f7fe fc48 	bl	b4092 <_Znwj>
   b5802:	4604      	mov	r4, r0
   b5804:	b188      	cbz	r0, b582a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5806:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5808:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b580a:	a802      	add	r0, sp, #8
   b580c:	f7ff fdbf 	bl	b538e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5810:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5812:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5814:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5816:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5818:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b581a:	a906      	add	r1, sp, #24
   b581c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b581e:	60e3      	str	r3, [r4, #12]
   b5820:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5824:	9205      	str	r2, [sp, #20]
   b5826:	f7ff fef9 	bl	b561c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b582a:	4b08      	ldr	r3, [pc, #32]	; (b584c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b582c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b582e:	4b08      	ldr	r3, [pc, #32]	; (b5850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5830:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5832:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5834:	a806      	add	r0, sp, #24
   b5836:	f7ff fefe 	bl	b5636 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b583a:	a802      	add	r0, sp, #8
   b583c:	f7ff fd9e 	bl	b537c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5840:	2200      	movs	r2, #0
   b5842:	4629      	mov	r1, r5
   b5844:	4803      	ldr	r0, [pc, #12]	; (b5854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5846:	f7ff fbbf 	bl	b4fc8 <application_thread_invoke>
   b584a:	e7b7      	b.n	b57bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b584c:	000b56e5 	.word	0x000b56e5
   b5850:	000b5969 	.word	0x000b5969
   b5854:	000b5dcd 	.word	0x000b5dcd

000b5858 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b585c:	b08b      	sub	sp, #44	; 0x2c
   b585e:	4605      	mov	r5, r0
   b5860:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5864:	460f      	mov	r7, r1
   b5866:	4690      	mov	r8, r2
   b5868:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b586a:	f7ff fc29 	bl	b50c0 <spark_cloud_flag_connected>
   b586e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5870:	4683      	mov	fp, r0
   b5872:	bb38      	cbnz	r0, b58c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5874:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5878:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b587a:	a905      	add	r1, sp, #20
   b587c:	4630      	mov	r0, r6
   b587e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5882:	f7ff fecb 	bl	b561c <_ZN8particle5ErrorC1EOS0_>
   b5886:	2014      	movs	r0, #20
   b5888:	f7fe fc03 	bl	b4092 <_Znwj>
   b588c:	4604      	mov	r4, r0
   b588e:	b148      	cbz	r0, b58a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5890:	2302      	movs	r3, #2
   b5892:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5894:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5896:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b589a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b589c:	4631      	mov	r1, r6
   b589e:	300c      	adds	r0, #12
   b58a0:	f7ff febc 	bl	b561c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b58a4:	4628      	mov	r0, r5
	: __shared_count(__p)
   b58a6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b58a8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b58ac:	f7ff ff32 	bl	b5714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b58b0:	4630      	mov	r0, r6
   b58b2:	f7ff fec0 	bl	b5636 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b58b6:	a805      	add	r0, sp, #20
   b58b8:	f7ff febd 	bl	b5636 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b58bc:	4628      	mov	r0, r5
   b58be:	b00b      	add	sp, #44	; 0x2c
   b58c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b58c4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b58c6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b58c8:	2014      	movs	r0, #20
   b58ca:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b58ce:	9307      	str	r3, [sp, #28]
   b58d0:	f7fe fbdf 	bl	b4092 <_Znwj>
   b58d4:	4601      	mov	r1, r0
   b58d6:	b118      	cbz	r0, b58e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b58d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b58dc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b58de:	7044      	strb	r4, [r0, #1]
   b58e0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b58e2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b58e4:	f7ff ff16 	bl	b5714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b58e8:	4b1e      	ldr	r3, [pc, #120]	; (b5964 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b58ea:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b58ec:	2008      	movs	r0, #8
   b58ee:	f7fe fbd0 	bl	b4092 <_Znwj>
   b58f2:	4604      	mov	r4, r0
   b58f4:	b110      	cbz	r0, b58fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b58f6:	a903      	add	r1, sp, #12
   b58f8:	f7ff fec7 	bl	b568a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b58fc:	9600      	str	r6, [sp, #0]
   b58fe:	fa5f f38a 	uxtb.w	r3, sl
   b5902:	464a      	mov	r2, r9
   b5904:	4641      	mov	r1, r8
   b5906:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5908:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b590a:	f7ff fbe1 	bl	b50d0 <spark_send_event>
   b590e:	b9b8      	cbnz	r0, b5940 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5910:	9b03      	ldr	r3, [sp, #12]
   b5912:	785b      	ldrb	r3, [r3, #1]
   b5914:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5918:	b993      	cbnz	r3, b5940 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b591a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b591e:	a905      	add	r1, sp, #20
   b5920:	a803      	add	r0, sp, #12
   b5922:	9205      	str	r2, [sp, #20]
   b5924:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5928:	f7ff ff18 	bl	b575c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b592c:	a805      	add	r0, sp, #20
   b592e:	f7ff fe82 	bl	b5636 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5932:	a805      	add	r0, sp, #20
   b5934:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5936:	f7ff feb1 	bl	b569c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b593a:	a806      	add	r0, sp, #24
   b593c:	f7fe fbfa 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5940:	a903      	add	r1, sp, #12
   b5942:	a805      	add	r0, sp, #20
   b5944:	f7ff fea1 	bl	b568a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5948:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b594a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b594c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b594e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5950:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5952:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5954:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5956:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5958:	f7fe fbec 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b595c:	a804      	add	r0, sp, #16
   b595e:	f7fe fbe9 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5962:	e7ab      	b.n	b58bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5964:	000b59e5 	.word	0x000b59e5

000b5968 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5968:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b596a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b596c:	4605      	mov	r5, r0
	switch (__op)
   b596e:	d103      	bne.n	b5978 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5970:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5972:	6003      	str	r3, [r0, #0]
      }
   b5974:	2000      	movs	r0, #0
   b5976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5978:	2a02      	cmp	r2, #2
   b597a:	d010      	beq.n	b599e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b597c:	2a03      	cmp	r2, #3
   b597e:	d1f9      	bne.n	b5974 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5980:	6804      	ldr	r4, [r0, #0]
   b5982:	2c00      	cmp	r4, #0
   b5984:	d0f6      	beq.n	b5974 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5986:	f104 0010 	add.w	r0, r4, #16
   b598a:	f7ff fe54 	bl	b5636 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b598e:	4620      	mov	r0, r4
   b5990:	f7ff fcf4 	bl	b537c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5994:	2118      	movs	r1, #24
   b5996:	4620      	mov	r0, r4
   b5998:	f7fe fb7f 	bl	b409a <_ZdlPvj>
   b599c:	e7ea      	b.n	b5974 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b599e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b59a0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b59a2:	f7fe fb76 	bl	b4092 <_Znwj>
   b59a6:	4604      	mov	r4, r0
   b59a8:	b150      	cbz	r0, b59c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b59aa:	4631      	mov	r1, r6
   b59ac:	f7ff fec6 	bl	b573c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b59b0:	6930      	ldr	r0, [r6, #16]
   b59b2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b59b6:	b108      	cbz	r0, b59bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b59b8:	f000 fd12 	bl	b63e0 <strdup>
        type_(type) {
   b59bc:	6120      	str	r0, [r4, #16]
   b59be:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b59c0:	602c      	str	r4, [r5, #0]
	}
   b59c2:	e7d7      	b.n	b5974 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b59c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b59c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b59c6:	2300      	movs	r3, #0
   b59c8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b59ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b59cc:	4604      	mov	r4, r0
   b59ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b59d0:	b12b      	cbz	r3, b59de <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b59d2:	2202      	movs	r2, #2
   b59d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b59d6:	68eb      	ldr	r3, [r5, #12]
   b59d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b59da:	68ab      	ldr	r3, [r5, #8]
   b59dc:	60a3      	str	r3, [r4, #8]
    }
   b59de:	4620      	mov	r0, r4
   b59e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b59e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b59e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b59e6:	b089      	sub	sp, #36	; 0x24
   b59e8:	4604      	mov	r4, r0
   b59ea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b59ec:	a801      	add	r0, sp, #4
   b59ee:	4611      	mov	r1, r2
   b59f0:	f7ff fe54 	bl	b569c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b59f4:	b1a4      	cbz	r4, b5a20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b59f6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b59f8:	b11d      	cbz	r5, b5a02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b59fa:	4628      	mov	r0, r5
   b59fc:	f000 fcf0 	bl	b63e0 <strdup>
   b5a00:	4605      	mov	r5, r0
   b5a02:	a801      	add	r0, sp, #4
   b5a04:	a903      	add	r1, sp, #12
        type_(type) {
   b5a06:	9503      	str	r5, [sp, #12]
   b5a08:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5a0c:	f7ff fea6 	bl	b575c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5a10:	a803      	add	r0, sp, #12
   b5a12:	f7ff fe10 	bl	b5636 <_ZN8particle5ErrorD1Ev>
   b5a16:	a802      	add	r0, sp, #8
   b5a18:	f7fe fb8c 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a1c:	b009      	add	sp, #36	; 0x24
   b5a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5a20:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5a22:	2301      	movs	r3, #1
   b5a24:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5a28:	2a00      	cmp	r2, #0
   b5a2a:	d103      	bne.n	b5a34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5a2c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5a30:	2900      	cmp	r1, #0
   b5a32:	d1f7      	bne.n	b5a24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5a34:	d1ef      	bne.n	b5a16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5a36:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5a38:	f3bf 8f5b 	dmb	ish
   b5a3c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5a3e:	1d2b      	adds	r3, r5, #4
   b5a40:	f3bf 8f5b 	dmb	ish
   b5a44:	e853 6f00 	ldrex	r6, [r3]
   b5a48:	e843 4200 	strex	r2, r4, [r3]
   b5a4c:	2a00      	cmp	r2, #0
   b5a4e:	d1f9      	bne.n	b5a44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5a50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5a54:	2e00      	cmp	r6, #0
   b5a56:	d0de      	beq.n	b5a16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5a58:	4620      	mov	r0, r4
   b5a5a:	f7ff faad 	bl	b4fb8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5a5e:	4607      	mov	r7, r0
   b5a60:	b160      	cbz	r0, b5a7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5a62:	f105 010c 	add.w	r1, r5, #12
   b5a66:	4630      	mov	r0, r6
   b5a68:	f7ff fe43 	bl	b56f2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5a6c:	4630      	mov	r0, r6
   b5a6e:	f7ff fc85 	bl	b537c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5a72:	2110      	movs	r1, #16
   b5a74:	4630      	mov	r0, r6
   b5a76:	f7fe fb10 	bl	b409a <_ZdlPvj>
   b5a7a:	e7cc      	b.n	b5a16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5a7c:	4631      	mov	r1, r6
   b5a7e:	a803      	add	r0, sp, #12
   b5a80:	f7ff ffa0 	bl	b59c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a84:	7b2b      	ldrb	r3, [r5, #12]
   b5a86:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5a8a:	2010      	movs	r0, #16
   b5a8c:	f7fe fb01 	bl	b4092 <_Znwj>
   b5a90:	4605      	mov	r5, r0
   b5a92:	b1d0      	cbz	r0, b5aca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5a94:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a96:	2014      	movs	r0, #20
   b5a98:	f7fe fafb 	bl	b4092 <_Znwj>
   b5a9c:	4604      	mov	r4, r0
   b5a9e:	b178      	cbz	r0, b5ac0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5aa0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5aa2:	4601      	mov	r1, r0
   b5aa4:	a803      	add	r0, sp, #12
   b5aa6:	f7ff fc72 	bl	b538e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5aaa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5aac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5aae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ab0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5ab2:	9205      	str	r2, [sp, #20]
   b5ab4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ab6:	60e3      	str	r3, [r4, #12]
   b5ab8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5abc:	9206      	str	r2, [sp, #24]
   b5abe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ac0:	4b06      	ldr	r3, [pc, #24]	; (b5adc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5ac2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5ac4:	4b06      	ldr	r3, [pc, #24]	; (b5ae0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ac6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ac8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5aca:	a803      	add	r0, sp, #12
   b5acc:	f7ff fc56 	bl	b537c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5ad0:	2200      	movs	r2, #0
   b5ad2:	4629      	mov	r1, r5
   b5ad4:	4803      	ldr	r0, [pc, #12]	; (b5ae4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5ad6:	f7ff fa77 	bl	b4fc8 <application_thread_invoke>
   b5ada:	e7c7      	b.n	b5a6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5adc:	000b5705 	.word	0x000b5705
   b5ae0:	000b5ae9 	.word	0x000b5ae9
   b5ae4:	000b5dcd 	.word	0x000b5dcd

000b5ae8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5ae8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5aea:	b570      	push	{r4, r5, r6, lr}
   b5aec:	4604      	mov	r4, r0
	switch (__op)
   b5aee:	d103      	bne.n	b5af8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5af0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5af2:	6003      	str	r3, [r0, #0]
      }
   b5af4:	2000      	movs	r0, #0
   b5af6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5af8:	2a02      	cmp	r2, #2
   b5afa:	d00c      	beq.n	b5b16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5afc:	2a03      	cmp	r2, #3
   b5afe:	d1f9      	bne.n	b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5b00:	6804      	ldr	r4, [r0, #0]
   b5b02:	2c00      	cmp	r4, #0
   b5b04:	d0f6      	beq.n	b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff fc38 	bl	b537c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5b0c:	2114      	movs	r1, #20
   b5b0e:	4620      	mov	r0, r4
   b5b10:	f7fe fac3 	bl	b409a <_ZdlPvj>
   b5b14:	e7ee      	b.n	b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b16:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5b18:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5b1a:	f7fe faba 	bl	b4092 <_Znwj>
   b5b1e:	4605      	mov	r5, r0
   b5b20:	b120      	cbz	r0, b5b2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5b22:	4631      	mov	r1, r6
   b5b24:	f7ff ff4e 	bl	b59c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5b28:	7c33      	ldrb	r3, [r6, #16]
   b5b2a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5b2c:	6025      	str	r5, [r4, #0]
	}
   b5b2e:	e7e1      	b.n	b5af4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5b30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5b30:	4770      	bx	lr

000b5b32 <_ZN9IPAddressD0Ev>:
   b5b32:	b510      	push	{r4, lr}
   b5b34:	2118      	movs	r1, #24
   b5b36:	4604      	mov	r4, r0
   b5b38:	f7fe faaf 	bl	b409a <_ZdlPvj>
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	bd10      	pop	{r4, pc}

000b5b40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5b42:	7d03      	ldrb	r3, [r0, #20]
   b5b44:	2b06      	cmp	r3, #6
{
   b5b46:	b08d      	sub	sp, #52	; 0x34
   b5b48:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b4a:	f100 0704 	add.w	r7, r0, #4
   b5b4e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5b52:	d012      	beq.n	b5b7a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5b54:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5b58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5b5c:	220a      	movs	r2, #10
   b5b5e:	4630      	mov	r0, r6
   b5b60:	f7ff fc77 	bl	b5452 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5b64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5b66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5b68:	d019      	beq.n	b5b9e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5b6a:	2c00      	cmp	r4, #0
   b5b6c:	d0f4      	beq.n	b5b58 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5b6e:	212e      	movs	r1, #46	; 0x2e
   b5b70:	4630      	mov	r0, r6
   b5b72:	f7ff fc4f 	bl	b5414 <_ZN5Print5printEc>
   b5b76:	4404      	add	r4, r0
   b5b78:	e7ee      	b.n	b5b58 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b7a:	232f      	movs	r3, #47	; 0x2f
   b5b7c:	466a      	mov	r2, sp
   b5b7e:	4639      	mov	r1, r7
   b5b80:	200a      	movs	r0, #10
		buf[0] = 0;
   b5b82:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5b86:	f7ff f917 	bl	b4db8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5b8a:	4668      	mov	r0, sp
   b5b8c:	f000 fc45 	bl	b641a <strlen>
   b5b90:	6833      	ldr	r3, [r6, #0]
   b5b92:	4602      	mov	r2, r0
   b5b94:	68db      	ldr	r3, [r3, #12]
   b5b96:	4669      	mov	r1, sp
   b5b98:	4630      	mov	r0, r6
   b5b9a:	4798      	blx	r3
   b5b9c:	4604      	mov	r4, r0
    }
    return n;
}
   b5b9e:	4620      	mov	r0, r4
   b5ba0:	b00d      	add	sp, #52	; 0x34
   b5ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5ba4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5ba4:	b510      	push	{r4, lr}
   b5ba6:	4b05      	ldr	r3, [pc, #20]	; (b5bbc <_ZN9IPAddressC1Ev+0x18>)
   b5ba8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5baa:	2211      	movs	r2, #17
   b5bac:	f840 3b04 	str.w	r3, [r0], #4
   b5bb0:	2100      	movs	r1, #0
   b5bb2:	f000 fbde 	bl	b6372 <memset>
}
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	bd10      	pop	{r4, pc}
   b5bba:	bf00      	nop
   b5bbc:	000b6704 	.word	0x000b6704

000b5bc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5bc0:	4603      	mov	r3, r0
   b5bc2:	4a07      	ldr	r2, [pc, #28]	; (b5be0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5bc4:	b510      	push	{r4, lr}
   b5bc6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5bca:	f101 0210 	add.w	r2, r1, #16
   b5bce:	f851 4b04 	ldr.w	r4, [r1], #4
   b5bd2:	f843 4b04 	str.w	r4, [r3], #4
   b5bd6:	4291      	cmp	r1, r2
   b5bd8:	d1f9      	bne.n	b5bce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5bda:	780a      	ldrb	r2, [r1, #0]
   b5bdc:	701a      	strb	r2, [r3, #0]
}
   b5bde:	bd10      	pop	{r4, pc}
   b5be0:	000b6704 	.word	0x000b6704

000b5be4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5be4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5be6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5bea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5bee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5bf2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5bf6:	2304      	movs	r3, #4
   b5bf8:	6041      	str	r1, [r0, #4]
   b5bfa:	7503      	strb	r3, [r0, #20]
}
   b5bfc:	bd10      	pop	{r4, pc}
	...

000b5c00 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5c00:	b507      	push	{r0, r1, r2, lr}
   b5c02:	4b06      	ldr	r3, [pc, #24]	; (b5c1c <_ZN9IPAddressC1EPKh+0x1c>)
   b5c04:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5c06:	78cb      	ldrb	r3, [r1, #3]
   b5c08:	9300      	str	r3, [sp, #0]
   b5c0a:	788b      	ldrb	r3, [r1, #2]
   b5c0c:	784a      	ldrb	r2, [r1, #1]
   b5c0e:	7809      	ldrb	r1, [r1, #0]
   b5c10:	f7ff ffe8 	bl	b5be4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5c14:	b003      	add	sp, #12
   b5c16:	f85d fb04 	ldr.w	pc, [sp], #4
   b5c1a:	bf00      	nop
   b5c1c:	000b6704 	.word	0x000b6704

000b5c20 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c20:	7441      	strb	r1, [r0, #17]
}
   b5c22:	4770      	bx	lr

000b5c24 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c24:	4770      	bx	lr

000b5c26 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5c26:	4770      	bx	lr

000b5c28 <_ZN9USBSerial4readEv>:
{
   b5c28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5c2a:	2100      	movs	r1, #0
   b5c2c:	7c00      	ldrb	r0, [r0, #16]
   b5c2e:	f7ff f99b 	bl	b4f68 <HAL_USB_USART_Receive_Data>
}
   b5c32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c36:	bd08      	pop	{r3, pc}

000b5c38 <_ZN9USBSerial4peekEv>:
{
   b5c38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5c3a:	2101      	movs	r1, #1
   b5c3c:	7c00      	ldrb	r0, [r0, #16]
   b5c3e:	f7ff f993 	bl	b4f68 <HAL_USB_USART_Receive_Data>
}
   b5c42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c46:	bd08      	pop	{r3, pc}

000b5c48 <_ZN9USBSerial17availableForWriteEv>:
{
   b5c48:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5c4a:	7c00      	ldrb	r0, [r0, #16]
   b5c4c:	f7ff f984 	bl	b4f58 <HAL_USB_USART_Available_Data_For_Write>
}
   b5c50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c54:	bd08      	pop	{r3, pc}

000b5c56 <_ZN9USBSerial9availableEv>:
{
   b5c56:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5c58:	7c00      	ldrb	r0, [r0, #16]
   b5c5a:	f7ff f975 	bl	b4f48 <HAL_USB_USART_Available_Data>
}
   b5c5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c62:	bd08      	pop	{r3, pc}

000b5c64 <_ZN9USBSerial5writeEh>:
{
   b5c64:	b513      	push	{r0, r1, r4, lr}
   b5c66:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c68:	7c00      	ldrb	r0, [r0, #16]
{
   b5c6a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5c6c:	f7ff f974 	bl	b4f58 <HAL_USB_USART_Available_Data_For_Write>
   b5c70:	2800      	cmp	r0, #0
   b5c72:	9901      	ldr	r1, [sp, #4]
   b5c74:	dc01      	bgt.n	b5c7a <_ZN9USBSerial5writeEh+0x16>
   b5c76:	7c60      	ldrb	r0, [r4, #17]
   b5c78:	b120      	cbz	r0, b5c84 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5c7a:	7c20      	ldrb	r0, [r4, #16]
   b5c7c:	f7ff f97c 	bl	b4f78 <HAL_USB_USART_Send_Data>
   b5c80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5c84:	b002      	add	sp, #8
   b5c86:	bd10      	pop	{r4, pc}

000b5c88 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5c88:	7c00      	ldrb	r0, [r0, #16]
   b5c8a:	f7ff b97d 	b.w	b4f88 <HAL_USB_USART_Flush_Data>

000b5c8e <_ZN9USBSerialD0Ev>:
   b5c8e:	b510      	push	{r4, lr}
   b5c90:	2114      	movs	r1, #20
   b5c92:	4604      	mov	r4, r0
   b5c94:	f7fe fa01 	bl	b409a <_ZdlPvj>
   b5c98:	4620      	mov	r0, r4
   b5c9a:	bd10      	pop	{r4, pc}

000b5c9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c9c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ca2:	4604      	mov	r4, r0
   b5ca4:	4608      	mov	r0, r1
   b5ca6:	2100      	movs	r1, #0
   b5ca8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5cac:	4b04      	ldr	r3, [pc, #16]	; (b5cc0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5cae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5cb0:	2301      	movs	r3, #1
  _serial = serial;
   b5cb2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5cb4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5cb6:	4611      	mov	r1, r2
   b5cb8:	f7ff f936 	bl	b4f28 <HAL_USB_USART_Init>
}
   b5cbc:	4620      	mov	r0, r4
   b5cbe:	bd10      	pop	{r4, pc}
   b5cc0:	000b6718 	.word	0x000b6718

000b5cc4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5cc4:	7c00      	ldrb	r0, [r0, #16]
   b5cc6:	2200      	movs	r2, #0
   b5cc8:	f7ff b936 	b.w	b4f38 <HAL_USB_USART_Begin>

000b5ccc <_Z19acquireSerialBufferv>:
{
   b5ccc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5cce:	2214      	movs	r2, #20
{
   b5cd0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5cd2:	2100      	movs	r1, #0
   b5cd4:	f000 fb4d 	bl	b6372 <memset>
}
   b5cd8:	4620      	mov	r0, r4
   b5cda:	bd10      	pop	{r4, pc}

000b5cdc <_Z16_fetch_usbserialv>:
{
   b5cdc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cde:	4c0f      	ldr	r4, [pc, #60]	; (b5d1c <_Z16_fetch_usbserialv+0x40>)
{
   b5ce0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5ce2:	a803      	add	r0, sp, #12
   b5ce4:	f7ff fff2 	bl	b5ccc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ce8:	7821      	ldrb	r1, [r4, #0]
   b5cea:	f3bf 8f5b 	dmb	ish
   b5cee:	f011 0101 	ands.w	r1, r1, #1
   b5cf2:	d10f      	bne.n	b5d14 <_Z16_fetch_usbserialv+0x38>
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	9101      	str	r1, [sp, #4]
   b5cf8:	f7fe f9d1 	bl	b409e <__cxa_guard_acquire>
   b5cfc:	9901      	ldr	r1, [sp, #4]
   b5cfe:	b148      	cbz	r0, b5d14 <_Z16_fetch_usbserialv+0x38>
   b5d00:	aa03      	add	r2, sp, #12
   b5d02:	4807      	ldr	r0, [pc, #28]	; (b5d20 <_Z16_fetch_usbserialv+0x44>)
   b5d04:	f7ff ffca 	bl	b5c9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5d08:	4620      	mov	r0, r4
   b5d0a:	f7fe f9cd 	bl	b40a8 <__cxa_guard_release>
   b5d0e:	4805      	ldr	r0, [pc, #20]	; (b5d24 <_Z16_fetch_usbserialv+0x48>)
   b5d10:	f000 faed 	bl	b62ee <atexit>
	return _usbserial;
}
   b5d14:	4802      	ldr	r0, [pc, #8]	; (b5d20 <_Z16_fetch_usbserialv+0x44>)
   b5d16:	b008      	add	sp, #32
   b5d18:	bd10      	pop	{r4, pc}
   b5d1a:	bf00      	nop
   b5d1c:	2003e6f4 	.word	0x2003e6f4
   b5d20:	2003e6f8 	.word	0x2003e6f8
   b5d24:	000b5c25 	.word	0x000b5c25

000b5d28 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5d28:	4770      	bx	lr

000b5d2a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5d2a:	7441      	strb	r1, [r0, #17]
}
   b5d2c:	4770      	bx	lr

000b5d2e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5d2e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5d30:	7c00      	ldrb	r0, [r0, #16]
   b5d32:	f7ff f879 	bl	b4e28 <hal_usart_available_data_for_write>
}
   b5d36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d3a:	bd08      	pop	{r3, pc}

000b5d3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5d3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5d3e:	7c00      	ldrb	r0, [r0, #16]
   b5d40:	f7ff f84a 	bl	b4dd8 <hal_usart_available>
}
   b5d44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5d48:	bd08      	pop	{r3, pc}

000b5d4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5d4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5d4c:	7c00      	ldrb	r0, [r0, #16]
   b5d4e:	f7ff f853 	bl	b4df8 <hal_usart_peek>
}
   b5d52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d56:	bd08      	pop	{r3, pc}

000b5d58 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5d58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5d5a:	7c00      	ldrb	r0, [r0, #16]
   b5d5c:	f7ff f844 	bl	b4de8 <hal_usart_read>
}
   b5d60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5d64:	bd08      	pop	{r3, pc}

000b5d66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5d66:	7c00      	ldrb	r0, [r0, #16]
   b5d68:	f7ff b84e 	b.w	b4e08 <hal_usart_flush>

000b5d6c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d6e:	7c45      	ldrb	r5, [r0, #17]
{
   b5d70:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d72:	b12d      	cbz	r5, b5d80 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5d74:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5d76:	b003      	add	sp, #12
   b5d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5d7c:	f7ff b824 	b.w	b4dc8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5d80:	7c00      	ldrb	r0, [r0, #16]
   b5d82:	9101      	str	r1, [sp, #4]
   b5d84:	f7ff f850 	bl	b4e28 <hal_usart_available_data_for_write>
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	9901      	ldr	r1, [sp, #4]
   b5d8c:	dcf2      	bgt.n	b5d74 <_ZN11USARTSerial5writeEh+0x8>
}
   b5d8e:	4628      	mov	r0, r5
   b5d90:	b003      	add	sp, #12
   b5d92:	bd30      	pop	{r4, r5, pc}

000b5d94 <_ZN11USARTSerialD0Ev>:
   b5d94:	b510      	push	{r4, lr}
   b5d96:	2114      	movs	r1, #20
   b5d98:	4604      	mov	r4, r0
   b5d9a:	f7fe f97e 	bl	b409a <_ZdlPvj>
   b5d9e:	4620      	mov	r0, r4
   b5da0:	bd10      	pop	{r4, pc}
	...

000b5da4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5da4:	b510      	push	{r4, lr}
   b5da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5daa:	4604      	mov	r4, r0
   b5dac:	4608      	mov	r0, r1
   b5dae:	4611      	mov	r1, r2
   b5db0:	2200      	movs	r2, #0
   b5db2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5db6:	4b04      	ldr	r3, [pc, #16]	; (b5dc8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5db8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5dba:	2301      	movs	r3, #1
  _serial = serial;
   b5dbc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5dbe:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5dc0:	f7ff f83a 	bl	b4e38 <hal_usart_init_ex>
}
   b5dc4:	4620      	mov	r0, r4
   b5dc6:	bd10      	pop	{r4, pc}
   b5dc8:	000b6748 	.word	0x000b6748

000b5dcc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5dcc:	b510      	push	{r4, lr}
      if (_M_empty())
   b5dce:	6883      	ldr	r3, [r0, #8]
   b5dd0:	4604      	mov	r4, r0
   b5dd2:	b90b      	cbnz	r3, b5dd8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5dd4:	f000 fa88 	bl	b62e8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dd8:	68c3      	ldr	r3, [r0, #12]
   b5dda:	4798      	blx	r3
      if (_M_manager)
   b5ddc:	68a3      	ldr	r3, [r4, #8]
   b5dde:	b11b      	cbz	r3, b5de8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5de0:	2203      	movs	r2, #3
   b5de2:	4621      	mov	r1, r4
   b5de4:	4620      	mov	r0, r4
   b5de6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5de8:	4620      	mov	r0, r4
   b5dea:	2110      	movs	r1, #16
}
   b5dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5df0:	f7fe b953 	b.w	b409a <_ZdlPvj>

000b5df4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5df4:	4770      	bx	lr

000b5df6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5df8:	4606      	mov	r6, r0
   b5dfa:	4615      	mov	r5, r2
   b5dfc:	460c      	mov	r4, r1
   b5dfe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5e00:	42bc      	cmp	r4, r7
   b5e02:	d006      	beq.n	b5e12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5e04:	6833      	ldr	r3, [r6, #0]
   b5e06:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5e0a:	689b      	ldr	r3, [r3, #8]
   b5e0c:	4630      	mov	r0, r6
   b5e0e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5e10:	e7f6      	b.n	b5e00 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5e12:	4628      	mov	r0, r5
   b5e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e16 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5e16:	7c00      	ldrb	r0, [r0, #16]
   b5e18:	2200      	movs	r2, #0
   b5e1a:	f7ff b835 	b.w	b4e88 <hal_i2c_write>

000b5e1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5e1e:	7c00      	ldrb	r0, [r0, #16]
   b5e20:	2100      	movs	r1, #0
   b5e22:	f7ff b839 	b.w	b4e98 <hal_i2c_available>

000b5e26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5e26:	7c00      	ldrb	r0, [r0, #16]
   b5e28:	2100      	movs	r1, #0
   b5e2a:	f7ff b83d 	b.w	b4ea8 <hal_i2c_read>

000b5e2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5e2e:	7c00      	ldrb	r0, [r0, #16]
   b5e30:	2100      	movs	r1, #0
   b5e32:	f7ff b841 	b.w	b4eb8 <hal_i2c_peek>

000b5e36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5e36:	7c00      	ldrb	r0, [r0, #16]
   b5e38:	2100      	movs	r1, #0
   b5e3a:	f7ff b845 	b.w	b4ec8 <hal_i2c_flush>

000b5e3e <_ZN7TwoWireD0Ev>:
   b5e3e:	b510      	push	{r4, lr}
   b5e40:	2114      	movs	r1, #20
   b5e42:	4604      	mov	r4, r0
   b5e44:	f7fe f929 	bl	b409a <_ZdlPvj>
   b5e48:	4620      	mov	r0, r4
   b5e4a:	bd10      	pop	{r4, pc}

000b5e4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5e4c:	b538      	push	{r3, r4, r5, lr}
   b5e4e:	4604      	mov	r4, r0
   b5e50:	4615      	mov	r5, r2
   b5e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5e56:	2200      	movs	r2, #0
   b5e58:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5e5c:	4b09      	ldr	r3, [pc, #36]	; (b5e84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5e5e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5e60:	4608      	mov	r0, r1
   b5e62:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5e64:	4629      	mov	r1, r5
   b5e66:	f7ff f83f 	bl	b4ee8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5e6a:	30bf      	adds	r0, #191	; 0xbf
   b5e6c:	d108      	bne.n	b5e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5e6e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5e70:	07db      	lsls	r3, r3, #31
   b5e72:	d505      	bpl.n	b5e80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5e74:	6868      	ldr	r0, [r5, #4]
   b5e76:	f7ff f943 	bl	b5100 <free>
    free(conf.tx_buffer);
   b5e7a:	68e8      	ldr	r0, [r5, #12]
   b5e7c:	f7ff f940 	bl	b5100 <free>
}
   b5e80:	4620      	mov	r0, r4
   b5e82:	bd38      	pop	{r3, r4, r5, pc}
   b5e84:	000b6778 	.word	0x000b6778

000b5e88 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b5e88:	7c00      	ldrb	r0, [r0, #16]
   b5e8a:	2200      	movs	r2, #0
   b5e8c:	f7fe bfdc 	b.w	b4e48 <hal_i2c_set_speed>

000b5e90 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5e90:	2300      	movs	r3, #0
   b5e92:	7c00      	ldrb	r0, [r0, #16]
   b5e94:	461a      	mov	r2, r3
   b5e96:	4619      	mov	r1, r3
   b5e98:	f7fe bfde 	b.w	b4e58 <hal_i2c_begin>

000b5e9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5e9e:	2200      	movs	r2, #0
   b5ea0:	2314      	movs	r3, #20
   b5ea2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5ea6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5eaa:	780b      	ldrb	r3, [r1, #0]
   b5eac:	f88d 3008 	strb.w	r3, [sp, #8]
   b5eb0:	684b      	ldr	r3, [r1, #4]
   b5eb2:	9303      	str	r3, [sp, #12]
   b5eb4:	68cb      	ldr	r3, [r1, #12]
   b5eb6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5eb8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5eba:	7a0b      	ldrb	r3, [r1, #8]
   b5ebc:	9305      	str	r3, [sp, #20]
   b5ebe:	a901      	add	r1, sp, #4
   b5ec0:	f7ff f81a 	bl	b4ef8 <hal_i2c_request_ex>
}
   b5ec4:	b007      	add	sp, #28
   b5ec6:	f85d fb04 	ldr.w	pc, [sp], #4

000b5eca <_ZN7TwoWire11requestFromEhjh>:
{
   b5eca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5ecc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5ece:	f88d 1000 	strb.w	r1, [sp]
   b5ed2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5ed6:	9103      	str	r1, [sp, #12]
   b5ed8:	bf18      	it	ne
   b5eda:	2301      	movne	r3, #1
   b5edc:	4669      	mov	r1, sp
    size_ = size;
   b5ede:	9201      	str	r2, [sp, #4]
   b5ee0:	f88d 3008 	strb.w	r3, [sp, #8]
   b5ee4:	f7ff ffda 	bl	b5e9c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5ee8:	b005      	add	sp, #20
   b5eea:	f85d fb04 	ldr.w	pc, [sp], #4

000b5eee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5eee:	2301      	movs	r3, #1
   b5ef0:	f7ff bfeb 	b.w	b5eca <_ZN7TwoWire11requestFromEhjh>

000b5ef4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5ef4:	7c00      	ldrb	r0, [r0, #16]
   b5ef6:	2200      	movs	r2, #0
   b5ef8:	f7fe bfb6 	b.w	b4e68 <hal_i2c_begin_transmission>

000b5efc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5efc:	b2c9      	uxtb	r1, r1
   b5efe:	f7ff bff9 	b.w	b5ef4 <_ZN7TwoWire17beginTransmissionEh>

000b5f02 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5f02:	7c00      	ldrb	r0, [r0, #16]
   b5f04:	2200      	movs	r2, #0
   b5f06:	f7fe bfb7 	b.w	b4e78 <hal_i2c_end_transmission>

000b5f0a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5f0a:	2101      	movs	r1, #1
   b5f0c:	f7ff bff9 	b.w	b5f02 <_ZN7TwoWire15endTransmissionEh>

000b5f10 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5f10:	2200      	movs	r2, #0
   b5f12:	6840      	ldr	r0, [r0, #4]
   b5f14:	4611      	mov	r1, r2
   b5f16:	f7ff b88b 	b.w	b5030 <network_ready>

000b5f1a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f1a:	2200      	movs	r2, #0
   b5f1c:	6840      	ldr	r0, [r0, #4]
   b5f1e:	4611      	mov	r1, r2
   b5f20:	f7ff b8a6 	b.w	b5070 <network_listening>

000b5f24 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f24:	2200      	movs	r2, #0
   b5f26:	6840      	ldr	r0, [r0, #4]
   b5f28:	4611      	mov	r1, r2
   b5f2a:	f7ff b8b1 	b.w	b5090 <network_get_listen_timeout>

000b5f2e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f2e:	6840      	ldr	r0, [r0, #4]
   b5f30:	2200      	movs	r2, #0
   b5f32:	f7ff b8a5 	b.w	b5080 <network_set_listen_timeout>

000b5f36 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f36:	6840      	ldr	r0, [r0, #4]
   b5f38:	2200      	movs	r2, #0
   b5f3a:	f081 0101 	eor.w	r1, r1, #1
   b5f3e:	f7ff b88f 	b.w	b5060 <network_listen>

000b5f42 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f42:	2300      	movs	r3, #0
   b5f44:	6840      	ldr	r0, [r0, #4]
   b5f46:	461a      	mov	r2, r3
   b5f48:	4619      	mov	r1, r3
   b5f4a:	f7ff b881 	b.w	b5050 <network_off>

000b5f4e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f4e:	2300      	movs	r3, #0
   b5f50:	6840      	ldr	r0, [r0, #4]
   b5f52:	461a      	mov	r2, r3
   b5f54:	4619      	mov	r1, r3
   b5f56:	f7ff b873 	b.w	b5040 <network_on>

000b5f5a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5f5a:	2200      	movs	r2, #0
   b5f5c:	6840      	ldr	r0, [r0, #4]
   b5f5e:	4611      	mov	r1, r2
   b5f60:	f7ff b856 	b.w	b5010 <network_connecting>

000b5f64 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5f64:	6840      	ldr	r0, [r0, #4]
   b5f66:	2200      	movs	r2, #0
   b5f68:	2102      	movs	r1, #2
   b5f6a:	f7ff b859 	b.w	b5020 <network_disconnect>

000b5f6e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5f6e:	2300      	movs	r3, #0
   b5f70:	6840      	ldr	r0, [r0, #4]
   b5f72:	461a      	mov	r2, r3
   b5f74:	f7ff b844 	b.w	b5000 <network_connect>

000b5f78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5f78:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5f7a:	2204      	movs	r2, #4
   b5f7c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5f7e:	4a02      	ldr	r2, [pc, #8]	; (b5f88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5f80:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5f82:	4770      	bx	lr
   b5f84:	2003e70c 	.word	0x2003e70c
   b5f88:	000b67a0 	.word	0x000b67a0

000b5f8c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5f8c:	2300      	movs	r3, #0
   b5f8e:	6840      	ldr	r0, [r0, #4]
   b5f90:	461a      	mov	r2, r3
   b5f92:	f7ff b835 	b.w	b5000 <network_connect>

000b5f96 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5f96:	6840      	ldr	r0, [r0, #4]
   b5f98:	2200      	movs	r2, #0
   b5f9a:	2102      	movs	r1, #2
   b5f9c:	f7ff b840 	b.w	b5020 <network_disconnect>

000b5fa0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5fa0:	2200      	movs	r2, #0
   b5fa2:	6840      	ldr	r0, [r0, #4]
   b5fa4:	4611      	mov	r1, r2
   b5fa6:	f7ff b833 	b.w	b5010 <network_connecting>

000b5faa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5faa:	2200      	movs	r2, #0
   b5fac:	6840      	ldr	r0, [r0, #4]
   b5fae:	4611      	mov	r1, r2
   b5fb0:	f7ff b83e 	b.w	b5030 <network_ready>

000b5fb4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5fb4:	2300      	movs	r3, #0
   b5fb6:	6840      	ldr	r0, [r0, #4]
   b5fb8:	461a      	mov	r2, r3
   b5fba:	4619      	mov	r1, r3
   b5fbc:	f7ff b840 	b.w	b5040 <network_on>

000b5fc0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5fc0:	2300      	movs	r3, #0
   b5fc2:	6840      	ldr	r0, [r0, #4]
   b5fc4:	461a      	mov	r2, r3
   b5fc6:	4619      	mov	r1, r3
   b5fc8:	f7ff b842 	b.w	b5050 <network_off>

000b5fcc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5fcc:	6840      	ldr	r0, [r0, #4]
   b5fce:	2100      	movs	r1, #0
   b5fd0:	f7ff b866 	b.w	b50a0 <network_is_on>

000b5fd4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5fd4:	6840      	ldr	r0, [r0, #4]
   b5fd6:	2100      	movs	r1, #0
   b5fd8:	f7ff b86a 	b.w	b50b0 <network_is_off>

000b5fdc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5fdc:	6840      	ldr	r0, [r0, #4]
   b5fde:	2200      	movs	r2, #0
   b5fe0:	f081 0101 	eor.w	r1, r1, #1
   b5fe4:	f7ff b83c 	b.w	b5060 <network_listen>

000b5fe8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5fe8:	6840      	ldr	r0, [r0, #4]
   b5fea:	2200      	movs	r2, #0
   b5fec:	f7ff b848 	b.w	b5080 <network_set_listen_timeout>

000b5ff0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ff0:	2200      	movs	r2, #0
   b5ff2:	6840      	ldr	r0, [r0, #4]
   b5ff4:	4611      	mov	r1, r2
   b5ff6:	f7ff b84b 	b.w	b5090 <network_get_listen_timeout>

000b5ffa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5ffa:	2200      	movs	r2, #0
   b5ffc:	6840      	ldr	r0, [r0, #4]
   b5ffe:	4611      	mov	r1, r2
   b6000:	f7ff b836 	b.w	b5070 <network_listening>

000b6004 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6008:	b095      	sub	sp, #84	; 0x54
   b600a:	4614      	mov	r4, r2
   b600c:	460d      	mov	r5, r1
   b600e:	4607      	mov	r7, r0
    IPAddress addr;
   b6010:	f7ff fdc8 	bl	b5ba4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6014:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6016:	221c      	movs	r2, #28
   b6018:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b601a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b601c:	f000 f9a9 	bl	b6372 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6020:	2340      	movs	r3, #64	; 0x40
   b6022:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6024:	4620      	mov	r0, r4
   b6026:	466b      	mov	r3, sp
   b6028:	aa0c      	add	r2, sp, #48	; 0x30
   b602a:	2100      	movs	r1, #0
   b602c:	f7fe fe84 	bl	b4d38 <netdb_getaddrinfo>
    if (!r) {
   b6030:	4604      	mov	r4, r0
   b6032:	2800      	cmp	r0, #0
   b6034:	d14b      	bne.n	b60ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6036:	4602      	mov	r2, r0
   b6038:	2101      	movs	r1, #1
   b603a:	6868      	ldr	r0, [r5, #4]
   b603c:	f7fe fff8 	bl	b5030 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6040:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6042:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6044:	4622      	mov	r2, r4
   b6046:	6868      	ldr	r0, [r5, #4]
   b6048:	f7fe fff2 	bl	b5030 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b604c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b604e:	4681      	mov	r9, r0
        bool ok = false;
   b6050:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6052:	2e00      	cmp	r6, #0
   b6054:	d03b      	beq.n	b60ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6056:	2900      	cmp	r1, #0
   b6058:	d139      	bne.n	b60ce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b605a:	6873      	ldr	r3, [r6, #4]
   b605c:	2b02      	cmp	r3, #2
   b605e:	d003      	beq.n	b6068 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6060:	2b0a      	cmp	r3, #10
   b6062:	d011      	beq.n	b6088 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6064:	69f6      	ldr	r6, [r6, #28]
   b6066:	e7f4      	b.n	b6052 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6068:	f1b8 0f00 	cmp.w	r8, #0
   b606c:	d0fa      	beq.n	b6064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b606e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6070:	a806      	add	r0, sp, #24
   b6072:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6074:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6076:	f7ff fdc3 	bl	b5c00 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b607a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b607c:	1d3c      	adds	r4, r7, #4
   b607e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6080:	682b      	ldr	r3, [r5, #0]
   b6082:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6084:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6086:	e7ed      	b.n	b6064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6088:	f1b9 0f00 	cmp.w	r9, #0
   b608c:	d0ea      	beq.n	b6064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b608e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6090:	2210      	movs	r2, #16
   b6092:	a801      	add	r0, sp, #4
   b6094:	f000 f96d 	bl	b6372 <memset>
                    a.v = 6;
   b6098:	2306      	movs	r3, #6
   b609a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b609e:	ad01      	add	r5, sp, #4
   b60a0:	f104 0308 	add.w	r3, r4, #8
   b60a4:	3418      	adds	r4, #24
   b60a6:	6818      	ldr	r0, [r3, #0]
   b60a8:	6859      	ldr	r1, [r3, #4]
   b60aa:	462a      	mov	r2, r5
   b60ac:	c203      	stmia	r2!, {r0, r1}
   b60ae:	3308      	adds	r3, #8
   b60b0:	42a3      	cmp	r3, r4
   b60b2:	4615      	mov	r5, r2
   b60b4:	d1f7      	bne.n	b60a6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b60b6:	a901      	add	r1, sp, #4
   b60b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b60ba:	ad07      	add	r5, sp, #28
   b60bc:	f7ff fd80 	bl	b5bc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b60c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60c2:	1d3c      	adds	r4, r7, #4
   b60c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60c6:	682b      	ldr	r3, [r5, #0]
   b60c8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b60ca:	4649      	mov	r1, r9
   b60cc:	e7ca      	b.n	b6064 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b60ce:	9800      	ldr	r0, [sp, #0]
   b60d0:	f7fe fe2a 	bl	b4d28 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b60d4:	4638      	mov	r0, r7
   b60d6:	b015      	add	sp, #84	; 0x54
   b60d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b60dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b60dc:	4b02      	ldr	r3, [pc, #8]	; (b60e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b60de:	4a03      	ldr	r2, [pc, #12]	; (b60ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b60e0:	601a      	str	r2, [r3, #0]
   b60e2:	2200      	movs	r2, #0
   b60e4:	605a      	str	r2, [r3, #4]

} // spark
   b60e6:	4770      	bx	lr
   b60e8:	2003e714 	.word	0x2003e714
   b60ec:	000b67dc 	.word	0x000b67dc

000b60f0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b60f0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b60f2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b60f4:	d902      	bls.n	b60fc <pinAvailable+0xc>
    return false;
   b60f6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b60f8:	b002      	add	sp, #8
   b60fa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b60fc:	f1a0 030b 	sub.w	r3, r0, #11
   b6100:	2b02      	cmp	r3, #2
   b6102:	d81a      	bhi.n	b613a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6104:	4c17      	ldr	r4, [pc, #92]	; (b6164 <pinAvailable+0x74>)
   b6106:	7821      	ldrb	r1, [r4, #0]
   b6108:	f3bf 8f5b 	dmb	ish
   b610c:	f011 0101 	ands.w	r1, r1, #1
   b6110:	d10b      	bne.n	b612a <pinAvailable+0x3a>
   b6112:	4620      	mov	r0, r4
   b6114:	9101      	str	r1, [sp, #4]
   b6116:	f7fd ffc2 	bl	b409e <__cxa_guard_acquire>
   b611a:	9901      	ldr	r1, [sp, #4]
   b611c:	b128      	cbz	r0, b612a <pinAvailable+0x3a>
   b611e:	4812      	ldr	r0, [pc, #72]	; (b6168 <pinAvailable+0x78>)
   b6120:	f7ff f85c 	bl	b51dc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6124:	4620      	mov	r0, r4
   b6126:	f7fd ffbf 	bl	b40a8 <__cxa_guard_release>
   b612a:	4b0f      	ldr	r3, [pc, #60]	; (b6168 <pinAvailable+0x78>)
   b612c:	7818      	ldrb	r0, [r3, #0]
   b612e:	f7fe fef3 	bl	b4f18 <hal_spi_is_enabled>
   b6132:	2800      	cmp	r0, #0
   b6134:	d1df      	bne.n	b60f6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6136:	2001      	movs	r0, #1
   b6138:	e7de      	b.n	b60f8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b613a:	2801      	cmp	r0, #1
   b613c:	d809      	bhi.n	b6152 <pinAvailable+0x62>
   b613e:	f000 f8ad 	bl	b629c <_Z19__fetch_global_Wirev>
   b6142:	2100      	movs	r1, #0
   b6144:	7c00      	ldrb	r0, [r0, #16]
   b6146:	f7fe fec7 	bl	b4ed8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b614a:	f080 0001 	eor.w	r0, r0, #1
   b614e:	b2c0      	uxtb	r0, r0
   b6150:	e7d2      	b.n	b60f8 <pinAvailable+0x8>
   b6152:	3809      	subs	r0, #9
   b6154:	2801      	cmp	r0, #1
   b6156:	d8ee      	bhi.n	b6136 <pinAvailable+0x46>
   b6158:	f000 f860 	bl	b621c <_Z22__fetch_global_Serial1v>
   b615c:	7c00      	ldrb	r0, [r0, #16]
   b615e:	f7fe fe5b 	bl	b4e18 <hal_usart_is_enabled>
   b6162:	e7f2      	b.n	b614a <pinAvailable+0x5a>
   b6164:	2003e71c 	.word	0x2003e71c
   b6168:	2003e720 	.word	0x2003e720

000b616c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b616c:	2823      	cmp	r0, #35	; 0x23
{
   b616e:	b538      	push	{r3, r4, r5, lr}
   b6170:	4604      	mov	r4, r0
   b6172:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6174:	d80a      	bhi.n	b618c <pinMode+0x20>
   b6176:	29ff      	cmp	r1, #255	; 0xff
   b6178:	d008      	beq.n	b618c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b617a:	f7ff ffb9 	bl	b60f0 <pinAvailable>
   b617e:	b128      	cbz	r0, b618c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6180:	4629      	mov	r1, r5
   b6182:	4620      	mov	r0, r4
}
   b6184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6188:	f7fe bdde 	b.w	b4d48 <HAL_Pin_Mode>
}
   b618c:	bd38      	pop	{r3, r4, r5, pc}

000b618e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b618e:	b538      	push	{r3, r4, r5, lr}
   b6190:	4604      	mov	r4, r0
   b6192:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6194:	f7fe fde0 	bl	b4d58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6198:	28ff      	cmp	r0, #255	; 0xff
   b619a:	d010      	beq.n	b61be <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b619c:	2806      	cmp	r0, #6
   b619e:	d804      	bhi.n	b61aa <digitalWrite+0x1c>
   b61a0:	234d      	movs	r3, #77	; 0x4d
   b61a2:	fa23 f000 	lsr.w	r0, r3, r0
   b61a6:	07c3      	lsls	r3, r0, #31
   b61a8:	d409      	bmi.n	b61be <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b61aa:	4620      	mov	r0, r4
   b61ac:	f7ff ffa0 	bl	b60f0 <pinAvailable>
   b61b0:	b128      	cbz	r0, b61be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b61b2:	4629      	mov	r1, r5
   b61b4:	4620      	mov	r0, r4
}
   b61b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b61ba:	f7fe bdd5 	b.w	b4d68 <HAL_GPIO_Write>
}
   b61be:	bd38      	pop	{r3, r4, r5, pc}

000b61c0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b61c0:	b510      	push	{r4, lr}
   b61c2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b61c4:	f7fe fdc8 	bl	b4d58 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b61c8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b61ca:	b2db      	uxtb	r3, r3
   b61cc:	2b01      	cmp	r3, #1
   b61ce:	d908      	bls.n	b61e2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b61d0:	4620      	mov	r0, r4
   b61d2:	f7ff ff8d 	bl	b60f0 <pinAvailable>
   b61d6:	b120      	cbz	r0, b61e2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b61d8:	4620      	mov	r0, r4
}
   b61da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b61de:	f7fe bdcb 	b.w	b4d78 <HAL_GPIO_Read>
}
   b61e2:	2000      	movs	r0, #0
   b61e4:	bd10      	pop	{r4, pc}

000b61e6 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b61e6:	4770      	bx	lr

000b61e8 <_Z20acquireSerial1Bufferv>:
{
   b61e8:	b538      	push	{r3, r4, r5, lr}
   b61ea:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b61ec:	2514      	movs	r5, #20
   b61ee:	462a      	mov	r2, r5
   b61f0:	2100      	movs	r1, #0
   b61f2:	f000 f8be 	bl	b6372 <memset>
   b61f6:	8025      	strh	r5, [r4, #0]
   b61f8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61fa:	4907      	ldr	r1, [pc, #28]	; (b6218 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b61fc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b61fe:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6200:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6202:	f000 f86f 	bl	b62e4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6206:	4904      	ldr	r1, [pc, #16]	; (b6218 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6208:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b620a:	4628      	mov	r0, r5
   b620c:	f000 f86a 	bl	b62e4 <_ZnajRKSt9nothrow_t>
    };
   b6210:	60e0      	str	r0, [r4, #12]
}
   b6212:	4620      	mov	r0, r4
   b6214:	bd38      	pop	{r3, r4, r5, pc}
   b6216:	bf00      	nop
   b6218:	000b6810 	.word	0x000b6810

000b621c <_Z22__fetch_global_Serial1v>:
{
   b621c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b621e:	4d0e      	ldr	r5, [pc, #56]	; (b6258 <_Z22__fetch_global_Serial1v+0x3c>)
   b6220:	7829      	ldrb	r1, [r5, #0]
   b6222:	f3bf 8f5b 	dmb	ish
   b6226:	f011 0401 	ands.w	r4, r1, #1
{
   b622a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b622c:	d111      	bne.n	b6252 <_Z22__fetch_global_Serial1v+0x36>
   b622e:	4628      	mov	r0, r5
   b6230:	f7fd ff35 	bl	b409e <__cxa_guard_acquire>
   b6234:	b168      	cbz	r0, b6252 <_Z22__fetch_global_Serial1v+0x36>
   b6236:	a801      	add	r0, sp, #4
   b6238:	f7ff ffd6 	bl	b61e8 <_Z20acquireSerial1Bufferv>
   b623c:	aa01      	add	r2, sp, #4
   b623e:	4621      	mov	r1, r4
   b6240:	4806      	ldr	r0, [pc, #24]	; (b625c <_Z22__fetch_global_Serial1v+0x40>)
   b6242:	f7ff fdaf 	bl	b5da4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6246:	4628      	mov	r0, r5
   b6248:	f7fd ff2e 	bl	b40a8 <__cxa_guard_release>
   b624c:	4804      	ldr	r0, [pc, #16]	; (b6260 <_Z22__fetch_global_Serial1v+0x44>)
   b624e:	f000 f84e 	bl	b62ee <atexit>
    return serial1;
}
   b6252:	4802      	ldr	r0, [pc, #8]	; (b625c <_Z22__fetch_global_Serial1v+0x40>)
   b6254:	b007      	add	sp, #28
   b6256:	bd30      	pop	{r4, r5, pc}
   b6258:	2003e728 	.word	0x2003e728
   b625c:	2003e72c 	.word	0x2003e72c
   b6260:	000b61e7 	.word	0x000b61e7

000b6264 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6264:	4770      	bx	lr
	...

000b6268 <_Z17acquireWireBufferv>:
{
   b6268:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b626a:	4b0a      	ldr	r3, [pc, #40]	; (b6294 <_Z17acquireWireBufferv+0x2c>)
   b626c:	6003      	str	r3, [r0, #0]
   b626e:	2301      	movs	r3, #1
{
   b6270:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6272:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6274:	4908      	ldr	r1, [pc, #32]	; (b6298 <_Z17acquireWireBufferv+0x30>)
   b6276:	2020      	movs	r0, #32
   b6278:	f000 f834 	bl	b62e4 <_ZnajRKSt9nothrow_t>
	};
   b627c:	2520      	movs	r5, #32
   b627e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6280:	4905      	ldr	r1, [pc, #20]	; (b6298 <_Z17acquireWireBufferv+0x30>)
	};
   b6282:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6284:	4628      	mov	r0, r5
   b6286:	f000 f82d 	bl	b62e4 <_ZnajRKSt9nothrow_t>
	};
   b628a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b628e:	4620      	mov	r0, r4
   b6290:	bd38      	pop	{r3, r4, r5, pc}
   b6292:	bf00      	nop
   b6294:	00010018 	.word	0x00010018
   b6298:	000b6810 	.word	0x000b6810

000b629c <_Z19__fetch_global_Wirev>:
{
   b629c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b629e:	4d0e      	ldr	r5, [pc, #56]	; (b62d8 <_Z19__fetch_global_Wirev+0x3c>)
   b62a0:	7829      	ldrb	r1, [r5, #0]
   b62a2:	f3bf 8f5b 	dmb	ish
   b62a6:	f011 0401 	ands.w	r4, r1, #1
{
   b62aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b62ac:	d111      	bne.n	b62d2 <_Z19__fetch_global_Wirev+0x36>
   b62ae:	4628      	mov	r0, r5
   b62b0:	f7fd fef5 	bl	b409e <__cxa_guard_acquire>
   b62b4:	b168      	cbz	r0, b62d2 <_Z19__fetch_global_Wirev+0x36>
   b62b6:	4668      	mov	r0, sp
   b62b8:	f7ff ffd6 	bl	b6268 <_Z17acquireWireBufferv>
   b62bc:	466a      	mov	r2, sp
   b62be:	4621      	mov	r1, r4
   b62c0:	4806      	ldr	r0, [pc, #24]	; (b62dc <_Z19__fetch_global_Wirev+0x40>)
   b62c2:	f7ff fdc3 	bl	b5e4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b62c6:	4628      	mov	r0, r5
   b62c8:	f7fd feee 	bl	b40a8 <__cxa_guard_release>
   b62cc:	4804      	ldr	r0, [pc, #16]	; (b62e0 <_Z19__fetch_global_Wirev+0x44>)
   b62ce:	f000 f80e 	bl	b62ee <atexit>
	return wire;
}
   b62d2:	4802      	ldr	r0, [pc, #8]	; (b62dc <_Z19__fetch_global_Wirev+0x40>)
   b62d4:	b007      	add	sp, #28
   b62d6:	bd30      	pop	{r4, r5, pc}
   b62d8:	2003e744 	.word	0x2003e744
   b62dc:	2003e748 	.word	0x2003e748
   b62e0:	000b6265 	.word	0x000b6265

000b62e4 <_ZnajRKSt9nothrow_t>:
   b62e4:	f7fd bed7 	b.w	b4096 <_Znaj>

000b62e8 <_ZSt25__throw_bad_function_callv>:
   b62e8:	b508      	push	{r3, lr}
   b62ea:	f7fe ff19 	bl	b5120 <abort>

000b62ee <atexit>:
   b62ee:	2300      	movs	r3, #0
   b62f0:	4601      	mov	r1, r0
   b62f2:	461a      	mov	r2, r3
   b62f4:	4618      	mov	r0, r3
   b62f6:	f000 b899 	b.w	b642c <__register_exitproc>

000b62fa <ldiv>:
   b62fa:	2900      	cmp	r1, #0
   b62fc:	b510      	push	{r4, lr}
   b62fe:	fb91 f4f2 	sdiv	r4, r1, r2
   b6302:	fb02 1314 	mls	r3, r2, r4, r1
   b6306:	db06      	blt.n	b6316 <ldiv+0x1c>
   b6308:	2b00      	cmp	r3, #0
   b630a:	da01      	bge.n	b6310 <ldiv+0x16>
   b630c:	3401      	adds	r4, #1
   b630e:	1a9b      	subs	r3, r3, r2
   b6310:	e9c0 4300 	strd	r4, r3, [r0]
   b6314:	bd10      	pop	{r4, pc}
   b6316:	2b00      	cmp	r3, #0
   b6318:	bfc4      	itt	gt
   b631a:	f104 34ff 	addgt.w	r4, r4, #4294967295
   b631e:	189b      	addgt	r3, r3, r2
   b6320:	e7f6      	b.n	b6310 <ldiv+0x16>

000b6322 <memcpy>:
   b6322:	440a      	add	r2, r1
   b6324:	4291      	cmp	r1, r2
   b6326:	f100 33ff 	add.w	r3, r0, #4294967295
   b632a:	d100      	bne.n	b632e <memcpy+0xc>
   b632c:	4770      	bx	lr
   b632e:	b510      	push	{r4, lr}
   b6330:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6334:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6338:	4291      	cmp	r1, r2
   b633a:	d1f9      	bne.n	b6330 <memcpy+0xe>
   b633c:	bd10      	pop	{r4, pc}

000b633e <memmove>:
   b633e:	4288      	cmp	r0, r1
   b6340:	b510      	push	{r4, lr}
   b6342:	eb01 0402 	add.w	r4, r1, r2
   b6346:	d902      	bls.n	b634e <memmove+0x10>
   b6348:	4284      	cmp	r4, r0
   b634a:	4623      	mov	r3, r4
   b634c:	d807      	bhi.n	b635e <memmove+0x20>
   b634e:	1e43      	subs	r3, r0, #1
   b6350:	42a1      	cmp	r1, r4
   b6352:	d008      	beq.n	b6366 <memmove+0x28>
   b6354:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6358:	f803 2f01 	strb.w	r2, [r3, #1]!
   b635c:	e7f8      	b.n	b6350 <memmove+0x12>
   b635e:	4402      	add	r2, r0
   b6360:	4601      	mov	r1, r0
   b6362:	428a      	cmp	r2, r1
   b6364:	d100      	bne.n	b6368 <memmove+0x2a>
   b6366:	bd10      	pop	{r4, pc}
   b6368:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b636c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6370:	e7f7      	b.n	b6362 <memmove+0x24>

000b6372 <memset>:
   b6372:	4402      	add	r2, r0
   b6374:	4603      	mov	r3, r0
   b6376:	4293      	cmp	r3, r2
   b6378:	d100      	bne.n	b637c <memset+0xa>
   b637a:	4770      	bx	lr
   b637c:	f803 1b01 	strb.w	r1, [r3], #1
   b6380:	e7f9      	b.n	b6376 <memset+0x4>
	...

000b6384 <srand>:
   b6384:	b538      	push	{r3, r4, r5, lr}
   b6386:	4b10      	ldr	r3, [pc, #64]	; (b63c8 <srand+0x44>)
   b6388:	681d      	ldr	r5, [r3, #0]
   b638a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b638c:	4604      	mov	r4, r0
   b638e:	b9b3      	cbnz	r3, b63be <srand+0x3a>
   b6390:	2018      	movs	r0, #24
   b6392:	f7fe fead 	bl	b50f0 <malloc>
   b6396:	4602      	mov	r2, r0
   b6398:	63a8      	str	r0, [r5, #56]	; 0x38
   b639a:	b920      	cbnz	r0, b63a6 <srand+0x22>
   b639c:	4b0b      	ldr	r3, [pc, #44]	; (b63cc <srand+0x48>)
   b639e:	480c      	ldr	r0, [pc, #48]	; (b63d0 <srand+0x4c>)
   b63a0:	2142      	movs	r1, #66	; 0x42
   b63a2:	f7fe fecd 	bl	b5140 <__assert_func>
   b63a6:	490b      	ldr	r1, [pc, #44]	; (b63d4 <srand+0x50>)
   b63a8:	4b0b      	ldr	r3, [pc, #44]	; (b63d8 <srand+0x54>)
   b63aa:	e9c0 1300 	strd	r1, r3, [r0]
   b63ae:	4b0b      	ldr	r3, [pc, #44]	; (b63dc <srand+0x58>)
   b63b0:	6083      	str	r3, [r0, #8]
   b63b2:	230b      	movs	r3, #11
   b63b4:	8183      	strh	r3, [r0, #12]
   b63b6:	2100      	movs	r1, #0
   b63b8:	2001      	movs	r0, #1
   b63ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b63be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b63c0:	2200      	movs	r2, #0
   b63c2:	611c      	str	r4, [r3, #16]
   b63c4:	615a      	str	r2, [r3, #20]
   b63c6:	bd38      	pop	{r3, r4, r5, pc}
   b63c8:	2003dfc0 	.word	0x2003dfc0
   b63cc:	000b6811 	.word	0x000b6811
   b63d0:	000b6828 	.word	0x000b6828
   b63d4:	abcd330e 	.word	0xabcd330e
   b63d8:	e66d1234 	.word	0xe66d1234
   b63dc:	0005deec 	.word	0x0005deec

000b63e0 <strdup>:
   b63e0:	4b02      	ldr	r3, [pc, #8]	; (b63ec <strdup+0xc>)
   b63e2:	4601      	mov	r1, r0
   b63e4:	6818      	ldr	r0, [r3, #0]
   b63e6:	f000 b803 	b.w	b63f0 <_strdup_r>
   b63ea:	bf00      	nop
   b63ec:	2003dfc0 	.word	0x2003dfc0

000b63f0 <_strdup_r>:
   b63f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b63f2:	4604      	mov	r4, r0
   b63f4:	4608      	mov	r0, r1
   b63f6:	460d      	mov	r5, r1
   b63f8:	f000 f80f 	bl	b641a <strlen>
   b63fc:	1c42      	adds	r2, r0, #1
   b63fe:	4611      	mov	r1, r2
   b6400:	4620      	mov	r0, r4
   b6402:	9201      	str	r2, [sp, #4]
   b6404:	f7fe fe94 	bl	b5130 <_malloc_r>
   b6408:	4604      	mov	r4, r0
   b640a:	b118      	cbz	r0, b6414 <_strdup_r+0x24>
   b640c:	9a01      	ldr	r2, [sp, #4]
   b640e:	4629      	mov	r1, r5
   b6410:	f7ff ff87 	bl	b6322 <memcpy>
   b6414:	4620      	mov	r0, r4
   b6416:	b003      	add	sp, #12
   b6418:	bd30      	pop	{r4, r5, pc}

000b641a <strlen>:
   b641a:	4603      	mov	r3, r0
   b641c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6420:	2a00      	cmp	r2, #0
   b6422:	d1fb      	bne.n	b641c <strlen+0x2>
   b6424:	1a18      	subs	r0, r3, r0
   b6426:	3801      	subs	r0, #1
   b6428:	4770      	bx	lr
	...

000b642c <__register_exitproc>:
   b642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6430:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b64ec <__register_exitproc+0xc0>
   b6434:	4606      	mov	r6, r0
   b6436:	f8d8 0000 	ldr.w	r0, [r8]
   b643a:	461f      	mov	r7, r3
   b643c:	460d      	mov	r5, r1
   b643e:	4691      	mov	r9, r2
   b6440:	f000 f856 	bl	b64f0 <__retarget_lock_acquire_recursive>
   b6444:	4b25      	ldr	r3, [pc, #148]	; (b64dc <__register_exitproc+0xb0>)
   b6446:	681c      	ldr	r4, [r3, #0]
   b6448:	b934      	cbnz	r4, b6458 <__register_exitproc+0x2c>
   b644a:	4c25      	ldr	r4, [pc, #148]	; (b64e0 <__register_exitproc+0xb4>)
   b644c:	601c      	str	r4, [r3, #0]
   b644e:	4b25      	ldr	r3, [pc, #148]	; (b64e4 <__register_exitproc+0xb8>)
   b6450:	b113      	cbz	r3, b6458 <__register_exitproc+0x2c>
   b6452:	681b      	ldr	r3, [r3, #0]
   b6454:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6458:	6863      	ldr	r3, [r4, #4]
   b645a:	2b1f      	cmp	r3, #31
   b645c:	dd07      	ble.n	b646e <__register_exitproc+0x42>
   b645e:	f8d8 0000 	ldr.w	r0, [r8]
   b6462:	f000 f847 	bl	b64f4 <__retarget_lock_release_recursive>
   b6466:	f04f 30ff 	mov.w	r0, #4294967295
   b646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b646e:	b34e      	cbz	r6, b64c4 <__register_exitproc+0x98>
   b6470:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6474:	b988      	cbnz	r0, b649a <__register_exitproc+0x6e>
   b6476:	4b1c      	ldr	r3, [pc, #112]	; (b64e8 <__register_exitproc+0xbc>)
   b6478:	b923      	cbnz	r3, b6484 <__register_exitproc+0x58>
   b647a:	f8d8 0000 	ldr.w	r0, [r8]
   b647e:	f000 f838 	bl	b64f2 <__retarget_lock_release>
   b6482:	e7f0      	b.n	b6466 <__register_exitproc+0x3a>
   b6484:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6488:	f7fe fe32 	bl	b50f0 <malloc>
   b648c:	2800      	cmp	r0, #0
   b648e:	d0f4      	beq.n	b647a <__register_exitproc+0x4e>
   b6490:	2300      	movs	r3, #0
   b6492:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6496:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b649a:	6863      	ldr	r3, [r4, #4]
   b649c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b64a0:	2201      	movs	r2, #1
   b64a2:	409a      	lsls	r2, r3
   b64a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b64a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b64ac:	4313      	orrs	r3, r2
   b64ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b64b2:	2e02      	cmp	r6, #2
   b64b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b64b8:	bf02      	ittt	eq
   b64ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b64be:	4313      	orreq	r3, r2
   b64c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b64c4:	6863      	ldr	r3, [r4, #4]
   b64c6:	f8d8 0000 	ldr.w	r0, [r8]
   b64ca:	1c5a      	adds	r2, r3, #1
   b64cc:	3302      	adds	r3, #2
   b64ce:	6062      	str	r2, [r4, #4]
   b64d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b64d4:	f000 f80e 	bl	b64f4 <__retarget_lock_release_recursive>
   b64d8:	2000      	movs	r0, #0
   b64da:	e7c6      	b.n	b646a <__register_exitproc+0x3e>
   b64dc:	2003e7e8 	.word	0x2003e7e8
   b64e0:	2003e75c 	.word	0x2003e75c
   b64e4:	00000000 	.word	0x00000000
   b64e8:	000b50f1 	.word	0x000b50f1
   b64ec:	2003e024 	.word	0x2003e024

000b64f0 <__retarget_lock_acquire_recursive>:
   b64f0:	4770      	bx	lr

000b64f2 <__retarget_lock_release>:
   b64f2:	4770      	bx	lr

000b64f4 <__retarget_lock_release_recursive>:
   b64f4:	4770      	bx	lr

000b64f6 <link_code_end>:
	...

000b64f8 <dynalib_user>:
   b64f8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6508:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   b6518:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   b6528:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   b6538:	6f70 6577 2e72 4100 7474 6361 2068 6573     power..Attach se
   b6548:	736e 726f 7420 206f 6966 676e 7265 7720     nsor to finger w
   b6558:	7469 2068 7572 6262 7265 6220 6e61 2e64     ith rubber band.
   b6568:	5020 6572 7373 6120 796e 6b20 7965 7420      Press any key t
   b6578:	206f 7473 7261 2074 6f63 766e 7265 6973     o start conversi
   b6588:	6e6f 7200 6465 003d 202c 7269 003d 202c     on.red=., ir=., 
   b6598:	5248 003d 202c 5248 6176 696c 3d64 2c00     HR=., HRvalid=.,
   b65a8:	5320 4f50 3d32 2c00 5320 4f50 5632 6c61      SPO2=., SPO2Val
   b65b8:	6469 003d 6568 7261 5274 7461 0065 7073     id=.heartRate.sp
   b65c8:	3230                                         02.

000b65cb <_ZL14uch_spo2_table>:
   b65cb:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b65db:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b65eb:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b65fb:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b660b:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b661b:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b662b:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b663b:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b664b:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b665b:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b666b:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b667b:	0709 0506 0203 0001                          .........

000b6684 <_ZTVN5spark13EthernetClassE>:
	...
   b668c:	51bf 000b 51b5 000b 51ab 000b 51a1 000b     .Q...Q...Q...Q..
   b669c:	5195 000b 5189 000b 5fcd 000b 5fd5 000b     .Q...Q..._..._..
   b66ac:	517d 000b 5175 000b 516b 000b 5161 000b     }Q..uQ..kQ..aQ..
   b66bc:	6005 000b 7061 0070 5925 252d 2d6d 6425     .`..app.%Y-%m-%d
   b66cc:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b66dc:	6d69 0065                                   ime.

000b66e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b66e8:	5601 000b 5607 000b 5645 000b 5615 000b     .V...V..EV...V..
   b66f8:	5603 000b                                   .V..

000b66fc <_ZTV9IPAddress>:
	...
   b6704:	5b41 000b 5b31 000b 5b33 000b               A[..1[..3[..

000b6710 <_ZTV9USBSerial>:
	...
   b6718:	5c27 000b 5c8f 000b 5c65 000b 53c5 000b     '\...\..e\...S..
   b6728:	5c57 000b 5c29 000b 5c39 000b 5c89 000b     W\..)\..9\...\..
   b6738:	5c49 000b 5c21 000b                         I\..!\..

000b6740 <_ZTV11USARTSerial>:
	...
   b6748:	5d29 000b 5d95 000b 5d6d 000b 53c5 000b     )]...]..m]...S..
   b6758:	5d3d 000b 5d59 000b 5d4b 000b 5d67 000b     =]..Y]..K]..g]..
   b6768:	5d2b 000b 5d2f 000b                         +]../]..

000b6770 <_ZTV7TwoWire>:
	...
   b6778:	5df5 000b 5e3f 000b 5e17 000b 5df7 000b     .]..?^...^...]..
   b6788:	5e1f 000b 5e27 000b 5e2f 000b 5e37 000b     .^..'^../^..7^..

000b6798 <_ZTVN5spark9WiFiClassE>:
	...
   b67a0:	5f6f 000b 5f65 000b 5f5b 000b 5f11 000b     o_..e_..[_..._..
   b67b0:	5f4f 000b 5f43 000b 5fcd 000b 5fd5 000b     O_..C_..._..._..
   b67c0:	5f37 000b 5f2f 000b 5f25 000b 5f1b 000b     7_../_..%_..._..
   b67d0:	6005 000b                                   .`..

000b67d4 <_ZTVN5spark12NetworkClassE>:
	...
   b67dc:	5f8d 000b 5f97 000b 5fa1 000b 5fab 000b     ._..._..._..._..
   b67ec:	5fb5 000b 5fc1 000b 5fcd 000b 5fd5 000b     ._..._..._..._..
   b67fc:	5fdd 000b 5fe9 000b 5ff1 000b 5ffb 000b     ._..._..._..._..
   b680c:	6005 000b                                   .`..

000b6810 <_ZSt7nothrow>:
   b6810:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6820:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6830:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6840:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6850:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b6860:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6870:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6880:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6890:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b68a0:	646e 632e                                    nd.c.

000b68a5 <link_const_variable_data_end>:
   b68a5:	00          	.byte	0x00
	...

000b68a8 <link_constructors_location>:
   b68a8:	000b4435 	.word	0x000b4435
   b68ac:	000b51c9 	.word	0x000b51c9
   b68b0:	000b51f1 	.word	0x000b51f1
   b68b4:	000b53b5 	.word	0x000b53b5
   b68b8:	000b5491 	.word	0x000b5491
   b68bc:	000b54a1 	.word	0x000b54a1
   b68c0:	000b54bd 	.word	0x000b54bd
   b68c4:	000b5f79 	.word	0x000b5f79
   b68c8:	000b60dd 	.word	0x000b60dd

000b68cc <link_constructors_end>:
   b68cc:	00000000 	.word	0x00000000
