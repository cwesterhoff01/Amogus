
c:/Users/ashto/OneDrive/Documents/Particle/ece413_final_project/target/5.1.0/argon/ece413_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002008  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6024  000b6024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000070  2003dfbc  000b6048  0000dfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007c4  2003e02c  2003e02c  0001e02c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b60b8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b60bc  000b60bc  000160bc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b60c2  000b60c2  000160c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b60e6  000b60e6  000160e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f9b57  00000000  00000000  000160ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010e04  00000000  00000000  0010fc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00032ce8  00000000  00000000  00120a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000027c8  00000000  00000000  0015372d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009140  00000000  00000000  00155ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000395a7  00000000  00000000  0015f035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003abf2  00000000  00000000  001985dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00131d30  00000000  00000000  001d31ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006d14  00000000  00000000  00304f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fd59 	bl	b5af4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fd7b 	bl	b5b44 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003dfbc 	.word	0x2003dfbc
   b4058:	000b6048 	.word	0x000b6048
   b405c:	2003e02c 	.word	0x2003e02c
   b4060:	2003e02c 	.word	0x2003e02c
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 f951 	bl	b5314 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b6000 	.word	0x000b6000
   b408c:	000b6024 	.word	0x000b6024

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b814 	b.w	b40bc <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f85f 	bl	b4158 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 b8f1 	b.w	b5284 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 bfc9 	b.w	b5038 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 bfcf 	b.w	b5048 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr
	...

000b40bc <setup>:

byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read

void setup()
{
   b40bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:
   b40be:	f001 fa31 	bl	b5524 <_Z16_fetch_usbserialv>
   b40c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40c6:	f001 fa21 	bl	b550c <_ZN9USBSerial5beginEl>

  pinMode(pulseLED, OUTPUT);
   b40ca:	4b1d      	ldr	r3, [pc, #116]	; (b4140 <setup+0x84>)
   b40cc:	2101      	movs	r1, #1
   b40ce:	7818      	ldrb	r0, [r3, #0]
   b40d0:	f001 fc50 	bl	b5974 <pinMode>
  pinMode(readLED, OUTPUT);
   b40d4:	4b1b      	ldr	r3, [pc, #108]	; (b4144 <setup+0x88>)
   b40d6:	2101      	movs	r1, #1
   b40d8:	7818      	ldrb	r0, [r3, #0]
   b40da:	f001 fc4b 	bl	b5974 <pinMode>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
   b40de:	f001 fcdd 	bl	b5a9c <_Z19__fetch_global_Wirev>
   b40e2:	4a19      	ldr	r2, [pc, #100]	; (b4148 <setup+0x8c>)
   b40e4:	4601      	mov	r1, r0
   b40e6:	2357      	movs	r3, #87	; 0x57
   b40e8:	4818      	ldr	r0, [pc, #96]	; (b414c <setup+0x90>)
   b40ea:	f000 fa8d 	bl	b4608 <_ZN8MAX301055beginER7TwoWiremh>
   b40ee:	b928      	cbnz	r0, b40fc <setup+0x40>
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
   b40f0:	f001 fa18 	bl	b5524 <_Z16_fetch_usbserialv>
   b40f4:	4916      	ldr	r1, [pc, #88]	; (b4150 <setup+0x94>)
   b40f6:	f001 f866 	bl	b51c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    while (1);
   b40fa:	e7fe      	b.n	b40fa <setup+0x3e>
  }

  Serial.println(F("Attach sensor to finger with rubber band. Press any key to start conversion"));
   b40fc:	f001 fa12 	bl	b5524 <_Z16_fetch_usbserialv>
   b4100:	4914      	ldr	r1, [pc, #80]	; (b4154 <setup+0x98>)
   b4102:	f001 f860 	bl	b51c6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  while (Serial.available() == 0) ; //wait until user presses a key
   b4106:	f001 fa0d 	bl	b5524 <_Z16_fetch_usbserialv>
   b410a:	6803      	ldr	r3, [r0, #0]
   b410c:	691b      	ldr	r3, [r3, #16]
   b410e:	4798      	blx	r3
   b4110:	2800      	cmp	r0, #0
   b4112:	d0f8      	beq.n	b4106 <setup+0x4a>
  Serial.read();
   b4114:	f001 fa06 	bl	b5524 <_Z16_fetch_usbserialv>
   b4118:	6803      	ldr	r3, [r0, #0]
   b411a:	695b      	ldr	r3, [r3, #20]
   b411c:	4798      	blx	r3
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
   b411e:	f240 139b 	movw	r3, #411	; 0x19b
   b4122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   b4126:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b412a:	2364      	movs	r3, #100	; 0x64
   b412c:	9300      	str	r3, [sp, #0]
   b412e:	4807      	ldr	r0, [pc, #28]	; (b414c <setup+0x90>)
   b4130:	2302      	movs	r3, #2
   b4132:	2204      	movs	r2, #4
   b4134:	213c      	movs	r1, #60	; 0x3c
   b4136:	f000 fb27 	bl	b4788 <_ZN8MAX301055setupEhhhiii>
}
   b413a:	b005      	add	sp, #20
   b413c:	f85d fb04 	ldr.w	pc, [sp], #4
   b4140:	2003dfbc 	.word	0x2003dfbc
   b4144:	2003dfbd 	.word	0x2003dfbd
   b4148:	00061a80 	.word	0x00061a80
   b414c:	2003e1c4 	.word	0x2003e1c4
   b4150:	000b5c90 	.word	0x000b5c90
   b4154:	000b5cc3 	.word	0x000b5cc3

000b4158 <loop>:

void loop()
{
   b4158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b415c:	4e86      	ldr	r6, [pc, #536]	; (b4378 <loop+0x220>)

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
   b415e:	4d87      	ldr	r5, [pc, #540]	; (b437c <loop+0x224>)
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();
   b4160:	f8df a22c 	ldr.w	sl, [pc, #556]	; b4390 <loop+0x238>
    irBuffer[i] = particleSensor.getIR();
   b4164:	f8df 922c 	ldr.w	r9, [pc, #556]	; b4394 <loop+0x23c>
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b4168:	2364      	movs	r3, #100	; 0x64
{
   b416a:	b087      	sub	sp, #28
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
   b416c:	6033      	str	r3, [r6, #0]
   b416e:	2700      	movs	r7, #0
  for (byte i = 0 ; i < bufferLength ; i++)
   b4170:	6831      	ldr	r1, [r6, #0]
   b4172:	b2fc      	uxtb	r4, r7
   b4174:	428c      	cmp	r4, r1
   b4176:	da32      	bge.n	b41de <loop+0x86>
    while (particleSensor.available() == false) //do we have new data?
   b4178:	4628      	mov	r0, r5
   b417a:	f000 f92a 	bl	b43d2 <_ZN8MAX301059availableEv>
   b417e:	b918      	cbnz	r0, b4188 <loop+0x30>
      particleSensor.check(); //Check the sensor for new data
   b4180:	4628      	mov	r0, r5
   b4182:	f000 f968 	bl	b4456 <_ZN8MAX301055checkEv>
    while (particleSensor.available() == false) //do we have new data?
   b4186:	e7f7      	b.n	b4178 <loop+0x20>
    redBuffer[i] = particleSensor.getRed();
   b4188:	4628      	mov	r0, r5
   b418a:	f000 fa19 	bl	b45c0 <_ZN8MAX301056getRedEv>
   b418e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    irBuffer[i] = particleSensor.getIR();
   b4192:	4628      	mov	r0, r5
   b4194:	f000 fa20 	bl	b45d8 <_ZN8MAX301055getIREv>
   b4198:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
   b419c:	4628      	mov	r0, r5
   b419e:	f000 f925 	bl	b43ec <_ZN8MAX3010510nextSampleEv>

    Serial.print(F("red="));
   b41a2:	f001 f9bf 	bl	b5524 <_Z16_fetch_usbserialv>
   b41a6:	4976      	ldr	r1, [pc, #472]	; (b4380 <loop+0x228>)
   b41a8:	f000 fff3 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.print(redBuffer[i], DEC);
   b41ac:	f001 f9ba 	bl	b5524 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41b0:	220a      	movs	r2, #10
   b41b2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
   b41b6:	f001 f808 	bl	b51ca <_ZN5Print11printNumberEmh>
    Serial.print(F(", ir="));
   b41ba:	f001 f9b3 	bl	b5524 <_Z16_fetch_usbserialv>
   b41be:	4971      	ldr	r1, [pc, #452]	; (b4384 <loop+0x22c>)
   b41c0:	f000 ffe7 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(irBuffer[i], DEC);
   b41c4:	f001 f9ae 	bl	b5524 <_Z16_fetch_usbserialv>
   b41c8:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
   b41cc:	4680      	mov	r8, r0
   b41ce:	220a      	movs	r2, #10
   b41d0:	f000 fffb 	bl	b51ca <_ZN5Print11printNumberEmh>
        n += println();
   b41d4:	4640      	mov	r0, r8
   b41d6:	f000 ffe0 	bl	b519a <_ZN5Print7printlnEv>
  for (byte i = 0 ; i < bufferLength ; i++)
   b41da:	3701      	adds	r7, #1
   b41dc:	e7c8      	b.n	b4170 <loop+0x18>
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b41de:	f8df 91d4 	ldr.w	r9, [pc, #468]	; b43b4 <loop+0x25c>
   b41e2:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b43b8 <loop+0x260>
   b41e6:	4f68      	ldr	r7, [pc, #416]	; (b4388 <loop+0x230>)
   b41e8:	4b68      	ldr	r3, [pc, #416]	; (b438c <loop+0x234>)
   b41ea:	4a69      	ldr	r2, [pc, #420]	; (b4390 <loop+0x238>)
   b41ec:	f8cd 9008 	str.w	r9, [sp, #8]
   b41f0:	f8cd 8004 	str.w	r8, [sp, #4]
   b41f4:	9700      	str	r7, [sp, #0]
   b41f6:	4867      	ldr	r0, [pc, #412]	; (b4394 <loop+0x23c>)
   b41f8:	f8df b1c0 	ldr.w	fp, [pc, #448]	; b43bc <loop+0x264>
   b41fc:	f8df a1c0 	ldr.w	sl, [pc, #448]	; b43c0 <loop+0x268>
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
   b4200:	4d5e      	ldr	r5, [pc, #376]	; (b437c <loop+0x224>)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b4202:	f000 fc1f 	bl	b4a44 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>
      redBuffer[i - 25] = redBuffer[i];
   b4206:	4964      	ldr	r1, [pc, #400]	; (b4398 <loop+0x240>)
   b4208:	f44f 7296 	mov.w	r2, #300	; 0x12c
   b420c:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
   b4210:	f001 fc7e 	bl	b5b10 <memmove>
      irBuffer[i - 25] = irBuffer[i];
   b4214:	4961      	ldr	r1, [pc, #388]	; (b439c <loop+0x244>)
   b4216:	f44f 7296 	mov.w	r2, #300	; 0x12c
   b421a:	f1a1 0064 	sub.w	r0, r1, #100	; 0x64
   b421e:	f001 fc77 	bl	b5b10 <memmove>
   b4222:	2319      	movs	r3, #25
   b4224:	9304      	str	r3, [sp, #16]
      while (particleSensor.available() == false) //do we have new data?
   b4226:	4628      	mov	r0, r5
   b4228:	f000 f8d3 	bl	b43d2 <_ZN8MAX301059availableEv>
   b422c:	b918      	cbnz	r0, b4236 <loop+0xde>
        particleSensor.check(); //Check the sensor for new data
   b422e:	4628      	mov	r0, r5
   b4230:	f000 f911 	bl	b4456 <_ZN8MAX301055checkEv>
      while (particleSensor.available() == false) //do we have new data?
   b4234:	e7f7      	b.n	b4226 <loop+0xce>

      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read
   b4236:	4b5a      	ldr	r3, [pc, #360]	; (b43a0 <loop+0x248>)
   b4238:	781c      	ldrb	r4, [r3, #0]
   b423a:	4620      	mov	r0, r4
   b423c:	f001 fbc4 	bl	b59c8 <digitalRead>
   b4240:	fab0 f180 	clz	r1, r0
   b4244:	0949      	lsrs	r1, r1, #5
   b4246:	4620      	mov	r0, r4
   b4248:	f001 fba5 	bl	b5996 <digitalWrite>

      redBuffer[i] = particleSensor.getRed();
   b424c:	4628      	mov	r0, r5
   b424e:	f000 f9b7 	bl	b45c0 <_ZN8MAX301056getRedEv>
   b4252:	f8cb 0000 	str.w	r0, [fp]
      irBuffer[i] = particleSensor.getIR();
   b4256:	4628      	mov	r0, r5
   b4258:	f000 f9be 	bl	b45d8 <_ZN8MAX301055getIREv>
   b425c:	f8ca 0000 	str.w	r0, [sl]
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
   b4260:	4628      	mov	r0, r5
   b4262:	f000 f8c3 	bl	b43ec <_ZN8MAX3010510nextSampleEv>

      //send samples and calculation result to terminal program through UART
      Serial.print(F("red="));
   b4266:	f001 f95d 	bl	b5524 <_Z16_fetch_usbserialv>
   b426a:	4945      	ldr	r1, [pc, #276]	; (b4380 <loop+0x228>)
   b426c:	f000 ff91 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(redBuffer[i], DEC);
   b4270:	f001 f958 	bl	b5524 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4274:	220a      	movs	r2, #10
   b4276:	f85b 1b04 	ldr.w	r1, [fp], #4
   b427a:	f000 ffa6 	bl	b51ca <_ZN5Print11printNumberEmh>
      Serial.print(F(", ir="));
   b427e:	f001 f951 	bl	b5524 <_Z16_fetch_usbserialv>
   b4282:	4940      	ldr	r1, [pc, #256]	; (b4384 <loop+0x22c>)
   b4284:	f000 ff85 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(irBuffer[i], DEC);
   b4288:	f001 f94c 	bl	b5524 <_Z16_fetch_usbserialv>
   b428c:	220a      	movs	r2, #10
   b428e:	f85a 1b04 	ldr.w	r1, [sl], #4
   b4292:	f000 ff9a 	bl	b51ca <_ZN5Print11printNumberEmh>

      Serial.print(F(", HR="));
   b4296:	f001 f945 	bl	b5524 <_Z16_fetch_usbserialv>
   b429a:	4942      	ldr	r1, [pc, #264]	; (b43a4 <loop+0x24c>)
   b429c:	f000 ff79 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(heartRate, DEC);
   b42a0:	f001 f940 	bl	b5524 <_Z16_fetch_usbserialv>
   b42a4:	f8d8 2000 	ldr.w	r2, [r8]
        if (n < 0 && base == 10) {
   b42a8:	2a00      	cmp	r2, #0
   b42aa:	4604      	mov	r4, r0
   b42ac:	da5c      	bge.n	b4368 <loop+0x210>
            t = print('-');
   b42ae:	212d      	movs	r1, #45	; 0x2d
   b42b0:	9205      	str	r2, [sp, #20]
   b42b2:	f000 ff6b 	bl	b518c <_ZN5Print5printEc>
            val = -n;
   b42b6:	9a05      	ldr	r2, [sp, #20]
   b42b8:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b42ba:	220a      	movs	r2, #10
   b42bc:	4620      	mov	r0, r4
   b42be:	f000 ff84 	bl	b51ca <_ZN5Print11printNumberEmh>

      Serial.print(F(", HRvalid="));
   b42c2:	f001 f92f 	bl	b5524 <_Z16_fetch_usbserialv>
   b42c6:	4938      	ldr	r1, [pc, #224]	; (b43a8 <loop+0x250>)
   b42c8:	f000 ff63 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(validHeartRate, DEC);
   b42cc:	f001 f92a 	bl	b5524 <_Z16_fetch_usbserialv>
   b42d0:	f999 2000 	ldrsb.w	r2, [r9]
        if (n < 0 && base == 10) {
   b42d4:	2a00      	cmp	r2, #0
   b42d6:	4604      	mov	r4, r0
   b42d8:	da48      	bge.n	b436c <loop+0x214>
            t = print('-');
   b42da:	212d      	movs	r1, #45	; 0x2d
   b42dc:	9205      	str	r2, [sp, #20]
   b42de:	f000 ff55 	bl	b518c <_ZN5Print5printEc>
            val = -n;
   b42e2:	9a05      	ldr	r2, [sp, #20]
   b42e4:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b42e6:	220a      	movs	r2, #10
   b42e8:	4620      	mov	r0, r4
   b42ea:	f000 ff6e 	bl	b51ca <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2="));
   b42ee:	f001 f919 	bl	b5524 <_Z16_fetch_usbserialv>
   b42f2:	492e      	ldr	r1, [pc, #184]	; (b43ac <loop+0x254>)
   b42f4:	f000 ff4d 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.print(spo2, DEC);
   b42f8:	f001 f914 	bl	b5524 <_Z16_fetch_usbserialv>
   b42fc:	4a23      	ldr	r2, [pc, #140]	; (b438c <loop+0x234>)
   b42fe:	6812      	ldr	r2, [r2, #0]
        if (n < 0 && base == 10) {
   b4300:	2a00      	cmp	r2, #0
   b4302:	4604      	mov	r4, r0
   b4304:	da34      	bge.n	b4370 <loop+0x218>
            t = print('-');
   b4306:	212d      	movs	r1, #45	; 0x2d
   b4308:	9205      	str	r2, [sp, #20]
   b430a:	f000 ff3f 	bl	b518c <_ZN5Print5printEc>
            val = -n;
   b430e:	9a05      	ldr	r2, [sp, #20]
   b4310:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b4312:	220a      	movs	r2, #10
   b4314:	4620      	mov	r0, r4
   b4316:	f000 ff58 	bl	b51ca <_ZN5Print11printNumberEmh>

      Serial.print(F(", SPO2Valid="));
   b431a:	f001 f903 	bl	b5524 <_Z16_fetch_usbserialv>
   b431e:	4924      	ldr	r1, [pc, #144]	; (b43b0 <loop+0x258>)
   b4320:	f000 ff37 	bl	b5192 <_ZN5Print5printEPK19__FlashStringHelper>
      Serial.println(validSPO2, DEC);
   b4324:	f001 f8fe 	bl	b5524 <_Z16_fetch_usbserialv>
   b4328:	f997 2000 	ldrsb.w	r2, [r7]
        if (n < 0 && base == 10) {
   b432c:	2a00      	cmp	r2, #0
   b432e:	4604      	mov	r4, r0
   b4330:	da20      	bge.n	b4374 <loop+0x21c>
            t = print('-');
   b4332:	212d      	movs	r1, #45	; 0x2d
   b4334:	9205      	str	r2, [sp, #20]
   b4336:	f000 ff29 	bl	b518c <_ZN5Print5printEc>
            val = -n;
   b433a:	9a05      	ldr	r2, [sp, #20]
   b433c:	4251      	negs	r1, r2
        return printNumber(val, base) + t;
   b433e:	220a      	movs	r2, #10
   b4340:	4620      	mov	r0, r4
   b4342:	f000 ff42 	bl	b51ca <_ZN5Print11printNumberEmh>
        n += println();
   b4346:	4620      	mov	r0, r4
   b4348:	f000 ff27 	bl	b519a <_ZN5Print7printlnEv>
    for (byte i = 75; i < 100; i++)
   b434c:	9b04      	ldr	r3, [sp, #16]
   b434e:	1e5c      	subs	r4, r3, #1
   b4350:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
   b4354:	9304      	str	r3, [sp, #16]
   b4356:	f47f af66 	bne.w	b4226 <loop+0xce>
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
   b435a:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b435e:	4b0b      	ldr	r3, [pc, #44]	; (b438c <loop+0x234>)
   b4360:	4a0b      	ldr	r2, [pc, #44]	; (b4390 <loop+0x238>)
   b4362:	6831      	ldr	r1, [r6, #0]
   b4364:	9700      	str	r7, [sp, #0]
   b4366:	e746      	b.n	b41f6 <loop+0x9e>
            val = n;
   b4368:	4611      	mov	r1, r2
   b436a:	e7a6      	b.n	b42ba <loop+0x162>
   b436c:	4611      	mov	r1, r2
   b436e:	e7ba      	b.n	b42e6 <loop+0x18e>
   b4370:	4611      	mov	r1, r2
   b4372:	e7ce      	b.n	b4312 <loop+0x1ba>
   b4374:	4611      	mov	r1, r2
   b4376:	e7e2      	b.n	b433e <loop+0x1e6>
   b4378:	2003e02c 	.word	0x2003e02c
   b437c:	2003e1c4 	.word	0x2003e1c4
   b4380:	000b5d0f 	.word	0x000b5d0f
   b4384:	000b5d14 	.word	0x000b5d14
   b4388:	2003e395 	.word	0x2003e395
   b438c:	2003e390 	.word	0x2003e390
   b4390:	2003e200 	.word	0x2003e200
   b4394:	2003e034 	.word	0x2003e034
   b4398:	2003e264 	.word	0x2003e264
   b439c:	2003e098 	.word	0x2003e098
   b43a0:	2003dfbd 	.word	0x2003dfbd
   b43a4:	000b5d1a 	.word	0x000b5d1a
   b43a8:	000b5d20 	.word	0x000b5d20
   b43ac:	000b5d2b 	.word	0x000b5d2b
   b43b0:	000b5d33 	.word	0x000b5d33
   b43b4:	2003e394 	.word	0x2003e394
   b43b8:	2003e030 	.word	0x2003e030
   b43bc:	2003e32c 	.word	0x2003e32c
   b43c0:	2003e160 	.word	0x2003e160

000b43c4 <_GLOBAL__sub_I_particleSensor>:
MAX30105 particleSensor;
   b43c4:	4801      	ldr	r0, [pc, #4]	; (b43cc <_GLOBAL__sub_I_particleSensor+0x8>)
   b43c6:	f000 b803 	b.w	b43d0 <_ZN8MAX30105C1Ev>
   b43ca:	bf00      	nop
   b43cc:	2003e1c4 	.word	0x2003e1c4

000b43d0 <_ZN8MAX30105C1Ev>:

static const uint8_t MAX_30105_EXPECTEDPARTID = 0x15;

MAX30105::MAX30105() {
  // Constructor
}
   b43d0:	4770      	bx	lr

000b43d2 <_ZN8MAX301059availableEv>:
//

//Tell caller how many samples are available
uint8_t MAX30105::available(void)
{
  int8_t numberOfSamples = sense.head - sense.tail;
   b43d2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   b43d6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
   b43da:	1a18      	subs	r0, r3, r0
   b43dc:	b2c3      	uxtb	r3, r0
   b43de:	b240      	sxtb	r0, r0
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
   b43e0:	2800      	cmp	r0, #0
   b43e2:	bfbc      	itt	lt
   b43e4:	1d18      	addlt	r0, r3, #4
   b43e6:	b240      	sxtblt	r0, r0

  return (numberOfSamples);
}
   b43e8:	b2c0      	uxtb	r0, r0
   b43ea:	4770      	bx	lr

000b43ec <_ZN8MAX3010510nextSampleEv>:
  return (sense.green[sense.tail]);
}

//Advance the tail
void MAX30105::nextSample(void)
{
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4602      	mov	r2, r0
  if(available()) //Only advance the tail if new data is available
   b43f0:	f7ff ffef 	bl	b43d2 <_ZN8MAX301059availableEv>
   b43f4:	b130      	cbz	r0, b4404 <_ZN8MAX3010510nextSampleEv+0x18>
  {
    sense.tail++;
   b43f6:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   b43fa:	3301      	adds	r3, #1
    sense.tail %= STORAGE_SIZE; //Wrap condition
   b43fc:	f003 0303 	and.w	r3, r3, #3
   b4400:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  }
}
   b4404:	bd08      	pop	{r3, pc}

000b4406 <_ZN8MAX3010513readRegister8Ehh>:
}

//
// Low-level I2C Communication
//
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b4406:	b570      	push	{r4, r5, r6, lr}
   b4408:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b440a:	6800      	ldr	r0, [r0, #0]
uint8_t MAX30105::readRegister8(uint8_t address, uint8_t reg) {
   b440c:	4616      	mov	r6, r2
   b440e:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(address);
   b4410:	f001 f974 	bl	b56fc <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b4414:	6820      	ldr	r0, [r4, #0]
   b4416:	6803      	ldr	r3, [r0, #0]
   b4418:	4631      	mov	r1, r6
   b441a:	689b      	ldr	r3, [r3, #8]
   b441c:	4798      	blx	r3
  _i2cPort->endTransmission(false);
   b441e:	2100      	movs	r1, #0
   b4420:	6820      	ldr	r0, [r4, #0]
   b4422:	f001 f972 	bl	b570a <_ZN7TwoWire15endTransmissionEh>

  _i2cPort->requestFrom((uint8_t)address, (uint8_t)1); // Request 1 byte
   b4426:	6820      	ldr	r0, [r4, #0]
   b4428:	2201      	movs	r2, #1
   b442a:	4629      	mov	r1, r5
   b442c:	f001 f963 	bl	b56f6 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b4430:	6820      	ldr	r0, [r4, #0]
   b4432:	6803      	ldr	r3, [r0, #0]
   b4434:	691b      	ldr	r3, [r3, #16]
   b4436:	4798      	blx	r3
   b4438:	b120      	cbz	r0, b4444 <_ZN8MAX3010513readRegister8Ehh+0x3e>
  {
    return(_i2cPort->read());
   b443a:	6820      	ldr	r0, [r4, #0]
   b443c:	6803      	ldr	r3, [r0, #0]
   b443e:	695b      	ldr	r3, [r3, #20]
   b4440:	4798      	blx	r3
   b4442:	b2c0      	uxtb	r0, r0
  }

  return (0); //Fail

}
   b4444:	bd70      	pop	{r4, r5, r6, pc}

000b4446 <_ZN8MAX3010515getWritePointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOWRITEPTR));
   b4446:	7901      	ldrb	r1, [r0, #4]
   b4448:	2204      	movs	r2, #4
   b444a:	f7ff bfdc 	b.w	b4406 <_ZN8MAX3010513readRegister8Ehh>

000b444e <_ZN8MAX3010514getReadPointerEv>:
  return (readRegister8(_i2caddr, MAX30105_FIFOREADPTR));
   b444e:	7901      	ldrb	r1, [r0, #4]
   b4450:	2206      	movs	r2, #6
   b4452:	f7ff bfd8 	b.w	b4406 <_ZN8MAX3010513readRegister8Ehh>

000b4456 <_ZN8MAX301055checkEv>:
{
   b4456:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b445a:	4604      	mov	r4, r0
  byte readPointer = getReadPointer();
   b445c:	f7ff fff7 	bl	b444e <_ZN8MAX3010514getReadPointerEv>
   b4460:	4605      	mov	r5, r0
  byte writePointer = getWritePointer();
   b4462:	4620      	mov	r0, r4
   b4464:	f7ff ffef 	bl	b4446 <_ZN8MAX3010515getWritePointerEv>
  if (readPointer != writePointer)
   b4468:	4285      	cmp	r5, r0
   b446a:	f000 808e 	beq.w	b458a <_ZN8MAX301055checkEv+0x134>
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b446e:	1b45      	subs	r5, r0, r5
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b4470:	f04f 0157 	mov.w	r1, #87	; 0x57
   b4474:	6820      	ldr	r0, [r4, #0]
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4476:	7966      	ldrb	r6, [r4, #5]
    if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
   b4478:	bf48      	it	mi
   b447a:	3520      	addmi	r5, #32
    _i2cPort->beginTransmission(MAX30105_ADDRESS);
   b447c:	f001 f942 	bl	b5704 <_ZN7TwoWire17beginTransmissionEi>
    _i2cPort->write(MAX30105_FIFODATA);
   b4480:	6820      	ldr	r0, [r4, #0]
   b4482:	6803      	ldr	r3, [r0, #0]
   b4484:	2107      	movs	r1, #7
   b4486:	689b      	ldr	r3, [r3, #8]
   b4488:	4798      	blx	r3
    _i2cPort->endTransmission();
   b448a:	6820      	ldr	r0, [r4, #0]
   b448c:	f001 f941 	bl	b5712 <_ZN7TwoWire15endTransmissionEv>
    int bytesLeftToRead = numberOfSamples * activeLEDs * 3;
   b4490:	436e      	muls	r6, r5
   b4492:	eb06 0646 	add.w	r6, r6, r6, lsl #1
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b4496:	f04f 0820 	mov.w	r8, #32
        temp[3] = 0;
   b449a:	f04f 0900 	mov.w	r9, #0
    while (bytesLeftToRead > 0)
   b449e:	2e00      	cmp	r6, #0
   b44a0:	dd74      	ble.n	b458c <_ZN8MAX301055checkEv+0x136>
      if (toGet > I2C_BUFFER_LENGTH)
   b44a2:	2e20      	cmp	r6, #32
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b44a4:	bfc8      	it	gt
   b44a6:	7962      	ldrbgt	r2, [r4, #5]
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b44a8:	6820      	ldr	r0, [r4, #0]
        toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
   b44aa:	bfc9      	itett	gt
   b44ac:	eb02 0242 	addgt.w	r2, r2, r2, lsl #1
   b44b0:	4637      	movle	r7, r6
   b44b2:	fbb8 f7f2 	udivgt	r7, r8, r2
   b44b6:	4357      	mulgt	r7, r2
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b44b8:	463a      	mov	r2, r7
   b44ba:	2157      	movs	r1, #87	; 0x57
      bytesLeftToRead -= toGet;
   b44bc:	1bf6      	subs	r6, r6, r7
      _i2cPort->requestFrom(MAX30105_ADDRESS, toGet);
   b44be:	f001 f91a 	bl	b56f6 <_ZN7TwoWire11requestFromEhj>
      while (toGet > 0)
   b44c2:	2f00      	cmp	r7, #0
   b44c4:	ddeb      	ble.n	b449e <_ZN8MAX301055checkEv+0x48>
        sense.head++; //Advance the head of the storage struct
   b44c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b44ca:	6820      	ldr	r0, [r4, #0]
        temp[3] = 0;
   b44cc:	f88d 9007 	strb.w	r9, [sp, #7]
        sense.head++; //Advance the head of the storage struct
   b44d0:	3301      	adds	r3, #1
        sense.head %= STORAGE_SIZE; //Wrap condition
   b44d2:	f003 0303 	and.w	r3, r3, #3
   b44d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        temp[2] = _i2cPort->read();
   b44da:	6803      	ldr	r3, [r0, #0]
   b44dc:	695b      	ldr	r3, [r3, #20]
   b44de:	4798      	blx	r3
   b44e0:	f88d 0006 	strb.w	r0, [sp, #6]
        temp[1] = _i2cPort->read();
   b44e4:	6820      	ldr	r0, [r4, #0]
   b44e6:	6803      	ldr	r3, [r0, #0]
   b44e8:	695b      	ldr	r3, [r3, #20]
   b44ea:	4798      	blx	r3
   b44ec:	f88d 0005 	strb.w	r0, [sp, #5]
        temp[0] = _i2cPort->read();
   b44f0:	6820      	ldr	r0, [r4, #0]
   b44f2:	6803      	ldr	r3, [r0, #0]
   b44f4:	695b      	ldr	r3, [r3, #20]
   b44f6:	4798      	blx	r3
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b44f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        temp[0] = _i2cPort->read();
   b44fc:	f88d 0004 	strb.w	r0, [sp, #4]
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4500:	9a01      	ldr	r2, [sp, #4]
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4502:	3302      	adds	r3, #2
		tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4504:	f3c2 0211 	ubfx	r2, r2, #0, #18
        sense.red[sense.head] = tempLong; //Store this reading into the sense array
   b4508:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 1)
   b450c:	7963      	ldrb	r3, [r4, #5]
   b450e:	2b01      	cmp	r3, #1
   b4510:	d919      	bls.n	b4546 <_ZN8MAX301055checkEv+0xf0>
          temp[2] = _i2cPort->read();
   b4512:	6820      	ldr	r0, [r4, #0]
   b4514:	6803      	ldr	r3, [r0, #0]
   b4516:	695b      	ldr	r3, [r3, #20]
   b4518:	4798      	blx	r3
   b451a:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b451e:	6820      	ldr	r0, [r4, #0]
   b4520:	6803      	ldr	r3, [r0, #0]
   b4522:	695b      	ldr	r3, [r3, #20]
   b4524:	4798      	blx	r3
   b4526:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b452a:	6820      	ldr	r0, [r4, #0]
   b452c:	6803      	ldr	r3, [r0, #0]
   b452e:	695b      	ldr	r3, [r3, #20]
   b4530:	4798      	blx	r3
		  sense.IR[sense.head] = tempLong;
   b4532:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b4536:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b453a:	9a01      	ldr	r2, [sp, #4]
		  sense.IR[sense.head] = tempLong;
   b453c:	3306      	adds	r3, #6
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b453e:	f3c2 0211 	ubfx	r2, r2, #0, #18
		  sense.IR[sense.head] = tempLong;
   b4542:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        if (activeLEDs > 2)
   b4546:	7963      	ldrb	r3, [r4, #5]
   b4548:	2b02      	cmp	r3, #2
   b454a:	d919      	bls.n	b4580 <_ZN8MAX301055checkEv+0x12a>
          temp[2] = _i2cPort->read();
   b454c:	6820      	ldr	r0, [r4, #0]
   b454e:	6803      	ldr	r3, [r0, #0]
   b4550:	695b      	ldr	r3, [r3, #20]
   b4552:	4798      	blx	r3
   b4554:	f88d 0006 	strb.w	r0, [sp, #6]
          temp[1] = _i2cPort->read();
   b4558:	6820      	ldr	r0, [r4, #0]
   b455a:	6803      	ldr	r3, [r0, #0]
   b455c:	695b      	ldr	r3, [r3, #20]
   b455e:	4798      	blx	r3
   b4560:	f88d 0005 	strb.w	r0, [sp, #5]
          temp[0] = _i2cPort->read();
   b4564:	6820      	ldr	r0, [r4, #0]
   b4566:	6803      	ldr	r3, [r0, #0]
   b4568:	695b      	ldr	r3, [r3, #20]
   b456a:	4798      	blx	r3
          sense.green[sense.head] = tempLong;
   b456c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
          temp[0] = _i2cPort->read();
   b4570:	f88d 0004 	strb.w	r0, [sp, #4]
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4574:	9a01      	ldr	r2, [sp, #4]
          sense.green[sense.head] = tempLong;
   b4576:	330a      	adds	r3, #10
		  tempLong &= 0x3FFFF; //Zero out all but 18 bits
   b4578:	f3c2 0211 	ubfx	r2, r2, #0, #18
          sense.green[sense.head] = tempLong;
   b457c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        toGet -= activeLEDs * 3;
   b4580:	7963      	ldrb	r3, [r4, #5]
   b4582:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b4586:	441f      	add	r7, r3
      while (toGet > 0)
   b4588:	e79b      	b.n	b44c2 <_ZN8MAX301055checkEv+0x6c>
  int numberOfSamples = 0;
   b458a:	2500      	movs	r5, #0
}
   b458c:	b2a8      	uxth	r0, r5
   b458e:	b003      	add	sp, #12
   b4590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4594 <_ZN8MAX301059safeCheckEh>:
{
   b4594:	b570      	push	{r4, r5, r6, lr}
   b4596:	4605      	mov	r5, r0
   b4598:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b459a:	f000 fbc1 	bl	b4d20 <HAL_Timer_Get_Milli_Seconds>
   b459e:	4604      	mov	r4, r0
   b45a0:	f000 fbbe 	bl	b4d20 <HAL_Timer_Get_Milli_Seconds>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b45a4:	1b00      	subs	r0, r0, r4
   b45a6:	42b0      	cmp	r0, r6
   b45a8:	d808      	bhi.n	b45bc <_ZN8MAX301059safeCheckEh+0x28>
	if(check() == true) //We found new data!
   b45aa:	4628      	mov	r0, r5
   b45ac:	f7ff ff53 	bl	b4456 <_ZN8MAX301055checkEv>
   b45b0:	2801      	cmp	r0, #1
   b45b2:	d004      	beq.n	b45be <_ZN8MAX301059safeCheckEh+0x2a>
	delay(1);
   b45b4:	2001      	movs	r0, #1
   b45b6:	f000 fe39 	bl	b522c <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
   b45ba:	e7f1      	b.n	b45a0 <_ZN8MAX301059safeCheckEh+0xc>
   b45bc:	2000      	movs	r0, #0
}
   b45be:	bd70      	pop	{r4, r5, r6, pc}

000b45c0 <_ZN8MAX301056getRedEv>:
{
   b45c0:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b45c2:	21fa      	movs	r1, #250	; 0xfa
{
   b45c4:	4604      	mov	r4, r0
  if(safeCheck(250))
   b45c6:	f7ff ffe5 	bl	b4594 <_ZN8MAX301059safeCheckEh>
   b45ca:	b120      	cbz	r0, b45d6 <_ZN8MAX301056getRedEv+0x16>
    return (sense.red[sense.head]);
   b45cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b45d0:	3302      	adds	r3, #2
   b45d2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b45d6:	bd10      	pop	{r4, pc}

000b45d8 <_ZN8MAX301055getIREv>:
{
   b45d8:	b510      	push	{r4, lr}
  if(safeCheck(250))
   b45da:	21fa      	movs	r1, #250	; 0xfa
{
   b45dc:	4604      	mov	r4, r0
  if(safeCheck(250))
   b45de:	f7ff ffd9 	bl	b4594 <_ZN8MAX301059safeCheckEh>
   b45e2:	b120      	cbz	r0, b45ee <_ZN8MAX301055getIREv+0x16>
    return (sense.IR[sense.head]);
   b45e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   b45e8:	3306      	adds	r3, #6
   b45ea:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
}
   b45ee:	bd10      	pop	{r4, pc}

000b45f0 <_ZN8MAX3010510readPartIDEv>:
  return readRegister8(_i2caddr, MAX30105_PARTID);
   b45f0:	7901      	ldrb	r1, [r0, #4]
   b45f2:	22ff      	movs	r2, #255	; 0xff
   b45f4:	f7ff bf07 	b.w	b4406 <_ZN8MAX3010513readRegister8Ehh>

000b45f8 <_ZN8MAX3010514readRevisionIDEv>:
void MAX30105::readRevisionID() {
   b45f8:	b510      	push	{r4, lr}
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b45fa:	22fe      	movs	r2, #254	; 0xfe
   b45fc:	7901      	ldrb	r1, [r0, #4]
void MAX30105::readRevisionID() {
   b45fe:	4604      	mov	r4, r0
  revisionID = readRegister8(_i2caddr, MAX30105_REVISIONID);
   b4600:	f7ff ff01 	bl	b4406 <_ZN8MAX3010513readRegister8Ehh>
   b4604:	71a0      	strb	r0, [r4, #6]
}
   b4606:	bd10      	pop	{r4, pc}

000b4608 <_ZN8MAX301055beginER7TwoWiremh>:
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4608:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b460a:	4604      	mov	r4, r0
   b460c:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b460e:	6021      	str	r1, [r4, #0]
boolean MAX30105::begin(TwoWire &wirePort, uint32_t i2cSpeed, uint8_t i2caddr) {
   b4610:	461d      	mov	r5, r3
   b4612:	9201      	str	r2, [sp, #4]
  _i2cPort->begin();
   b4614:	f001 f840 	bl	b5698 <_ZN7TwoWire5beginEv>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4618:	9901      	ldr	r1, [sp, #4]
   b461a:	6820      	ldr	r0, [r4, #0]
   b461c:	f001 f838 	bl	b5690 <_ZN7TwoWire8setSpeedEm>
  _i2caddr = i2caddr;
   b4620:	7125      	strb	r5, [r4, #4]
  if (readPartID() != MAX_30105_EXPECTEDPARTID) {
   b4622:	4620      	mov	r0, r4
   b4624:	f7ff ffe4 	bl	b45f0 <_ZN8MAX3010510readPartIDEv>
   b4628:	2815      	cmp	r0, #21
   b462a:	d105      	bne.n	b4638 <_ZN8MAX301055beginER7TwoWiremh+0x30>
  readRevisionID();
   b462c:	4620      	mov	r0, r4
   b462e:	f7ff ffe3 	bl	b45f8 <_ZN8MAX3010514readRevisionIDEv>
  return true;
   b4632:	2001      	movs	r0, #1
}
   b4634:	b003      	add	sp, #12
   b4636:	bd30      	pop	{r4, r5, pc}
    return false;
   b4638:	2000      	movs	r0, #0
   b463a:	e7fb      	b.n	b4634 <_ZN8MAX301055beginER7TwoWiremh+0x2c>

000b463c <_ZN8MAX3010514writeRegister8Ehhh>:

void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b463c:	b570      	push	{r4, r5, r6, lr}
   b463e:	4604      	mov	r4, r0
  _i2cPort->beginTransmission(address);
   b4640:	6800      	ldr	r0, [r0, #0]
void MAX30105::writeRegister8(uint8_t address, uint8_t reg, uint8_t value) {
   b4642:	4616      	mov	r6, r2
   b4644:	461d      	mov	r5, r3
  _i2cPort->beginTransmission(address);
   b4646:	f001 f859 	bl	b56fc <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(reg);
   b464a:	6820      	ldr	r0, [r4, #0]
   b464c:	6803      	ldr	r3, [r0, #0]
   b464e:	4631      	mov	r1, r6
   b4650:	689b      	ldr	r3, [r3, #8]
   b4652:	4798      	blx	r3
  _i2cPort->write(value);
   b4654:	6820      	ldr	r0, [r4, #0]
   b4656:	6803      	ldr	r3, [r0, #0]
   b4658:	4629      	mov	r1, r5
   b465a:	689b      	ldr	r3, [r3, #8]
   b465c:	4798      	blx	r3
  _i2cPort->endTransmission();
   b465e:	6820      	ldr	r0, [r4, #0]
}
   b4660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _i2cPort->endTransmission();
   b4664:	f001 b855 	b.w	b5712 <_ZN7TwoWire15endTransmissionEv>

000b4668 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
void MAX30105::setPulseAmplitudeRed(uint8_t amplitude) {
   b4668:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED1_PULSEAMP, amplitude);
   b466a:	220c      	movs	r2, #12
   b466c:	7901      	ldrb	r1, [r0, #4]
   b466e:	f7ff bfe5 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b4672 <_ZN8MAX3010519setPulseAmplitudeIREh>:
void MAX30105::setPulseAmplitudeIR(uint8_t amplitude) {
   b4672:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED2_PULSEAMP, amplitude);
   b4674:	220d      	movs	r2, #13
   b4676:	7901      	ldrb	r1, [r0, #4]
   b4678:	f7ff bfe0 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b467c <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
void MAX30105::setPulseAmplitudeGreen(uint8_t amplitude) {
   b467c:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED3_PULSEAMP, amplitude);
   b467e:	220e      	movs	r2, #14
   b4680:	7901      	ldrb	r1, [r0, #4]
   b4682:	f7ff bfdb 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b4686 <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
void MAX30105::setPulseAmplitudeProximity(uint8_t amplitude) {
   b4686:	460b      	mov	r3, r1
  writeRegister8(_i2caddr, MAX30105_LED_PROX_AMP, amplitude);
   b4688:	2210      	movs	r2, #16
   b468a:	7901      	ldrb	r1, [r0, #4]
   b468c:	f7ff bfd6 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b4690 <_ZN8MAX301059clearFIFOEv>:
void MAX30105::clearFIFO(void) {
   b4690:	b510      	push	{r4, lr}
   b4692:	4604      	mov	r4, r0
  writeRegister8(_i2caddr, MAX30105_FIFOWRITEPTR, 0);
   b4694:	7901      	ldrb	r1, [r0, #4]
   b4696:	2300      	movs	r3, #0
   b4698:	2204      	movs	r2, #4
   b469a:	f7ff ffcf 	bl	b463c <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOOVERFLOW, 0);
   b469e:	7921      	ldrb	r1, [r4, #4]
   b46a0:	4620      	mov	r0, r4
   b46a2:	2300      	movs	r3, #0
   b46a4:	2205      	movs	r2, #5
   b46a6:	f7ff ffc9 	bl	b463c <_ZN8MAX3010514writeRegister8Ehhh>
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b46aa:	7921      	ldrb	r1, [r4, #4]
   b46ac:	4620      	mov	r0, r4
   b46ae:	2300      	movs	r3, #0
}
   b46b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister8(_i2caddr, MAX30105_FIFOREADPTR, 0);
   b46b4:	2206      	movs	r2, #6
   b46b6:	f7ff bfc1 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b46ba <_ZN8MAX301057bitMaskEhhh>:
{
   b46ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b46be:	460d      	mov	r5, r1
   b46c0:	4617      	mov	r7, r2
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b46c2:	460a      	mov	r2, r1
   b46c4:	7901      	ldrb	r1, [r0, #4]
{
   b46c6:	4604      	mov	r4, r0
   b46c8:	461e      	mov	r6, r3
  uint8_t originalContents = readRegister8(_i2caddr, reg);
   b46ca:	f7ff fe9c 	bl	b4406 <_ZN8MAX3010513readRegister8Ehh>
  originalContents = originalContents & mask;
   b46ce:	4038      	ands	r0, r7
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b46d0:	ea46 0300 	orr.w	r3, r6, r0
   b46d4:	7921      	ldrb	r1, [r4, #4]
   b46d6:	462a      	mov	r2, r5
   b46d8:	4620      	mov	r0, r4
}
   b46da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writeRegister8(_i2caddr, reg, originalContents | thing);
   b46de:	f7ff bfad 	b.w	b463c <_ZN8MAX3010514writeRegister8Ehhh>

000b46e2 <_ZN8MAX301059softResetEv>:
void MAX30105::softReset(void) {
   b46e2:	b538      	push	{r3, r4, r5, lr}
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46e4:	22bf      	movs	r2, #191	; 0xbf
   b46e6:	2340      	movs	r3, #64	; 0x40
   b46e8:	2109      	movs	r1, #9
void MAX30105::softReset(void) {
   b46ea:	4604      	mov	r4, r0
  bitMask(MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
   b46ec:	f7ff ffe5 	bl	b46ba <_ZN8MAX301057bitMaskEhhh>
   b46f0:	f000 fb16 	bl	b4d20 <HAL_Timer_Get_Milli_Seconds>
   b46f4:	4605      	mov	r5, r0
   b46f6:	f000 fb13 	bl	b4d20 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < 100)
   b46fa:	1b40      	subs	r0, r0, r5
   b46fc:	2863      	cmp	r0, #99	; 0x63
   b46fe:	d80a      	bhi.n	b4716 <_ZN8MAX301059softResetEv+0x34>
    uint8_t response = readRegister8(_i2caddr, MAX30105_MODECONFIG);
   b4700:	7921      	ldrb	r1, [r4, #4]
   b4702:	2209      	movs	r2, #9
   b4704:	4620      	mov	r0, r4
   b4706:	f7ff fe7e 	bl	b4406 <_ZN8MAX3010513readRegister8Ehh>
    if ((response & MAX30105_RESET) == 0) break; //We're done!
   b470a:	0643      	lsls	r3, r0, #25
   b470c:	d503      	bpl.n	b4716 <_ZN8MAX301059softResetEv+0x34>
    delay(1); //Let's not over burden the I2C bus
   b470e:	2001      	movs	r0, #1
   b4710:	f000 fd8c 	bl	b522c <delay>
  while (millis() - startTime < 100)
   b4714:	e7ef      	b.n	b46f6 <_ZN8MAX301059softResetEv+0x14>
}
   b4716:	bd38      	pop	{r3, r4, r5, pc}

000b4718 <_ZN8MAX3010510setLEDModeEh>:
void MAX30105::setLEDMode(uint8_t mode) {
   b4718:	460b      	mov	r3, r1
  bitMask(MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
   b471a:	22f8      	movs	r2, #248	; 0xf8
   b471c:	2109      	movs	r1, #9
   b471e:	f7ff bfcc 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b4722 <_ZN8MAX3010511setADCRangeEh>:
void MAX30105::setADCRange(uint8_t adcRange) {
   b4722:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
   b4724:	229f      	movs	r2, #159	; 0x9f
   b4726:	210a      	movs	r1, #10
   b4728:	f7ff bfc7 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b472c <_ZN8MAX3010513setSampleRateEh>:
void MAX30105::setSampleRate(uint8_t sampleRate) {
   b472c:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
   b472e:	22e3      	movs	r2, #227	; 0xe3
   b4730:	210a      	movs	r1, #10
   b4732:	f7ff bfc2 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b4736 <_ZN8MAX3010513setPulseWidthEh>:
void MAX30105::setPulseWidth(uint8_t pulseWidth) {
   b4736:	460b      	mov	r3, r1
  bitMask(MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
   b4738:	22fc      	movs	r2, #252	; 0xfc
   b473a:	210a      	movs	r1, #10
   b473c:	f7ff bfbd 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b4740 <_ZN8MAX3010510enableSlotEhh>:
  switch (slotNumber) {
   b4740:	3901      	subs	r1, #1
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
   b4742:	4613      	mov	r3, r2
   b4744:	2903      	cmp	r1, #3
   b4746:	d814      	bhi.n	b4772 <_ZN8MAX3010510enableSlotEhh+0x32>
   b4748:	e8df f001 	tbb	[pc, r1]
   b474c:	0e0b0602 	.word	0x0e0b0602
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
   b4750:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4752:	2111      	movs	r1, #17
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4754:	f7ff bfb1 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
   b4758:	011b      	lsls	r3, r3, #4
   b475a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b475e:	228f      	movs	r2, #143	; 0x8f
   b4760:	e7f7      	b.n	b4752 <_ZN8MAX3010510enableSlotEhh+0x12>
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
   b4762:	22f8      	movs	r2, #248	; 0xf8
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
   b4764:	2112      	movs	r1, #18
   b4766:	e7f5      	b.n	b4754 <_ZN8MAX3010510enableSlotEhh+0x14>
   b4768:	011b      	lsls	r3, r3, #4
   b476a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   b476e:	228f      	movs	r2, #143	; 0x8f
   b4770:	e7f8      	b.n	b4764 <_ZN8MAX3010510enableSlotEhh+0x24>
}
   b4772:	4770      	bx	lr

000b4774 <_ZN8MAX3010514setFIFOAverageEh>:
void MAX30105::setFIFOAverage(uint8_t numberOfSamples) {
   b4774:	460b      	mov	r3, r1
  bitMask(MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, numberOfSamples);
   b4776:	221f      	movs	r2, #31
   b4778:	2108      	movs	r1, #8
   b477a:	f7ff bf9e 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b477e <_ZN8MAX3010518enableFIFORolloverEv>:
  bitMask(MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
   b477e:	2310      	movs	r3, #16
   b4780:	22ef      	movs	r2, #239	; 0xef
   b4782:	2108      	movs	r1, #8
   b4784:	f7ff bf99 	b.w	b46ba <_ZN8MAX301057bitMaskEhhh>

000b4788 <_ZN8MAX301055setupEhhhiii>:
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
   b4788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b478c:	4615      	mov	r5, r2
   b478e:	e9dd 7908 	ldrd	r7, r9, [sp, #32]
   b4792:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   b4796:	4604      	mov	r4, r0
   b4798:	4688      	mov	r8, r1
   b479a:	461e      	mov	r6, r3
  softReset(); //Reset all configuration, threshold, and data registers to POR values
   b479c:	f7ff ffa1 	bl	b46e2 <_ZN8MAX301059softResetEv>
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
   b47a0:	2d01      	cmp	r5, #1
   b47a2:	d149      	bne.n	b4838 <_ZN8MAX301055setupEhhhiii+0xb0>
   b47a4:	2100      	movs	r1, #0
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b47a6:	4620      	mov	r0, r4
   b47a8:	f7ff ffe4 	bl	b4774 <_ZN8MAX3010514setFIFOAverageEh>
  enableFIFORollover(); //Allow FIFO to wrap/roll over
   b47ac:	4620      	mov	r0, r4
   b47ae:	f7ff ffe6 	bl	b477e <_ZN8MAX3010518enableFIFORolloverEv>
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
   b47b2:	2e03      	cmp	r6, #3
   b47b4:	d154      	bne.n	b4860 <_ZN8MAX301055setupEhhhiii+0xd8>
   b47b6:	2107      	movs	r1, #7
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b47b8:	4620      	mov	r0, r4
   b47ba:	f7ff ffad 	bl	b4718 <_ZN8MAX3010510setLEDModeEh>
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b47be:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
   b47c2:	7166      	strb	r6, [r4, #5]
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
   b47c4:	da51      	bge.n	b486a <_ZN8MAX301055setupEhhhiii+0xe2>
   b47c6:	2100      	movs	r1, #0
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b47c8:	4620      	mov	r0, r4
   b47ca:	f7ff ffaa 	bl	b4722 <_ZN8MAX3010511setADCRangeEh>
  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
   b47ce:	2f63      	cmp	r7, #99	; 0x63
   b47d0:	dc58      	bgt.n	b4884 <_ZN8MAX301055setupEhhhiii+0xfc>
   b47d2:	2100      	movs	r1, #0
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b47d4:	4620      	mov	r0, r4
   b47d6:	f7ff ffa9 	bl	b472c <_ZN8MAX3010513setSampleRateEh>
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
   b47da:	f1b9 0f75 	cmp.w	r9, #117	; 0x75
   b47de:	dc71      	bgt.n	b48c4 <_ZN8MAX301055setupEhhhiii+0x13c>
   b47e0:	2100      	movs	r1, #0
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b47e2:	4620      	mov	r0, r4
   b47e4:	f7ff ffa7 	bl	b4736 <_ZN8MAX3010513setPulseWidthEh>
  setPulseAmplitudeRed(powerLevel);
   b47e8:	4641      	mov	r1, r8
   b47ea:	4620      	mov	r0, r4
   b47ec:	f7ff ff3c 	bl	b4668 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
   b47f0:	4641      	mov	r1, r8
   b47f2:	4620      	mov	r0, r4
   b47f4:	f7ff ff3d 	bl	b4672 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
   b47f8:	4641      	mov	r1, r8
   b47fa:	4620      	mov	r0, r4
   b47fc:	f7ff ff3e 	bl	b467c <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
   b4800:	4641      	mov	r1, r8
   b4802:	4620      	mov	r0, r4
   b4804:	f7ff ff3f 	bl	b4686 <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  enableSlot(1, SLOT_RED_LED);
   b4808:	2201      	movs	r2, #1
   b480a:	4611      	mov	r1, r2
   b480c:	4620      	mov	r0, r4
   b480e:	f7ff ff97 	bl	b4740 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
   b4812:	2e01      	cmp	r6, #1
   b4814:	d90b      	bls.n	b482e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4816:	2202      	movs	r2, #2
   b4818:	4611      	mov	r1, r2
   b481a:	4620      	mov	r0, r4
   b481c:	f7ff ff90 	bl	b4740 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
   b4820:	2e02      	cmp	r6, #2
   b4822:	d004      	beq.n	b482e <_ZN8MAX301055setupEhhhiii+0xa6>
   b4824:	2203      	movs	r2, #3
   b4826:	4611      	mov	r1, r2
   b4828:	4620      	mov	r0, r4
   b482a:	f7ff ff89 	bl	b4740 <_ZN8MAX3010510enableSlotEhh>
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b482e:	4620      	mov	r0, r4
}
   b4830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  clearFIFO(); //Reset the FIFO before we begin checking the sensor
   b4834:	f7ff bf2c 	b.w	b4690 <_ZN8MAX301059clearFIFOEv>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
   b4838:	2d02      	cmp	r5, #2
   b483a:	d101      	bne.n	b4840 <_ZN8MAX301055setupEhhhiii+0xb8>
   b483c:	2120      	movs	r1, #32
   b483e:	e7b2      	b.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
   b4840:	2d04      	cmp	r5, #4
   b4842:	d101      	bne.n	b4848 <_ZN8MAX301055setupEhhhiii+0xc0>
   b4844:	2140      	movs	r1, #64	; 0x40
   b4846:	e7ae      	b.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
   b4848:	2d08      	cmp	r5, #8
   b484a:	d101      	bne.n	b4850 <_ZN8MAX301055setupEhhhiii+0xc8>
   b484c:	2160      	movs	r1, #96	; 0x60
   b484e:	e7aa      	b.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
   b4850:	2d10      	cmp	r5, #16
   b4852:	d101      	bne.n	b4858 <_ZN8MAX301055setupEhhhiii+0xd0>
   b4854:	2180      	movs	r1, #128	; 0x80
   b4856:	e7a6      	b.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
   b4858:	2d20      	cmp	r5, #32
   b485a:	d1f3      	bne.n	b4844 <_ZN8MAX301055setupEhhhiii+0xbc>
   b485c:	21a0      	movs	r1, #160	; 0xa0
   b485e:	e7a2      	b.n	b47a6 <_ZN8MAX301055setupEhhhiii+0x1e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
   b4860:	2e02      	cmp	r6, #2
   b4862:	bf0c      	ite	eq
   b4864:	2103      	moveq	r1, #3
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
   b4866:	2102      	movne	r1, #2
   b4868:	e7a6      	b.n	b47b8 <_ZN8MAX301055setupEhhhiii+0x30>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
   b486a:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
   b486e:	da01      	bge.n	b4874 <_ZN8MAX301055setupEhhhiii+0xec>
   b4870:	2120      	movs	r1, #32
   b4872:	e7a9      	b.n	b47c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
   b4874:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
   b4878:	da01      	bge.n	b487e <_ZN8MAX301055setupEhhhiii+0xf6>
   b487a:	2140      	movs	r1, #64	; 0x40
   b487c:	e7a4      	b.n	b47c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
   b487e:	d1a2      	bne.n	b47c6 <_ZN8MAX301055setupEhhhiii+0x3e>
   b4880:	2160      	movs	r1, #96	; 0x60
   b4882:	e7a1      	b.n	b47c8 <_ZN8MAX301055setupEhhhiii+0x40>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
   b4884:	2fc7      	cmp	r7, #199	; 0xc7
   b4886:	dc01      	bgt.n	b488c <_ZN8MAX301055setupEhhhiii+0x104>
   b4888:	2104      	movs	r1, #4
   b488a:	e7a3      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
   b488c:	f5b7 7fc8 	cmp.w	r7, #400	; 0x190
   b4890:	da01      	bge.n	b4896 <_ZN8MAX301055setupEhhhiii+0x10e>
   b4892:	2108      	movs	r1, #8
   b4894:	e79e      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
   b4896:	f5b7 7f48 	cmp.w	r7, #800	; 0x320
   b489a:	da01      	bge.n	b48a0 <_ZN8MAX301055setupEhhhiii+0x118>
   b489c:	210c      	movs	r1, #12
   b489e:	e799      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
   b48a0:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   b48a4:	da01      	bge.n	b48aa <_ZN8MAX301055setupEhhhiii+0x122>
   b48a6:	2110      	movs	r1, #16
   b48a8:	e794      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
   b48aa:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
   b48ae:	da01      	bge.n	b48b4 <_ZN8MAX301055setupEhhhiii+0x12c>
   b48b0:	2114      	movs	r1, #20
   b48b2:	e78f      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
   b48b4:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   b48b8:	da01      	bge.n	b48be <_ZN8MAX301055setupEhhhiii+0x136>
   b48ba:	2118      	movs	r1, #24
   b48bc:	e78a      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
   b48be:	d188      	bne.n	b47d2 <_ZN8MAX301055setupEhhhiii+0x4a>
   b48c0:	211c      	movs	r1, #28
   b48c2:	e787      	b.n	b47d4 <_ZN8MAX301055setupEhhhiii+0x4c>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
   b48c4:	f1b9 0fd6 	cmp.w	r9, #214	; 0xd6
   b48c8:	dc01      	bgt.n	b48ce <_ZN8MAX301055setupEhhhiii+0x146>
   b48ca:	2101      	movs	r1, #1
   b48cc:	e789      	b.n	b47e2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
   b48ce:	f5b9 7fcd 	cmp.w	r9, #410	; 0x19a
   b48d2:	dc01      	bgt.n	b48d8 <_ZN8MAX301055setupEhhhiii+0x150>
   b48d4:	2102      	movs	r1, #2
   b48d6:	e784      	b.n	b47e2 <_ZN8MAX301055setupEhhhiii+0x5a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
   b48d8:	f240 139b 	movw	r3, #411	; 0x19b
   b48dc:	4599      	cmp	r9, r3
   b48de:	f47f af7f 	bne.w	b47e0 <_ZN8MAX301055setupEhhhiii+0x58>
   b48e2:	2103      	movs	r1, #3
   b48e4:	e77d      	b.n	b47e2 <_ZN8MAX301055setupEhhhiii+0x5a>

000b48e6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   b48e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t i = 1, n_width;
  *n_npks = 0;
   b48ea:	2400      	movs	r4, #0
   b48ec:	600c      	str	r4, [r1, #0]
  
  while (i < n_size-1){
   b48ee:	f103 38ff 	add.w	r8, r3, #4294967295
  int32_t i = 1, n_width;
   b48f2:	2401      	movs	r4, #1
  while (i < n_size-1){
   b48f4:	45a0      	cmp	r8, r4
   b48f6:	dd27      	ble.n	b4948 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x62>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
   b48f8:	9d06      	ldr	r5, [sp, #24]
   b48fa:	f852 c024 	ldr.w	ip, [r2, r4, lsl #2]
   b48fe:	45ac      	cmp	ip, r5
   b4900:	ea4f 0684 	mov.w	r6, r4, lsl #2
   b4904:	f104 0501 	add.w	r5, r4, #1
   b4908:	dd1c      	ble.n	b4944 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b490a:	4416      	add	r6, r2
   b490c:	f856 6c04 	ldr.w	r6, [r6, #-4]
   b4910:	45b4      	cmp	ip, r6
   b4912:	dd17      	ble.n	b4944 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4914:	462e      	mov	r6, r5
      n_width = 1;
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
   b4916:	429e      	cmp	r6, r3
   b4918:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   b491c:	eba6 0e04 	sub.w	lr, r6, r4
   b4920:	4635      	mov	r5, r6
   b4922:	d003      	beq.n	b492c <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x46>
   b4924:	45bc      	cmp	ip, r7
   b4926:	f106 0601 	add.w	r6, r6, #1
   b492a:	d0f4      	beq.n	b4916 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x30>
        n_width++;
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
   b492c:	45bc      	cmp	ip, r7
   b492e:	dd09      	ble.n	b4944 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
   b4930:	680e      	ldr	r6, [r1, #0]
   b4932:	2e0e      	cmp	r6, #14
   b4934:	dc06      	bgt.n	b4944 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0x5e>
        pn_locs[(*n_npks)++] = i;    
   b4936:	1c75      	adds	r5, r6, #1
   b4938:	600d      	str	r5, [r1, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
   b493a:	f10e 0501 	add.w	r5, lr, #1
        pn_locs[(*n_npks)++] = i;    
   b493e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
        i += n_width+1;
   b4942:	4425      	add	r5, r4
{
   b4944:	462c      	mov	r4, r5
   b4946:	e7d5      	b.n	b48f4 <_Z28maxim_peaks_above_min_heightPlS_S_ll+0xe>
        i += n_width;
    }
    else
      i++;
  }
}
   b4948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b494c <_Z17maxim_sort_ascendPll>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   b494c:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b494e:	2301      	movs	r3, #1
   b4950:	4604      	mov	r4, r0
   b4952:	428b      	cmp	r3, r1
   b4954:	da0f      	bge.n	b4976 <_Z17maxim_sort_ascendPll+0x2a>
    n_temp = pn_x[i];
   b4956:	f854 6f04 	ldr.w	r6, [r4, #4]!
   b495a:	461a      	mov	r2, r3
   b495c:	4625      	mov	r5, r4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b495e:	f855 7c04 	ldr.w	r7, [r5, #-4]
   b4962:	42b7      	cmp	r7, r6
   b4964:	dd03      	ble.n	b496e <_Z17maxim_sort_ascendPll+0x22>
   b4966:	3a01      	subs	r2, #1
        pn_x[j] = pn_x[j-1];
   b4968:	f845 7904 	str.w	r7, [r5], #-4
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
   b496c:	d1f7      	bne.n	b495e <_Z17maxim_sort_ascendPll+0x12>
    pn_x[j] = n_temp;
   b496e:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
  for (i = 1; i < n_size; i++) {
   b4972:	3301      	adds	r3, #1
   b4974:	e7ed      	b.n	b4952 <_Z17maxim_sort_ascendPll+0x6>
  }
}
   b4976:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4978 <_Z26maxim_sort_indices_descendPlS_l>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
   b4978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
   b497c:	2301      	movs	r3, #1
{
   b497e:	4690      	mov	r8, r2
   b4980:	460d      	mov	r5, r1
  for (i = 1; i < n_size; i++) {
   b4982:	4543      	cmp	r3, r8
   b4984:	da16      	bge.n	b49b4 <_Z26maxim_sort_indices_descendPlS_l+0x3c>
    n_temp = pn_indx[i];
   b4986:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b498a:	461c      	mov	r4, r3
   b498c:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   b4990:	46ac      	mov	ip, r5
   b4992:	f8d9 2000 	ldr.w	r2, [r9]
   b4996:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   b499a:	4696      	mov	lr, r2
   b499c:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
   b49a0:	4596      	cmp	lr, r2
   b49a2:	dd03      	ble.n	b49ac <_Z26maxim_sort_indices_descendPlS_l+0x34>
   b49a4:	3c01      	subs	r4, #1
      pn_indx[j] = pn_indx[j-1];
   b49a6:	f84c 7904 	str.w	r7, [ip], #-4
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
   b49aa:	d1f2      	bne.n	b4992 <_Z26maxim_sort_indices_descendPlS_l+0x1a>
    pn_indx[j] = n_temp;
   b49ac:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 1; i < n_size; i++) {
   b49b0:	3301      	adds	r3, #1
   b49b2:	e7e6      	b.n	b4982 <_Z26maxim_sort_indices_descendPlS_l+0xa>
  }
}
   b49b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b49b8 <_Z24maxim_remove_close_peaksPlS_S_l>:
{
   b49b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49bc:	4604      	mov	r4, r0
   b49be:	461f      	mov	r7, r3
   b49c0:	4610      	mov	r0, r2
   b49c2:	460d      	mov	r5, r1
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
   b49c4:	680a      	ldr	r2, [r1, #0]
   b49c6:	4621      	mov	r1, r4
   b49c8:	f7ff ffd6 	bl	b4978 <_Z26maxim_sort_indices_descendPlS_l>
   b49cc:	f04f 32ff 	mov.w	r2, #4294967295
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b49d0:	f1c7 0e00 	rsb	lr, r7, #0
  for ( i = -1; i < *pn_npks; i++ ){
   b49d4:	6829      	ldr	r1, [r5, #0]
   b49d6:	4291      	cmp	r1, r2
   b49d8:	dd1d      	ble.n	b4a16 <_Z24maxim_remove_close_peaksPlS_S_l+0x5e>
    *pn_npks = i+1;
   b49da:	1c53      	adds	r3, r2, #1
   b49dc:	461e      	mov	r6, r3
   b49de:	602b      	str	r3, [r5, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
   b49e0:	42b1      	cmp	r1, r6
   b49e2:	d016      	beq.n	b4a12 <_Z24maxim_remove_close_peaksPlS_S_l+0x5a>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
   b49e4:	1c50      	adds	r0, r2, #1
   b49e6:	bf18      	it	ne
   b49e8:	f854 0022 	ldrne.w	r0, [r4, r2, lsl #2]
   b49ec:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
   b49f0:	bf08      	it	eq
   b49f2:	4610      	moveq	r0, r2
   b49f4:	ebac 0000 	sub.w	r0, ip, r0
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
   b49f8:	42b8      	cmp	r0, r7
   b49fa:	dc01      	bgt.n	b4a00 <_Z24maxim_remove_close_peaksPlS_S_l+0x48>
   b49fc:	4586      	cmp	lr, r0
   b49fe:	dd06      	ble.n	b4a0e <_Z24maxim_remove_close_peaksPlS_S_l+0x56>
        pn_locs[(*pn_npks)++] = pn_locs[j];
   b4a00:	6828      	ldr	r0, [r5, #0]
   b4a02:	f100 0801 	add.w	r8, r0, #1
   b4a06:	f8c5 8000 	str.w	r8, [r5]
   b4a0a:	f844 c020 	str.w	ip, [r4, r0, lsl #2]
    for ( j = i+1; j < n_old_npks; j++ ){
   b4a0e:	3601      	adds	r6, #1
   b4a10:	e7e6      	b.n	b49e0 <_Z24maxim_remove_close_peaksPlS_S_l+0x28>
   b4a12:	461a      	mov	r2, r3
   b4a14:	e7de      	b.n	b49d4 <_Z24maxim_remove_close_peaksPlS_S_l+0x1c>
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a16:	4620      	mov	r0, r4
}
   b4a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  maxim_sort_ascend( pn_locs, *pn_npks );
   b4a1c:	f7ff bf96 	b.w	b494c <_Z17maxim_sort_ascendPll>

000b4a20 <_Z16maxim_find_peaksPlS_S_llll>:
{
   b4a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
   b4a22:	9d06      	ldr	r5, [sp, #24]
   b4a24:	9500      	str	r5, [sp, #0]
   b4a26:	f7ff ff5e 	bl	b48e6 <_Z28maxim_peaks_above_min_heightPlS_S_ll>
{
   b4a2a:	460c      	mov	r4, r1
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
   b4a2c:	9b07      	ldr	r3, [sp, #28]
   b4a2e:	f7ff ffc3 	bl	b49b8 <_Z24maxim_remove_close_peaksPlS_S_l>
  *n_npks = min( *n_npks, n_max_num );
   b4a32:	6822      	ldr	r2, [r4, #0]
   b4a34:	9b08      	ldr	r3, [sp, #32]
   b4a36:	429a      	cmp	r2, r3
   b4a38:	bfd4      	ite	le
   b4a3a:	6022      	strle	r2, [r4, #0]
   b4a3c:	6023      	strgt	r3, [r4, #0]
}
   b4a3e:	b003      	add	sp, #12
   b4a40:	bd30      	pop	{r4, r5, pc}
	...

000b4a44 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_>:
{
   b4a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a48:	b09d      	sub	sp, #116	; 0x74
   b4a4a:	e9dd 9827 	ldrd	r9, r8, [sp, #156]	; 0x9c
   b4a4e:	4616      	mov	r6, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a50:	2200      	movs	r2, #0
{
   b4a52:	469b      	mov	fp, r3
   b4a54:	4605      	mov	r5, r0
   b4a56:	460c      	mov	r4, r1
  un_ir_mean =0; 
   b4a58:	4613      	mov	r3, r2
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
   b4a5a:	42a2      	cmp	r2, r4
   b4a5c:	da04      	bge.n	b4a68 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x24>
   b4a5e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   b4a62:	3201      	adds	r2, #1
   b4a64:	440b      	add	r3, r1
   b4a66:	e7f8      	b.n	b4a5a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x16>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
   b4a68:	4f8d      	ldr	r7, [pc, #564]	; (b4ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   b4a6a:	fbb3 f3f4 	udiv	r3, r3, r4
   b4a6e:	4638      	mov	r0, r7
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a70:	2200      	movs	r2, #0
   b4a72:	42a2      	cmp	r2, r4
   b4a74:	da06      	bge.n	b4a84 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x40>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
   b4a76:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   b4a7a:	1a59      	subs	r1, r3, r1
   b4a7c:	f840 1b04 	str.w	r1, [r0], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
   b4a80:	3201      	adds	r2, #1
   b4a82:	e7f6      	b.n	b4a72 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x2e>
   b4a84:	4a86      	ldr	r2, [pc, #536]	; (b4ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4a86:	2100      	movs	r1, #0
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4a88:	6813      	ldr	r3, [r2, #0]
   b4a8a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   b4a8e:	4403      	add	r3, r0
   b4a90:	6850      	ldr	r0, [r2, #4]
   b4a92:	4403      	add	r3, r0
   b4a94:	6890      	ldr	r0, [r2, #8]
   b4a96:	181b      	adds	r3, r3, r0
   b4a98:	bf48      	it	mi
   b4a9a:	3303      	addmi	r3, #3
   b4a9c:	3101      	adds	r1, #1
   b4a9e:	109b      	asrs	r3, r3, #2
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4aa0:	2960      	cmp	r1, #96	; 0x60
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
   b4aa2:	f842 3c04 	str.w	r3, [r2, #-4]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
   b4aa6:	d1ef      	bne.n	b4a88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x44>
  n_th1=0; 
   b4aa8:	2300      	movs	r3, #0
   b4aaa:	4a7d      	ldr	r2, [pc, #500]	; (b4ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4aac:	469a      	mov	sl, r3
    n_th1 +=  an_x[k];
   b4aae:	f852 1b04 	ldr.w	r1, [r2], #4
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4ab2:	f10a 0a01 	add.w	sl, sl, #1
   b4ab6:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
    n_th1 +=  an_x[k];
   b4aba:	440b      	add	r3, r1
  for ( k=0 ; k<BUFFER_SIZE ;k++){
   b4abc:	d1f7      	bne.n	b4aae <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x6a>
  if( n_th1<30) n_th1=30; // min allowed
   b4abe:	f640 32b7 	movw	r2, #2999	; 0xbb7
   b4ac2:	4293      	cmp	r3, r2
   b4ac4:	dd4f      	ble.n	b4b66 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x122>
  n_th1=  n_th1/ ( BUFFER_SIZE);
   b4ac6:	fb93 fafa 	sdiv	sl, r3, sl
   b4aca:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
   b4ace:	bfa8      	it	ge
   b4ad0:	f04f 0a3c 	movge.w	sl, #60	; 0x3c
  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
   b4ad4:	223c      	movs	r2, #60	; 0x3c
   b4ad6:	2100      	movs	r1, #0
   b4ad8:	a80d      	add	r0, sp, #52	; 0x34
   b4ada:	f001 f833 	bl	b5b44 <memset>
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
   b4ade:	2304      	movs	r3, #4
   b4ae0:	220f      	movs	r2, #15
   b4ae2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b4ae6:	f8cd a000 	str.w	sl, [sp]
   b4aea:	4a6d      	ldr	r2, [pc, #436]	; (b4ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
   b4aec:	2364      	movs	r3, #100	; 0x64
   b4aee:	a907      	add	r1, sp, #28
   b4af0:	a80d      	add	r0, sp, #52	; 0x34
   b4af2:	f7ff ff95 	bl	b4a20 <_Z16maxim_find_peaksPlS_S_llll>
  if (n_npks>=2){
   b4af6:	9b07      	ldr	r3, [sp, #28]
   b4af8:	2b01      	cmp	r3, #1
   b4afa:	f04f 0200 	mov.w	r2, #0
   b4afe:	dd35      	ble.n	b4b6c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x128>
   b4b00:	a90d      	add	r1, sp, #52	; 0x34
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b02:	f04f 0c01 	mov.w	ip, #1
   b4b06:	4608      	mov	r0, r1
   b4b08:	f8d1 e004 	ldr.w	lr, [r1, #4]
   b4b0c:	6800      	ldr	r0, [r0, #0]
   b4b0e:	f10c 0c01 	add.w	ip, ip, #1
   b4b12:	ebae 0000 	sub.w	r0, lr, r0
   b4b16:	4563      	cmp	r3, ip
   b4b18:	f101 0104 	add.w	r1, r1, #4
   b4b1c:	4402      	add	r2, r0
   b4b1e:	d1f2      	bne.n	b4b06 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xc2>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
   b4b20:	1e59      	subs	r1, r3, #1
   b4b22:	fb92 f2f1 	sdiv	r2, r2, r1
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
   b4b26:	f240 51dc 	movw	r1, #1500	; 0x5dc
   b4b2a:	fb91 f2f2 	sdiv	r2, r1, r2
   b4b2e:	f8c9 2000 	str.w	r2, [r9]
    *pch_hr_valid  = 1;
   b4b32:	2201      	movs	r2, #1
   b4b34:	495b      	ldr	r1, [pc, #364]	; (b4ca4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>)
   b4b36:	f888 2000 	strb.w	r2, [r8]
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
   b4b3a:	2200      	movs	r2, #0
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b3c:	42a2      	cmp	r2, r4
   b4b3e:	db19      	blt.n	b4b74 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x130>
  for(k=0; k< 5; k++) an_ratio[k]=0;
   b4b40:	2200      	movs	r2, #0
   b4b42:	e9cd 2208 	strd	r2, r2, [sp, #32]
   b4b46:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   b4b4a:	ae0d      	add	r6, sp, #52	; 0x34
   b4b4c:	920c      	str	r2, [sp, #48]	; 0x30
   b4b4e:	4631      	mov	r1, r6
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b50:	4293      	cmp	r3, r2
   b4b52:	dd1b      	ble.n	b4b8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x148>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
   b4b54:	f851 0b04 	ldr.w	r0, [r1], #4
   b4b58:	2864      	cmp	r0, #100	; 0x64
   b4b5a:	dd15      	ble.n	b4b88 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x144>
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
   b4b5c:	4b52      	ldr	r3, [pc, #328]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
   b4b5e:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 0; 
   b4b62:	2300      	movs	r3, #0
   b4b64:	e092      	b.n	b4c8c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x248>
  if( n_th1<30) n_th1=30; // min allowed
   b4b66:	f04f 0a1e 	mov.w	sl, #30
   b4b6a:	e7b3      	b.n	b4ad4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x90>
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
   b4b6c:	494e      	ldr	r1, [pc, #312]	; (b4ca8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x264>)
   b4b6e:	f8c9 1000 	str.w	r1, [r9]
    *pch_hr_valid  = 0;
   b4b72:	e7df      	b.n	b4b34 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf0>
      an_x[k] =  pun_ir_buffer[k] ; 
   b4b74:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   b4b78:	f847 0b04 	str.w	r0, [r7], #4
      an_y[k] =  pun_red_buffer[k] ; 
   b4b7c:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   b4b80:	f841 0b04 	str.w	r0, [r1], #4
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
   b4b84:	3201      	adds	r2, #1
   b4b86:	e7d9      	b.n	b4b3c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0xf8>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
   b4b88:	3201      	adds	r2, #1
   b4b8a:	e7e1      	b.n	b4b50 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x10c>
  int32_t n_x_dc_max_idx = 0; 
   b4b8c:	2400      	movs	r4, #0
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b8e:	3b01      	subs	r3, #1
   b4b90:	4f43      	ldr	r7, [pc, #268]	; (b4ca0 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x25c>)
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4b92:	f8df c110 	ldr.w	ip, [pc, #272]	; b4ca4 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x260>
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b96:	9404      	str	r4, [sp, #16]
  int32_t n_y_dc_max_idx = 0;
   b4b98:	4625      	mov	r5, r4
  n_i_ratio_count = 0; 
   b4b9a:	4621      	mov	r1, r4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
   b4b9c:	9305      	str	r3, [sp, #20]
   b4b9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b4ba2:	4293      	cmp	r3, r2
   b4ba4:	dd56      	ble.n	b4c54 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x210>
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
   b4ba6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   b4baa:	f856 0b04 	ldr.w	r0, [r6], #4
   b4bae:	4613      	mov	r3, r2
   b4bb0:	eba8 0900 	sub.w	r9, r8, r0
   b4bb4:	3301      	adds	r3, #1
   b4bb6:	f1b9 0f03 	cmp.w	r9, #3
   b4bba:	9304      	str	r3, [sp, #16]
   b4bbc:	ddef      	ble.n	b4b9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
    n_x_dc_max= -16777216; 
   b4bbe:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bc2:	4603      	mov	r3, r0
    n_y_dc_max= -16777216 ; 
   b4bc4:	46f2      	mov	sl, lr
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4bc6:	4598      	cmp	r8, r3
   b4bc8:	dd0e      	ble.n	b4be8 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x1a4>
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4bca:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   b4bce:	4572      	cmp	r2, lr
   b4bd0:	bfc8      	it	gt
   b4bd2:	4696      	movgt	lr, r2
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4bd4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
   b4bd8:	bfc8      	it	gt
   b4bda:	461c      	movgt	r4, r3
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
   b4bdc:	4552      	cmp	r2, sl
   b4bde:	bfc4      	itt	gt
   b4be0:	461d      	movgt	r5, r3
   b4be2:	4692      	movgt	sl, r2
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
   b4be4:	3301      	adds	r3, #1
   b4be6:	e7ee      	b.n	b4bc6 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x182>
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
   b4be8:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4bec:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
   b4bf0:	1a9b      	subs	r3, r3, r2
   b4bf2:	1a22      	subs	r2, r4, r0
   b4bf4:	4353      	muls	r3, r2
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
   b4bf6:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
   b4bfa:	fb93 f3f9 	sdiv	r3, r3, r9
   b4bfe:	4413      	add	r3, r2
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
   b4c00:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   b4c04:	1ad2      	subs	r2, r2, r3
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
   b4c06:	fb0a f202 	mul.w	r2, sl, r2
   b4c0a:	ea4f 1ae2 	mov.w	sl, r2, asr #7
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c0e:	f1ba 0f00 	cmp.w	sl, #0
   b4c12:	ddc4      	ble.n	b4b9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
   b4c14:	2904      	cmp	r1, #4
   b4c16:	dcc2      	bgt.n	b4b9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
   b4c18:	f85c 3020 	ldr.w	r3, [ip, r0, lsl #2]
   b4c1c:	f85c 2028 	ldr.w	r2, [ip, r8, lsl #2]
   b4c20:	1a28      	subs	r0, r5, r0
   b4c22:	1ad2      	subs	r2, r2, r3
   b4c24:	4350      	muls	r0, r2
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
   b4c26:	fb90 f0f9 	sdiv	r0, r0, r9
   b4c2a:	4418      	add	r0, r3
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
   b4c2c:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
   b4c30:	1a1b      	subs	r3, r3, r0
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
   b4c32:	fb0e fe03 	mul.w	lr, lr, r3
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
   b4c36:	ea5f 1eee 	movs.w	lr, lr, asr #7
   b4c3a:	d0b0      	beq.n	b4b9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c3c:	ab1c      	add	r3, sp, #112	; 0x70
   b4c3e:	eb03 0881 	add.w	r8, r3, r1, lsl #2
   b4c42:	2364      	movs	r3, #100	; 0x64
   b4c44:	fb03 f20e 	mul.w	r2, r3, lr
        n_i_ratio_count++;
   b4c48:	3101      	adds	r1, #1
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
   b4c4a:	fb92 f2fa 	sdiv	r2, r2, sl
   b4c4e:	f848 2c50 	str.w	r2, [r8, #-80]
        n_i_ratio_count++;
   b4c52:	e7a4      	b.n	b4b9e <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x15a>
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
   b4c54:	a808      	add	r0, sp, #32
   b4c56:	f7ff fe79 	bl	b494c <_Z17maxim_sort_ascendPll>
  n_middle_idx= n_i_ratio_count/2;
   b4c5a:	104a      	asrs	r2, r1, #1
  if (n_middle_idx >1)
   b4c5c:	2903      	cmp	r1, #3
   b4c5e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   b4c62:	dd18      	ble.n	b4c96 <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x252>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
   b4c64:	a91c      	add	r1, sp, #112	; 0x70
   b4c66:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   b4c6a:	f851 3c54 	ldr.w	r3, [r1, #-84]
   b4c6e:	f851 2c50 	ldr.w	r2, [r1, #-80]
   b4c72:	4413      	add	r3, r2
   b4c74:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   b4c78:	105b      	asrs	r3, r3, #1
  if( n_ratio_average>2 && n_ratio_average <184){
   b4c7a:	1eda      	subs	r2, r3, #3
   b4c7c:	2ab4      	cmp	r2, #180	; 0xb4
   b4c7e:	f63f af6d 	bhi.w	b4b5c <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x118>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
   b4c82:	4a0a      	ldr	r2, [pc, #40]	; (b4cac <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x268>)
   b4c84:	5cd3      	ldrb	r3, [r2, r3]
   b4c86:	f8cb 3000 	str.w	r3, [fp]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
   b4c8a:	2301      	movs	r3, #1
    *pch_spo2_valid  = 0; 
   b4c8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   b4c8e:	7013      	strb	r3, [r2, #0]
}
   b4c90:	b01d      	add	sp, #116	; 0x74
   b4c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n_ratio_average = an_ratio[n_middle_idx ];
   b4c96:	aa1c      	add	r2, sp, #112	; 0x70
   b4c98:	4413      	add	r3, r2
   b4c9a:	f853 3c50 	ldr.w	r3, [r3, #-80]
   b4c9e:	e7ec      	b.n	b4c7a <_Z38maxim_heart_rate_and_oxygen_saturationPmlS_PlPaS0_S1_+0x236>
   b4ca0:	2003e398 	.word	0x2003e398
   b4ca4:	2003e528 	.word	0x2003e528
   b4ca8:	fffffc19 	.word	0xfffffc19
   b4cac:	000b5d40 	.word	0x000b5d40

000b4cb0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <netdb_freeaddrinfo+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	689b      	ldr	r3, [r3, #8]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030268 	.word	0x00030268

000b4cc0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <netdb_getaddrinfo+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	68db      	ldr	r3, [r3, #12]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030268 	.word	0x00030268

000b4cd0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <hal_gpio_mode+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	689b      	ldr	r3, [r3, #8]
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	0003022c 	.word	0x0003022c

000b4ce0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <hal_gpio_get_mode+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	68db      	ldr	r3, [r3, #12]
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	0003022c 	.word	0x0003022c

000b4cf0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <hal_gpio_write+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	691b      	ldr	r3, [r3, #16]
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	0003022c 	.word	0x0003022c

000b4d00 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <hal_gpio_read+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	695b      	ldr	r3, [r3, #20]
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	0003022c 	.word	0x0003022c

000b4d10 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <HAL_RNG_GetRandomNumber+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	685b      	ldr	r3, [r3, #4]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030218 	.word	0x00030218

000b4d20 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	695b      	ldr	r3, [r3, #20]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030218 	.word	0x00030218

000b4d30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <os_mutex_recursive_create+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030248 	.word	0x00030248

000b4d40 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <inet_inet_ntop+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	695b      	ldr	r3, [r3, #20]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030264 	.word	0x00030264

000b4d50 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <hal_usart_write+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	68db      	ldr	r3, [r3, #12]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	0003023c 	.word	0x0003023c

000b4d60 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <hal_usart_available+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	691b      	ldr	r3, [r3, #16]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	0003023c 	.word	0x0003023c

000b4d70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <hal_usart_read+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	695b      	ldr	r3, [r3, #20]
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	0003023c 	.word	0x0003023c

000b4d80 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <hal_usart_peek+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	699b      	ldr	r3, [r3, #24]
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	0003023c 	.word	0x0003023c

000b4d90 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <hal_usart_flush+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	69db      	ldr	r3, [r3, #28]
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	0003023c 	.word	0x0003023c

000b4da0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <hal_usart_is_enabled+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6a1b      	ldr	r3, [r3, #32]
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	0003023c 	.word	0x0003023c

000b4db0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <hal_usart_available_data_for_write+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	0003023c 	.word	0x0003023c

000b4dc0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <hal_usart_init_ex+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	0003023c 	.word	0x0003023c

000b4dd0 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <hal_i2c_set_speed+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	681b      	ldr	r3, [r3, #0]
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	00030228 	.word	0x00030228

000b4de0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <hal_i2c_begin+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	68db      	ldr	r3, [r3, #12]
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	00030228 	.word	0x00030228

000b4df0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <hal_i2c_begin_transmission+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	699b      	ldr	r3, [r3, #24]
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	00030228 	.word	0x00030228

000b4e00 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4e00:	b508      	push	{r3, lr}
   b4e02:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <hal_i2c_end_transmission+0xc>)
   b4e04:	681b      	ldr	r3, [r3, #0]
   b4e06:	69db      	ldr	r3, [r3, #28]
   b4e08:	9301      	str	r3, [sp, #4]
   b4e0a:	bd08      	pop	{r3, pc}
   b4e0c:	00030228 	.word	0x00030228

000b4e10 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <hal_i2c_write+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	6a1b      	ldr	r3, [r3, #32]
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	00030228 	.word	0x00030228

000b4e20 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <hal_i2c_available+0xc>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e28:	9301      	str	r3, [sp, #4]
   b4e2a:	bd08      	pop	{r3, pc}
   b4e2c:	00030228 	.word	0x00030228

000b4e30 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4e30:	b508      	push	{r3, lr}
   b4e32:	4b02      	ldr	r3, [pc, #8]	; (b4e3c <hal_i2c_read+0xc>)
   b4e34:	681b      	ldr	r3, [r3, #0]
   b4e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e38:	9301      	str	r3, [sp, #4]
   b4e3a:	bd08      	pop	{r3, pc}
   b4e3c:	00030228 	.word	0x00030228

000b4e40 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4e40:	b508      	push	{r3, lr}
   b4e42:	4b02      	ldr	r3, [pc, #8]	; (b4e4c <hal_i2c_peek+0xc>)
   b4e44:	681b      	ldr	r3, [r3, #0]
   b4e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e48:	9301      	str	r3, [sp, #4]
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	00030228 	.word	0x00030228

000b4e50 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <hal_i2c_flush+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	00030228 	.word	0x00030228

000b4e60 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <hal_i2c_is_enabled+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	00030228 	.word	0x00030228

000b4e70 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <hal_i2c_init+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	00030228 	.word	0x00030228

000b4e80 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <hal_i2c_request_ex+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	00030228 	.word	0x00030228

000b4e90 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <hal_spi_init+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	69db      	ldr	r3, [r3, #28]
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	00030230 	.word	0x00030230

000b4ea0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <hal_spi_is_enabled+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	6a1b      	ldr	r3, [r3, #32]
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	00030230 	.word	0x00030230

000b4eb0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <HAL_USB_USART_Init+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	681b      	ldr	r3, [r3, #0]
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	0003024c 	.word	0x0003024c

000b4ec0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <HAL_USB_USART_Begin+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	685b      	ldr	r3, [r3, #4]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	0003024c 	.word	0x0003024c

000b4ed0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <HAL_USB_USART_Available_Data+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	691b      	ldr	r3, [r3, #16]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	0003024c 	.word	0x0003024c

000b4ee0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	695b      	ldr	r3, [r3, #20]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	0003024c 	.word	0x0003024c

000b4ef0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <HAL_USB_USART_Receive_Data+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	699b      	ldr	r3, [r3, #24]
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	0003024c 	.word	0x0003024c

000b4f00 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <HAL_USB_USART_Send_Data+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	69db      	ldr	r3, [r3, #28]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	0003024c 	.word	0x0003024c

000b4f10 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <HAL_USB_USART_Flush_Data+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	6a1b      	ldr	r3, [r3, #32]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	0003024c 	.word	0x0003024c

000b4f20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <set_system_mode+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	685b      	ldr	r3, [r3, #4]
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030220 	.word	0x00030220

000b4f30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <system_delay_ms+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	695b      	ldr	r3, [r3, #20]
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030220 	.word	0x00030220

000b4f40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b03      	ldr	r3, [pc, #12]	; (b4f50 <system_ctrl_set_app_request_handler+0x10>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f4a:	9301      	str	r3, [sp, #4]
   b4f4c:	bd08      	pop	{r3, pc}
   b4f4e:	0000      	.short	0x0000
   b4f50:	00030220 	.word	0x00030220

000b4f54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b03      	ldr	r3, [pc, #12]	; (b4f64 <system_ctrl_set_result+0x10>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f5e:	9301      	str	r3, [sp, #4]
   b4f60:	bd08      	pop	{r3, pc}
   b4f62:	0000      	.short	0x0000
   b4f64:	00030220 	.word	0x00030220

000b4f68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <network_connect+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	685b      	ldr	r3, [r3, #4]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	00030240 	.word	0x00030240

000b4f78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <network_connecting+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	689b      	ldr	r3, [r3, #8]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	00030240 	.word	0x00030240

000b4f88 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <network_disconnect+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	68db      	ldr	r3, [r3, #12]
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	00030240 	.word	0x00030240

000b4f98 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <network_ready+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	691b      	ldr	r3, [r3, #16]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030240 	.word	0x00030240

000b4fa8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <network_on+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	695b      	ldr	r3, [r3, #20]
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030240 	.word	0x00030240

000b4fb8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <network_off+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	699b      	ldr	r3, [r3, #24]
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030240 	.word	0x00030240

000b4fc8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <network_listen+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	69db      	ldr	r3, [r3, #28]
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030240 	.word	0x00030240

000b4fd8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <network_listening+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	6a1b      	ldr	r3, [r3, #32]
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	00030240 	.word	0x00030240

000b4fe8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <network_set_listen_timeout+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030240 	.word	0x00030240

000b4ff8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <network_get_listen_timeout+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030240 	.word	0x00030240

000b5008 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <network_is_on+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030240 	.word	0x00030240

000b5018 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <network_is_off+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030240 	.word	0x00030240

000b5028 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <spark_set_random_seed_from_cloud_handler+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	00030244 	.word	0x00030244

000b5038 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <malloc+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	681b      	ldr	r3, [r3, #0]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	0003021c 	.word	0x0003021c

000b5048 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <free+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	685b      	ldr	r3, [r3, #4]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	0003021c 	.word	0x0003021c

000b5058 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <__assert_func+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	0003021c 	.word	0x0003021c

000b5068 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <newlib_impure_ptr_callback+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	0003021c 	.word	0x0003021c

000b5078 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5078:	2200      	movs	r2, #0
   b507a:	6840      	ldr	r0, [r0, #4]
   b507c:	4611      	mov	r1, r2
   b507e:	f7ff bfab 	b.w	b4fd8 <network_listening>

000b5082 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5082:	2200      	movs	r2, #0
   b5084:	6840      	ldr	r0, [r0, #4]
   b5086:	4611      	mov	r1, r2
   b5088:	f7ff bfb6 	b.w	b4ff8 <network_get_listen_timeout>

000b508c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b508c:	6840      	ldr	r0, [r0, #4]
   b508e:	2200      	movs	r2, #0
   b5090:	f7ff bfaa 	b.w	b4fe8 <network_set_listen_timeout>

000b5094 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5094:	6840      	ldr	r0, [r0, #4]
   b5096:	2200      	movs	r2, #0
   b5098:	f081 0101 	eor.w	r1, r1, #1
   b509c:	f7ff bf94 	b.w	b4fc8 <network_listen>

000b50a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b50a0:	2300      	movs	r3, #0
   b50a2:	6840      	ldr	r0, [r0, #4]
   b50a4:	461a      	mov	r2, r3
   b50a6:	4619      	mov	r1, r3
   b50a8:	f7ff bf86 	b.w	b4fb8 <network_off>

000b50ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b50ac:	2300      	movs	r3, #0
   b50ae:	6840      	ldr	r0, [r0, #4]
   b50b0:	461a      	mov	r2, r3
   b50b2:	4619      	mov	r1, r3
   b50b4:	f7ff bf78 	b.w	b4fa8 <network_on>

000b50b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b50b8:	2200      	movs	r2, #0
   b50ba:	6840      	ldr	r0, [r0, #4]
   b50bc:	4611      	mov	r1, r2
   b50be:	f7ff bf6b 	b.w	b4f98 <network_ready>

000b50c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b50c2:	2200      	movs	r2, #0
   b50c4:	6840      	ldr	r0, [r0, #4]
   b50c6:	4611      	mov	r1, r2
   b50c8:	f7ff bf56 	b.w	b4f78 <network_connecting>

000b50cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b50cc:	6840      	ldr	r0, [r0, #4]
   b50ce:	2200      	movs	r2, #0
   b50d0:	2102      	movs	r1, #2
   b50d2:	f7ff bf59 	b.w	b4f88 <network_disconnect>

000b50d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b50d6:	2300      	movs	r3, #0
   b50d8:	6840      	ldr	r0, [r0, #4]
   b50da:	461a      	mov	r2, r3
   b50dc:	f7ff bf44 	b.w	b4f68 <network_connect>

000b50e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b50e0:	4b02      	ldr	r3, [pc, #8]	; (b50ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b50e2:	2203      	movs	r2, #3
   b50e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b50e6:	4a02      	ldr	r2, [pc, #8]	; (b50f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b50e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b50ea:	4770      	bx	lr
   b50ec:	2003e6b8 	.word	0x2003e6b8
   b50f0:	000b5e00 	.word	0x000b5e00

000b50f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b50f4:	b510      	push	{r4, lr}
   b50f6:	4604      	mov	r4, r0
   b50f8:	4608      	mov	r0, r1
{
    _spi = spi;
   b50fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b50fc:	f7ff fec8 	bl	b4e90 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5100:	2300      	movs	r3, #0
   b5102:	6063      	str	r3, [r4, #4]
}
   b5104:	4620      	mov	r0, r4
   b5106:	bd10      	pop	{r4, pc}

000b5108 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5108:	4b05      	ldr	r3, [pc, #20]	; (b5120 <_GLOBAL__sub_I_System+0x18>)
   b510a:	2202      	movs	r2, #2
   b510c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b510e:	4b05      	ldr	r3, [pc, #20]	; (b5124 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5110:	4a05      	ldr	r2, [pc, #20]	; (b5128 <_GLOBAL__sub_I_System+0x20>)
   b5112:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5114:	2000      	movs	r0, #0
   b5116:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b511a:	f7ff bf01 	b.w	b4f20 <set_system_mode>
   b511e:	bf00      	nop
   b5120:	2003e6cc 	.word	0x2003e6cc
   b5124:	2003e6c0 	.word	0x2003e6c0
   b5128:	ffff0000 	.word	0xffff0000

000b512c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b512c:	4802      	ldr	r0, [pc, #8]	; (b5138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b512e:	2300      	movs	r3, #0
   b5130:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5132:	f7ff bdfd 	b.w	b4d30 <os_mutex_recursive_create>
   b5136:	bf00      	nop
   b5138:	2003e6d0 	.word	0x2003e6d0

000b513c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b513e:	4606      	mov	r6, r0
   b5140:	460d      	mov	r5, r1
  size_t n = 0;
   b5142:	188f      	adds	r7, r1, r2
   b5144:	2400      	movs	r4, #0
  while (size--) {
   b5146:	42bd      	cmp	r5, r7
   b5148:	d00c      	beq.n	b5164 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b514a:	6833      	ldr	r3, [r6, #0]
   b514c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5150:	689b      	ldr	r3, [r3, #8]
   b5152:	4630      	mov	r0, r6
   b5154:	4798      	blx	r3
     if (chunk>=0)
   b5156:	1e03      	subs	r3, r0, #0
   b5158:	db01      	blt.n	b515e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b515a:	441c      	add	r4, r3
  while (size--) {
   b515c:	e7f3      	b.n	b5146 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b515e:	2c00      	cmp	r4, #0
   b5160:	bf08      	it	eq
   b5162:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5164:	4620      	mov	r0, r4
   b5166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5168 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5168:	b513      	push	{r0, r1, r4, lr}
   b516a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b516c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b516e:	b159      	cbz	r1, b5188 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5170:	9101      	str	r1, [sp, #4]
   b5172:	f7fe ff53 	bl	b401c <strlen>
   b5176:	6823      	ldr	r3, [r4, #0]
   b5178:	9901      	ldr	r1, [sp, #4]
   b517a:	68db      	ldr	r3, [r3, #12]
   b517c:	4602      	mov	r2, r0
   b517e:	4620      	mov	r0, r4
    }
   b5180:	b002      	add	sp, #8
   b5182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5186:	4718      	bx	r3
    }
   b5188:	b002      	add	sp, #8
   b518a:	bd10      	pop	{r4, pc}

000b518c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b518c:	6803      	ldr	r3, [r0, #0]
   b518e:	689b      	ldr	r3, [r3, #8]
   b5190:	4718      	bx	r3

000b5192 <_ZN5Print5printEPK19__FlashStringHelper>:
   b5192:	b508      	push	{r3, lr}
   b5194:	f7ff ffe8 	bl	b5168 <_ZN5Print5writeEPKc>
   b5198:	bd08      	pop	{r3, pc}

000b519a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b519a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b519c:	210d      	movs	r1, #13
{
   b519e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b51a0:	f7ff fff4 	bl	b518c <_ZN5Print5printEc>
  n += print('\n');
   b51a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b51a6:	4604      	mov	r4, r0
  n += print('\n');
   b51a8:	4628      	mov	r0, r5
   b51aa:	f7ff ffef 	bl	b518c <_ZN5Print5printEc>
  return n;
}
   b51ae:	4420      	add	r0, r4
   b51b0:	bd38      	pop	{r3, r4, r5, pc}

000b51b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b51b2:	b538      	push	{r3, r4, r5, lr}
   b51b4:	4605      	mov	r5, r0
  return write(str);
   b51b6:	f7ff ffd7 	bl	b5168 <_ZN5Print5writeEPKc>
   b51ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b51bc:	4628      	mov	r0, r5
   b51be:	f7ff ffec 	bl	b519a <_ZN5Print7printlnEv>
  return n;
}
   b51c2:	4420      	add	r0, r4
   b51c4:	bd38      	pop	{r3, r4, r5, pc}

000b51c6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b51c6:	f7ff bff4 	b.w	b51b2 <_ZN5Print7printlnEPKc>

000b51ca <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51ca:	b530      	push	{r4, r5, lr}
   b51cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b51d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51d6:	bf98      	it	ls
   b51d8:	220a      	movls	r2, #10
   b51da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51dc:	460d      	mov	r5, r1
   b51de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51e2:	fb01 5312 	mls	r3, r1, r2, r5
   b51e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51ea:	2b09      	cmp	r3, #9
   b51ec:	bf94      	ite	ls
   b51ee:	3330      	addls	r3, #48	; 0x30
   b51f0:	3337      	addhi	r3, #55	; 0x37
   b51f2:	b2db      	uxtb	r3, r3
  } while(n);
   b51f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51fa:	d9ef      	bls.n	b51dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b51fc:	4621      	mov	r1, r4
   b51fe:	f7ff ffb3 	bl	b5168 <_ZN5Print5writeEPKc>
}
   b5202:	b00b      	add	sp, #44	; 0x2c
   b5204:	bd30      	pop	{r4, r5, pc}
	...

000b5208 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5208:	4b01      	ldr	r3, [pc, #4]	; (b5210 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b520a:	4a02      	ldr	r2, [pc, #8]	; (b5214 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b520c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b520e:	4770      	bx	lr
   b5210:	2003e6d4 	.word	0x2003e6d4
   b5214:	000b5e34 	.word	0x000b5e34

000b5218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5218:	4b02      	ldr	r3, [pc, #8]	; (b5224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b521a:	681a      	ldr	r2, [r3, #0]
   b521c:	4b02      	ldr	r3, [pc, #8]	; (b5228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b521e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5220:	4770      	bx	lr
   b5222:	bf00      	nop
   b5224:	2003dfc0 	.word	0x2003dfc0
   b5228:	2003e6d8 	.word	0x2003e6d8

000b522c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b522c:	2100      	movs	r1, #0
   b522e:	f7ff be7f 	b.w	b4f30 <system_delay_ms>
	...

000b5234 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5234:	4b01      	ldr	r3, [pc, #4]	; (b523c <_GLOBAL__sub_I_RGB+0x8>)
   b5236:	2200      	movs	r2, #0
   b5238:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b523a:	4770      	bx	lr
   b523c:	2003e6dc 	.word	0x2003e6dc

000b5240 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5240:	4b01      	ldr	r3, [pc, #4]	; (b5248 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5242:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5244:	4770      	bx	lr
   b5246:	bf00      	nop
   b5248:	2003dfc4 	.word	0x2003dfc4

000b524c <serialEventRun>:
{
   b524c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b524e:	4b0b      	ldr	r3, [pc, #44]	; (b527c <serialEventRun+0x30>)
   b5250:	b143      	cbz	r3, b5264 <serialEventRun+0x18>
   b5252:	f000 f967 	bl	b5524 <_Z16_fetch_usbserialv>
   b5256:	6803      	ldr	r3, [r0, #0]
   b5258:	691b      	ldr	r3, [r3, #16]
   b525a:	4798      	blx	r3
   b525c:	2800      	cmp	r0, #0
   b525e:	dd01      	ble.n	b5264 <serialEventRun+0x18>
        serialEvent();
   b5260:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5264:	4b06      	ldr	r3, [pc, #24]	; (b5280 <serialEventRun+0x34>)
   b5266:	b143      	cbz	r3, b527a <serialEventRun+0x2e>
   b5268:	f000 fbdc 	bl	b5a24 <_Z22__fetch_global_Serial1v>
   b526c:	6803      	ldr	r3, [r0, #0]
   b526e:	691b      	ldr	r3, [r3, #16]
   b5270:	4798      	blx	r3
   b5272:	2800      	cmp	r0, #0
   b5274:	dd01      	ble.n	b527a <serialEventRun+0x2e>
        serialEvent1();
   b5276:	f3af 8000 	nop.w
}
   b527a:	bd08      	pop	{r3, pc}
	...

000b5284 <_post_loop>:
{
   b5284:	b508      	push	{r3, lr}
	serialEventRun();
   b5286:	f7ff ffe1 	bl	b524c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b528a:	f7ff fd49 	bl	b4d20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b528e:	4b01      	ldr	r3, [pc, #4]	; (b5294 <_post_loop+0x10>)
   b5290:	6018      	str	r0, [r3, #0]
}
   b5292:	bd08      	pop	{r3, pc}
   b5294:	2003e740 	.word	0x2003e740

000b5298 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5298:	4805      	ldr	r0, [pc, #20]	; (b52b0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b529a:	4a06      	ldr	r2, [pc, #24]	; (b52b4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b529c:	4906      	ldr	r1, [pc, #24]	; (b52b8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b529e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b52a0:	1a12      	subs	r2, r2, r0
   b52a2:	f000 fc27 	bl	b5af4 <memcpy>
    __backup_sram_signature = signature;
   b52a6:	4b05      	ldr	r3, [pc, #20]	; (b52bc <_Z33system_initialize_user_backup_ramv+0x24>)
   b52a8:	4a05      	ldr	r2, [pc, #20]	; (b52c0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b52aa:	601a      	str	r2, [r3, #0]
}
   b52ac:	bd08      	pop	{r3, pc}
   b52ae:	bf00      	nop
   b52b0:	2003f400 	.word	0x2003f400
   b52b4:	2003f404 	.word	0x2003f404
   b52b8:	000b60b8 	.word	0x000b60b8
   b52bc:	2003f400 	.word	0x2003f400
   b52c0:	9a271c1e 	.word	0x9a271c1e

000b52c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b52c4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b52c6:	2300      	movs	r3, #0
   b52c8:	9300      	str	r3, [sp, #0]
   b52ca:	461a      	mov	r2, r3
   b52cc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b52d0:	f7ff fe40 	bl	b4f54 <system_ctrl_set_result>
}
   b52d4:	b003      	add	sp, #12
   b52d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b52dc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b52dc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b52de:	8843      	ldrh	r3, [r0, #2]
   b52e0:	2b0a      	cmp	r3, #10
   b52e2:	d008      	beq.n	b52f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b52e4:	2b50      	cmp	r3, #80	; 0x50
   b52e6:	d10b      	bne.n	b5300 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b52e8:	4b09      	ldr	r3, [pc, #36]	; (b5310 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b52ea:	681b      	ldr	r3, [r3, #0]
   b52ec:	b14b      	cbz	r3, b5302 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b52ee:	b003      	add	sp, #12
   b52f0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b52f4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b52f6:	f7ff ffe5 	bl	b52c4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b52fa:	b003      	add	sp, #12
   b52fc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5300:	2300      	movs	r3, #0
   b5302:	9300      	str	r3, [sp, #0]
   b5304:	461a      	mov	r2, r3
   b5306:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b530a:	f7ff fe23 	bl	b4f54 <system_ctrl_set_result>
}
   b530e:	e7f4      	b.n	b52fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5310:	2003e6f0 	.word	0x2003e6f0

000b5314 <module_user_init_hook>:
{
   b5314:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5316:	4812      	ldr	r0, [pc, #72]	; (b5360 <module_user_init_hook+0x4c>)
   b5318:	2100      	movs	r1, #0
   b531a:	f7ff fea5 	bl	b5068 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b531e:	4b11      	ldr	r3, [pc, #68]	; (b5364 <module_user_init_hook+0x50>)
   b5320:	681a      	ldr	r2, [r3, #0]
   b5322:	4b11      	ldr	r3, [pc, #68]	; (b5368 <module_user_init_hook+0x54>)
   b5324:	429a      	cmp	r2, r3
   b5326:	4b11      	ldr	r3, [pc, #68]	; (b536c <module_user_init_hook+0x58>)
   b5328:	bf0c      	ite	eq
   b532a:	2201      	moveq	r2, #1
   b532c:	2200      	movne	r2, #0
   b532e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5330:	d001      	beq.n	b5336 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5332:	f7ff ffb1 	bl	b5298 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5336:	f7ff fceb 	bl	b4d10 <HAL_RNG_GetRandomNumber>
   b533a:	4604      	mov	r4, r0
    srand(seed);
   b533c:	f000 fc0a 	bl	b5b54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5340:	4b0b      	ldr	r3, [pc, #44]	; (b5370 <module_user_init_hook+0x5c>)
   b5342:	b113      	cbz	r3, b534a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5344:	4620      	mov	r0, r4
   b5346:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b534a:	2100      	movs	r1, #0
   b534c:	4808      	ldr	r0, [pc, #32]	; (b5370 <module_user_init_hook+0x5c>)
   b534e:	f7ff fe6b 	bl	b5028 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5356:	4807      	ldr	r0, [pc, #28]	; (b5374 <module_user_init_hook+0x60>)
   b5358:	2100      	movs	r1, #0
   b535a:	f7ff bdf1 	b.w	b4f40 <system_ctrl_set_app_request_handler>
   b535e:	bf00      	nop
   b5360:	000b5241 	.word	0x000b5241
   b5364:	2003f400 	.word	0x2003f400
   b5368:	9a271c1e 	.word	0x9a271c1e
   b536c:	2003e6ec 	.word	0x2003e6ec
   b5370:	00000000 	.word	0x00000000
   b5374:	000b52dd 	.word	0x000b52dd

000b5378 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5378:	4770      	bx	lr

000b537a <_ZN9IPAddressD0Ev>:
   b537a:	b510      	push	{r4, lr}
   b537c:	2118      	movs	r1, #24
   b537e:	4604      	mov	r4, r0
   b5380:	f7fe fe91 	bl	b40a6 <_ZdlPvj>
   b5384:	4620      	mov	r0, r4
   b5386:	bd10      	pop	{r4, pc}

000b5388 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5388:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b538a:	7d03      	ldrb	r3, [r0, #20]
   b538c:	2b06      	cmp	r3, #6
{
   b538e:	b08d      	sub	sp, #52	; 0x34
   b5390:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5392:	f100 0704 	add.w	r7, r0, #4
   b5396:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b539a:	d012      	beq.n	b53c2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b539c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b53a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b53a4:	220a      	movs	r2, #10
   b53a6:	4630      	mov	r0, r6
   b53a8:	f7ff ff0f 	bl	b51ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b53ac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b53ae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b53b0:	d019      	beq.n	b53e6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b53b2:	2c00      	cmp	r4, #0
   b53b4:	d0f4      	beq.n	b53a0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b53b6:	212e      	movs	r1, #46	; 0x2e
   b53b8:	4630      	mov	r0, r6
   b53ba:	f7ff fee7 	bl	b518c <_ZN5Print5printEc>
   b53be:	4404      	add	r4, r0
   b53c0:	e7ee      	b.n	b53a0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53c2:	232f      	movs	r3, #47	; 0x2f
   b53c4:	466a      	mov	r2, sp
   b53c6:	4639      	mov	r1, r7
   b53c8:	200a      	movs	r0, #10
		buf[0] = 0;
   b53ca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b53ce:	f7ff fcb7 	bl	b4d40 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b53d2:	4668      	mov	r0, sp
   b53d4:	f7fe fe22 	bl	b401c <strlen>
   b53d8:	6833      	ldr	r3, [r6, #0]
   b53da:	4602      	mov	r2, r0
   b53dc:	68db      	ldr	r3, [r3, #12]
   b53de:	4669      	mov	r1, sp
   b53e0:	4630      	mov	r0, r6
   b53e2:	4798      	blx	r3
   b53e4:	4604      	mov	r4, r0
    }
    return n;
}
   b53e6:	4620      	mov	r0, r4
   b53e8:	b00d      	add	sp, #52	; 0x34
   b53ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b53ec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b53ec:	b510      	push	{r4, lr}
   b53ee:	4b05      	ldr	r3, [pc, #20]	; (b5404 <_ZN9IPAddressC1Ev+0x18>)
   b53f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b53f2:	2211      	movs	r2, #17
   b53f4:	f840 3b04 	str.w	r3, [r0], #4
   b53f8:	2100      	movs	r1, #0
   b53fa:	f000 fba3 	bl	b5b44 <memset>
}
   b53fe:	4620      	mov	r0, r4
   b5400:	bd10      	pop	{r4, pc}
   b5402:	bf00      	nop
   b5404:	000b5e5c 	.word	0x000b5e5c

000b5408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5408:	4603      	mov	r3, r0
   b540a:	4a07      	ldr	r2, [pc, #28]	; (b5428 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b540c:	b510      	push	{r4, lr}
   b540e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5412:	f101 0210 	add.w	r2, r1, #16
   b5416:	f851 4b04 	ldr.w	r4, [r1], #4
   b541a:	f843 4b04 	str.w	r4, [r3], #4
   b541e:	4291      	cmp	r1, r2
   b5420:	d1f9      	bne.n	b5416 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5422:	780a      	ldrb	r2, [r1, #0]
   b5424:	701a      	strb	r2, [r3, #0]
}
   b5426:	bd10      	pop	{r4, pc}
   b5428:	000b5e5c 	.word	0x000b5e5c

000b542c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b542c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b542e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5432:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5436:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b543a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b543e:	2304      	movs	r3, #4
   b5440:	6041      	str	r1, [r0, #4]
   b5442:	7503      	strb	r3, [r0, #20]
}
   b5444:	bd10      	pop	{r4, pc}
	...

000b5448 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5448:	b507      	push	{r0, r1, r2, lr}
   b544a:	4b06      	ldr	r3, [pc, #24]	; (b5464 <_ZN9IPAddressC1EPKh+0x1c>)
   b544c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b544e:	78cb      	ldrb	r3, [r1, #3]
   b5450:	9300      	str	r3, [sp, #0]
   b5452:	788b      	ldrb	r3, [r1, #2]
   b5454:	784a      	ldrb	r2, [r1, #1]
   b5456:	7809      	ldrb	r1, [r1, #0]
   b5458:	f7ff ffe8 	bl	b542c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b545c:	b003      	add	sp, #12
   b545e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5462:	bf00      	nop
   b5464:	000b5e5c 	.word	0x000b5e5c

000b5468 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5468:	7441      	strb	r1, [r0, #17]
}
   b546a:	4770      	bx	lr

000b546c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b546c:	4770      	bx	lr

000b546e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b546e:	4770      	bx	lr

000b5470 <_ZN9USBSerial4readEv>:
{
   b5470:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5472:	2100      	movs	r1, #0
   b5474:	7c00      	ldrb	r0, [r0, #16]
   b5476:	f7ff fd3b 	bl	b4ef0 <HAL_USB_USART_Receive_Data>
}
   b547a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b547e:	bd08      	pop	{r3, pc}

000b5480 <_ZN9USBSerial4peekEv>:
{
   b5480:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5482:	2101      	movs	r1, #1
   b5484:	7c00      	ldrb	r0, [r0, #16]
   b5486:	f7ff fd33 	bl	b4ef0 <HAL_USB_USART_Receive_Data>
}
   b548a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b548e:	bd08      	pop	{r3, pc}

000b5490 <_ZN9USBSerial17availableForWriteEv>:
{
   b5490:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5492:	7c00      	ldrb	r0, [r0, #16]
   b5494:	f7ff fd24 	bl	b4ee0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5498:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b549c:	bd08      	pop	{r3, pc}

000b549e <_ZN9USBSerial9availableEv>:
{
   b549e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b54a0:	7c00      	ldrb	r0, [r0, #16]
   b54a2:	f7ff fd15 	bl	b4ed0 <HAL_USB_USART_Available_Data>
}
   b54a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54aa:	bd08      	pop	{r3, pc}

000b54ac <_ZN9USBSerial5writeEh>:
{
   b54ac:	b513      	push	{r0, r1, r4, lr}
   b54ae:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54b0:	7c00      	ldrb	r0, [r0, #16]
{
   b54b2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b54b4:	f7ff fd14 	bl	b4ee0 <HAL_USB_USART_Available_Data_For_Write>
   b54b8:	2800      	cmp	r0, #0
   b54ba:	9901      	ldr	r1, [sp, #4]
   b54bc:	dc01      	bgt.n	b54c2 <_ZN9USBSerial5writeEh+0x16>
   b54be:	7c60      	ldrb	r0, [r4, #17]
   b54c0:	b120      	cbz	r0, b54cc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b54c2:	7c20      	ldrb	r0, [r4, #16]
   b54c4:	f7ff fd1c 	bl	b4f00 <HAL_USB_USART_Send_Data>
   b54c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b54cc:	b002      	add	sp, #8
   b54ce:	bd10      	pop	{r4, pc}

000b54d0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b54d0:	7c00      	ldrb	r0, [r0, #16]
   b54d2:	f7ff bd1d 	b.w	b4f10 <HAL_USB_USART_Flush_Data>

000b54d6 <_ZN9USBSerialD0Ev>:
   b54d6:	b510      	push	{r4, lr}
   b54d8:	2114      	movs	r1, #20
   b54da:	4604      	mov	r4, r0
   b54dc:	f7fe fde3 	bl	b40a6 <_ZdlPvj>
   b54e0:	4620      	mov	r0, r4
   b54e2:	bd10      	pop	{r4, pc}

000b54e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b54e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b54e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54ea:	4604      	mov	r4, r0
   b54ec:	4608      	mov	r0, r1
   b54ee:	2100      	movs	r1, #0
   b54f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b54f4:	4b04      	ldr	r3, [pc, #16]	; (b5508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b54f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b54f8:	2301      	movs	r3, #1
  _serial = serial;
   b54fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b54fe:	4611      	mov	r1, r2
   b5500:	f7ff fcd6 	bl	b4eb0 <HAL_USB_USART_Init>
}
   b5504:	4620      	mov	r0, r4
   b5506:	bd10      	pop	{r4, pc}
   b5508:	000b5e70 	.word	0x000b5e70

000b550c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b550c:	7c00      	ldrb	r0, [r0, #16]
   b550e:	2200      	movs	r2, #0
   b5510:	f7ff bcd6 	b.w	b4ec0 <HAL_USB_USART_Begin>

000b5514 <_Z19acquireSerialBufferv>:
{
   b5514:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5516:	2214      	movs	r2, #20
{
   b5518:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b551a:	2100      	movs	r1, #0
   b551c:	f000 fb12 	bl	b5b44 <memset>
}
   b5520:	4620      	mov	r0, r4
   b5522:	bd10      	pop	{r4, pc}

000b5524 <_Z16_fetch_usbserialv>:
{
   b5524:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5526:	4c0f      	ldr	r4, [pc, #60]	; (b5564 <_Z16_fetch_usbserialv+0x40>)
{
   b5528:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b552a:	a803      	add	r0, sp, #12
   b552c:	f7ff fff2 	bl	b5514 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5530:	7821      	ldrb	r1, [r4, #0]
   b5532:	f3bf 8f5b 	dmb	ish
   b5536:	f011 0101 	ands.w	r1, r1, #1
   b553a:	d10f      	bne.n	b555c <_Z16_fetch_usbserialv+0x38>
   b553c:	4620      	mov	r0, r4
   b553e:	9101      	str	r1, [sp, #4]
   b5540:	f7fe fdb3 	bl	b40aa <__cxa_guard_acquire>
   b5544:	9901      	ldr	r1, [sp, #4]
   b5546:	b148      	cbz	r0, b555c <_Z16_fetch_usbserialv+0x38>
   b5548:	aa03      	add	r2, sp, #12
   b554a:	4807      	ldr	r0, [pc, #28]	; (b5568 <_Z16_fetch_usbserialv+0x44>)
   b554c:	f7ff ffca 	bl	b54e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5550:	4620      	mov	r0, r4
   b5552:	f7fe fdaf 	bl	b40b4 <__cxa_guard_release>
   b5556:	4805      	ldr	r0, [pc, #20]	; (b556c <_Z16_fetch_usbserialv+0x48>)
   b5558:	f000 fac6 	bl	b5ae8 <atexit>
	return _usbserial;
}
   b555c:	4802      	ldr	r0, [pc, #8]	; (b5568 <_Z16_fetch_usbserialv+0x44>)
   b555e:	b008      	add	sp, #32
   b5560:	bd10      	pop	{r4, pc}
   b5562:	bf00      	nop
   b5564:	2003e6f4 	.word	0x2003e6f4
   b5568:	2003e6f8 	.word	0x2003e6f8
   b556c:	000b546d 	.word	0x000b546d

000b5570 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5570:	4770      	bx	lr

000b5572 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5572:	7441      	strb	r1, [r0, #17]
}
   b5574:	4770      	bx	lr

000b5576 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5576:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5578:	7c00      	ldrb	r0, [r0, #16]
   b557a:	f7ff fc19 	bl	b4db0 <hal_usart_available_data_for_write>
}
   b557e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5582:	bd08      	pop	{r3, pc}

000b5584 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5584:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5586:	7c00      	ldrb	r0, [r0, #16]
   b5588:	f7ff fbea 	bl	b4d60 <hal_usart_available>
}
   b558c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5590:	bd08      	pop	{r3, pc}

000b5592 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5592:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5594:	7c00      	ldrb	r0, [r0, #16]
   b5596:	f7ff fbf3 	bl	b4d80 <hal_usart_peek>
}
   b559a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b559e:	bd08      	pop	{r3, pc}

000b55a0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b55a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b55a2:	7c00      	ldrb	r0, [r0, #16]
   b55a4:	f7ff fbe4 	bl	b4d70 <hal_usart_read>
}
   b55a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b55ac:	bd08      	pop	{r3, pc}

000b55ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b55ae:	7c00      	ldrb	r0, [r0, #16]
   b55b0:	f7ff bbee 	b.w	b4d90 <hal_usart_flush>

000b55b4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b55b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b55b6:	7c45      	ldrb	r5, [r0, #17]
{
   b55b8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b55ba:	b12d      	cbz	r5, b55c8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b55bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b55be:	b003      	add	sp, #12
   b55c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b55c4:	f7ff bbc4 	b.w	b4d50 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b55c8:	7c00      	ldrb	r0, [r0, #16]
   b55ca:	9101      	str	r1, [sp, #4]
   b55cc:	f7ff fbf0 	bl	b4db0 <hal_usart_available_data_for_write>
   b55d0:	2800      	cmp	r0, #0
   b55d2:	9901      	ldr	r1, [sp, #4]
   b55d4:	dcf2      	bgt.n	b55bc <_ZN11USARTSerial5writeEh+0x8>
}
   b55d6:	4628      	mov	r0, r5
   b55d8:	b003      	add	sp, #12
   b55da:	bd30      	pop	{r4, r5, pc}

000b55dc <_ZN11USARTSerialD0Ev>:
   b55dc:	b510      	push	{r4, lr}
   b55de:	2114      	movs	r1, #20
   b55e0:	4604      	mov	r4, r0
   b55e2:	f7fe fd60 	bl	b40a6 <_ZdlPvj>
   b55e6:	4620      	mov	r0, r4
   b55e8:	bd10      	pop	{r4, pc}
	...

000b55ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b55ec:	b510      	push	{r4, lr}
   b55ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b55f2:	4604      	mov	r4, r0
   b55f4:	4608      	mov	r0, r1
   b55f6:	4611      	mov	r1, r2
   b55f8:	2200      	movs	r2, #0
   b55fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b55fe:	4b04      	ldr	r3, [pc, #16]	; (b5610 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5600:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5602:	2301      	movs	r3, #1
  _serial = serial;
   b5604:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5606:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5608:	f7ff fbda 	bl	b4dc0 <hal_usart_init_ex>
}
   b560c:	4620      	mov	r0, r4
   b560e:	bd10      	pop	{r4, pc}
   b5610:	000b5ea0 	.word	0x000b5ea0

000b5614 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5614:	4770      	bx	lr

000b5616 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5618:	4606      	mov	r6, r0
   b561a:	4615      	mov	r5, r2
   b561c:	460c      	mov	r4, r1
   b561e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5620:	42bc      	cmp	r4, r7
   b5622:	d006      	beq.n	b5632 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5624:	6833      	ldr	r3, [r6, #0]
   b5626:	f814 1b01 	ldrb.w	r1, [r4], #1
   b562a:	689b      	ldr	r3, [r3, #8]
   b562c:	4630      	mov	r0, r6
   b562e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5630:	e7f6      	b.n	b5620 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5632:	4628      	mov	r0, r5
   b5634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5636 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5636:	7c00      	ldrb	r0, [r0, #16]
   b5638:	2200      	movs	r2, #0
   b563a:	f7ff bbe9 	b.w	b4e10 <hal_i2c_write>

000b563e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b563e:	7c00      	ldrb	r0, [r0, #16]
   b5640:	2100      	movs	r1, #0
   b5642:	f7ff bbed 	b.w	b4e20 <hal_i2c_available>

000b5646 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5646:	7c00      	ldrb	r0, [r0, #16]
   b5648:	2100      	movs	r1, #0
   b564a:	f7ff bbf1 	b.w	b4e30 <hal_i2c_read>

000b564e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b564e:	7c00      	ldrb	r0, [r0, #16]
   b5650:	2100      	movs	r1, #0
   b5652:	f7ff bbf5 	b.w	b4e40 <hal_i2c_peek>

000b5656 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5656:	7c00      	ldrb	r0, [r0, #16]
   b5658:	2100      	movs	r1, #0
   b565a:	f7ff bbf9 	b.w	b4e50 <hal_i2c_flush>

000b565e <_ZN7TwoWireD0Ev>:
   b565e:	b510      	push	{r4, lr}
   b5660:	2114      	movs	r1, #20
   b5662:	4604      	mov	r4, r0
   b5664:	f7fe fd1f 	bl	b40a6 <_ZdlPvj>
   b5668:	4620      	mov	r0, r4
   b566a:	bd10      	pop	{r4, pc}

000b566c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b566c:	b510      	push	{r4, lr}
   b566e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5672:	4604      	mov	r4, r0
   b5674:	4608      	mov	r0, r1
   b5676:	2100      	movs	r1, #0
   b5678:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b567c:	4b03      	ldr	r3, [pc, #12]	; (b568c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b567e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5680:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5682:	4611      	mov	r1, r2
   b5684:	f7ff fbf4 	bl	b4e70 <hal_i2c_init>
}
   b5688:	4620      	mov	r0, r4
   b568a:	bd10      	pop	{r4, pc}
   b568c:	000b5ed0 	.word	0x000b5ed0

000b5690 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b5690:	7c00      	ldrb	r0, [r0, #16]
   b5692:	2200      	movs	r2, #0
   b5694:	f7ff bb9c 	b.w	b4dd0 <hal_i2c_set_speed>

000b5698 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5698:	2300      	movs	r3, #0
   b569a:	7c00      	ldrb	r0, [r0, #16]
   b569c:	461a      	mov	r2, r3
   b569e:	4619      	mov	r1, r3
   b56a0:	f7ff bb9e 	b.w	b4de0 <hal_i2c_begin>

000b56a4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b56a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b56a6:	2200      	movs	r2, #0
   b56a8:	2314      	movs	r3, #20
   b56aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b56ae:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b56b2:	780b      	ldrb	r3, [r1, #0]
   b56b4:	f88d 3008 	strb.w	r3, [sp, #8]
   b56b8:	684b      	ldr	r3, [r1, #4]
   b56ba:	9303      	str	r3, [sp, #12]
   b56bc:	68cb      	ldr	r3, [r1, #12]
   b56be:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b56c0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b56c2:	7a0b      	ldrb	r3, [r1, #8]
   b56c4:	9305      	str	r3, [sp, #20]
   b56c6:	a901      	add	r1, sp, #4
   b56c8:	f7ff fbda 	bl	b4e80 <hal_i2c_request_ex>
}
   b56cc:	b007      	add	sp, #28
   b56ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b56d2 <_ZN7TwoWire11requestFromEhjh>:
{
   b56d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b56d4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b56d6:	f88d 1000 	strb.w	r1, [sp]
   b56da:	f04f 0164 	mov.w	r1, #100	; 0x64
   b56de:	9103      	str	r1, [sp, #12]
   b56e0:	bf18      	it	ne
   b56e2:	2301      	movne	r3, #1
   b56e4:	4669      	mov	r1, sp
    size_ = size;
   b56e6:	9201      	str	r2, [sp, #4]
   b56e8:	f88d 3008 	strb.w	r3, [sp, #8]
   b56ec:	f7ff ffda 	bl	b56a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b56f0:	b005      	add	sp, #20
   b56f2:	f85d fb04 	ldr.w	pc, [sp], #4

000b56f6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b56f6:	2301      	movs	r3, #1
   b56f8:	f7ff bfeb 	b.w	b56d2 <_ZN7TwoWire11requestFromEhjh>

000b56fc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b56fc:	7c00      	ldrb	r0, [r0, #16]
   b56fe:	2200      	movs	r2, #0
   b5700:	f7ff bb76 	b.w	b4df0 <hal_i2c_begin_transmission>

000b5704 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5704:	b2c9      	uxtb	r1, r1
   b5706:	f7ff bff9 	b.w	b56fc <_ZN7TwoWire17beginTransmissionEh>

000b570a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b570a:	7c00      	ldrb	r0, [r0, #16]
   b570c:	2200      	movs	r2, #0
   b570e:	f7ff bb77 	b.w	b4e00 <hal_i2c_end_transmission>

000b5712 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5712:	2101      	movs	r1, #1
   b5714:	f7ff bff9 	b.w	b570a <_ZN7TwoWire15endTransmissionEh>

000b5718 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5718:	2200      	movs	r2, #0
   b571a:	6840      	ldr	r0, [r0, #4]
   b571c:	4611      	mov	r1, r2
   b571e:	f7ff bc3b 	b.w	b4f98 <network_ready>

000b5722 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5722:	2200      	movs	r2, #0
   b5724:	6840      	ldr	r0, [r0, #4]
   b5726:	4611      	mov	r1, r2
   b5728:	f7ff bc56 	b.w	b4fd8 <network_listening>

000b572c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b572c:	2200      	movs	r2, #0
   b572e:	6840      	ldr	r0, [r0, #4]
   b5730:	4611      	mov	r1, r2
   b5732:	f7ff bc61 	b.w	b4ff8 <network_get_listen_timeout>

000b5736 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5736:	6840      	ldr	r0, [r0, #4]
   b5738:	2200      	movs	r2, #0
   b573a:	f7ff bc55 	b.w	b4fe8 <network_set_listen_timeout>

000b573e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b573e:	6840      	ldr	r0, [r0, #4]
   b5740:	2200      	movs	r2, #0
   b5742:	f081 0101 	eor.w	r1, r1, #1
   b5746:	f7ff bc3f 	b.w	b4fc8 <network_listen>

000b574a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b574a:	2300      	movs	r3, #0
   b574c:	6840      	ldr	r0, [r0, #4]
   b574e:	461a      	mov	r2, r3
   b5750:	4619      	mov	r1, r3
   b5752:	f7ff bc31 	b.w	b4fb8 <network_off>

000b5756 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5756:	2300      	movs	r3, #0
   b5758:	6840      	ldr	r0, [r0, #4]
   b575a:	461a      	mov	r2, r3
   b575c:	4619      	mov	r1, r3
   b575e:	f7ff bc23 	b.w	b4fa8 <network_on>

000b5762 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5762:	2200      	movs	r2, #0
   b5764:	6840      	ldr	r0, [r0, #4]
   b5766:	4611      	mov	r1, r2
   b5768:	f7ff bc06 	b.w	b4f78 <network_connecting>

000b576c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b576c:	6840      	ldr	r0, [r0, #4]
   b576e:	2200      	movs	r2, #0
   b5770:	2102      	movs	r1, #2
   b5772:	f7ff bc09 	b.w	b4f88 <network_disconnect>

000b5776 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5776:	2300      	movs	r3, #0
   b5778:	6840      	ldr	r0, [r0, #4]
   b577a:	461a      	mov	r2, r3
   b577c:	f7ff bbf4 	b.w	b4f68 <network_connect>

000b5780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5780:	4b02      	ldr	r3, [pc, #8]	; (b578c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5782:	2204      	movs	r2, #4
   b5784:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5786:	4a02      	ldr	r2, [pc, #8]	; (b5790 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5788:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b578a:	4770      	bx	lr
   b578c:	2003e70c 	.word	0x2003e70c
   b5790:	000b5ef8 	.word	0x000b5ef8

000b5794 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5794:	2300      	movs	r3, #0
   b5796:	6840      	ldr	r0, [r0, #4]
   b5798:	461a      	mov	r2, r3
   b579a:	f7ff bbe5 	b.w	b4f68 <network_connect>

000b579e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b579e:	6840      	ldr	r0, [r0, #4]
   b57a0:	2200      	movs	r2, #0
   b57a2:	2102      	movs	r1, #2
   b57a4:	f7ff bbf0 	b.w	b4f88 <network_disconnect>

000b57a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b57a8:	2200      	movs	r2, #0
   b57aa:	6840      	ldr	r0, [r0, #4]
   b57ac:	4611      	mov	r1, r2
   b57ae:	f7ff bbe3 	b.w	b4f78 <network_connecting>

000b57b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b57b2:	2200      	movs	r2, #0
   b57b4:	6840      	ldr	r0, [r0, #4]
   b57b6:	4611      	mov	r1, r2
   b57b8:	f7ff bbee 	b.w	b4f98 <network_ready>

000b57bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b57bc:	2300      	movs	r3, #0
   b57be:	6840      	ldr	r0, [r0, #4]
   b57c0:	461a      	mov	r2, r3
   b57c2:	4619      	mov	r1, r3
   b57c4:	f7ff bbf0 	b.w	b4fa8 <network_on>

000b57c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b57c8:	2300      	movs	r3, #0
   b57ca:	6840      	ldr	r0, [r0, #4]
   b57cc:	461a      	mov	r2, r3
   b57ce:	4619      	mov	r1, r3
   b57d0:	f7ff bbf2 	b.w	b4fb8 <network_off>

000b57d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b57d4:	6840      	ldr	r0, [r0, #4]
   b57d6:	2100      	movs	r1, #0
   b57d8:	f7ff bc16 	b.w	b5008 <network_is_on>

000b57dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b57dc:	6840      	ldr	r0, [r0, #4]
   b57de:	2100      	movs	r1, #0
   b57e0:	f7ff bc1a 	b.w	b5018 <network_is_off>

000b57e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b57e4:	6840      	ldr	r0, [r0, #4]
   b57e6:	2200      	movs	r2, #0
   b57e8:	f081 0101 	eor.w	r1, r1, #1
   b57ec:	f7ff bbec 	b.w	b4fc8 <network_listen>

000b57f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b57f0:	6840      	ldr	r0, [r0, #4]
   b57f2:	2200      	movs	r2, #0
   b57f4:	f7ff bbf8 	b.w	b4fe8 <network_set_listen_timeout>

000b57f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b57f8:	2200      	movs	r2, #0
   b57fa:	6840      	ldr	r0, [r0, #4]
   b57fc:	4611      	mov	r1, r2
   b57fe:	f7ff bbfb 	b.w	b4ff8 <network_get_listen_timeout>

000b5802 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5802:	2200      	movs	r2, #0
   b5804:	6840      	ldr	r0, [r0, #4]
   b5806:	4611      	mov	r1, r2
   b5808:	f7ff bbe6 	b.w	b4fd8 <network_listening>

000b580c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b580c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5810:	b095      	sub	sp, #84	; 0x54
   b5812:	4614      	mov	r4, r2
   b5814:	460d      	mov	r5, r1
   b5816:	4607      	mov	r7, r0
    IPAddress addr;
   b5818:	f7ff fde8 	bl	b53ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b581c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b581e:	221c      	movs	r2, #28
   b5820:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5822:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5824:	f000 f98e 	bl	b5b44 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5828:	2340      	movs	r3, #64	; 0x40
   b582a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b582c:	4620      	mov	r0, r4
   b582e:	466b      	mov	r3, sp
   b5830:	aa0c      	add	r2, sp, #48	; 0x30
   b5832:	2100      	movs	r1, #0
   b5834:	f7ff fa44 	bl	b4cc0 <netdb_getaddrinfo>
    if (!r) {
   b5838:	4604      	mov	r4, r0
   b583a:	2800      	cmp	r0, #0
   b583c:	d14b      	bne.n	b58d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b583e:	4602      	mov	r2, r0
   b5840:	2101      	movs	r1, #1
   b5842:	6868      	ldr	r0, [r5, #4]
   b5844:	f7ff fba8 	bl	b4f98 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5848:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b584a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b584c:	4622      	mov	r2, r4
   b584e:	6868      	ldr	r0, [r5, #4]
   b5850:	f7ff fba2 	bl	b4f98 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5854:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5856:	4681      	mov	r9, r0
        bool ok = false;
   b5858:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b585a:	2e00      	cmp	r6, #0
   b585c:	d03b      	beq.n	b58d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b585e:	2900      	cmp	r1, #0
   b5860:	d139      	bne.n	b58d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5862:	6873      	ldr	r3, [r6, #4]
   b5864:	2b02      	cmp	r3, #2
   b5866:	d003      	beq.n	b5870 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5868:	2b0a      	cmp	r3, #10
   b586a:	d011      	beq.n	b5890 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b586c:	69f6      	ldr	r6, [r6, #28]
   b586e:	e7f4      	b.n	b585a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5870:	f1b8 0f00 	cmp.w	r8, #0
   b5874:	d0fa      	beq.n	b586c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5876:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5878:	a806      	add	r0, sp, #24
   b587a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b587c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b587e:	f7ff fde3 	bl	b5448 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5884:	1d3c      	adds	r4, r7, #4
   b5886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5888:	682b      	ldr	r3, [r5, #0]
   b588a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b588c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b588e:	e7ed      	b.n	b586c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5890:	f1b9 0f00 	cmp.w	r9, #0
   b5894:	d0ea      	beq.n	b586c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5896:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5898:	2210      	movs	r2, #16
   b589a:	a801      	add	r0, sp, #4
   b589c:	f000 f952 	bl	b5b44 <memset>
                    a.v = 6;
   b58a0:	2306      	movs	r3, #6
   b58a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b58a6:	ad01      	add	r5, sp, #4
   b58a8:	f104 0308 	add.w	r3, r4, #8
   b58ac:	3418      	adds	r4, #24
   b58ae:	6818      	ldr	r0, [r3, #0]
   b58b0:	6859      	ldr	r1, [r3, #4]
   b58b2:	462a      	mov	r2, r5
   b58b4:	c203      	stmia	r2!, {r0, r1}
   b58b6:	3308      	adds	r3, #8
   b58b8:	42a3      	cmp	r3, r4
   b58ba:	4615      	mov	r5, r2
   b58bc:	d1f7      	bne.n	b58ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b58be:	a901      	add	r1, sp, #4
   b58c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b58c2:	ad07      	add	r5, sp, #28
   b58c4:	f7ff fda0 	bl	b5408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b58c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58ca:	1d3c      	adds	r4, r7, #4
   b58cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58ce:	682b      	ldr	r3, [r5, #0]
   b58d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b58d2:	4649      	mov	r1, r9
   b58d4:	e7ca      	b.n	b586c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b58d6:	9800      	ldr	r0, [sp, #0]
   b58d8:	f7ff f9ea 	bl	b4cb0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b58dc:	4638      	mov	r0, r7
   b58de:	b015      	add	sp, #84	; 0x54
   b58e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b58e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b58e4:	4b02      	ldr	r3, [pc, #8]	; (b58f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b58e6:	4a03      	ldr	r2, [pc, #12]	; (b58f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b58e8:	601a      	str	r2, [r3, #0]
   b58ea:	2200      	movs	r2, #0
   b58ec:	605a      	str	r2, [r3, #4]

} // spark
   b58ee:	4770      	bx	lr
   b58f0:	2003e714 	.word	0x2003e714
   b58f4:	000b5f34 	.word	0x000b5f34

000b58f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b58f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b58fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b58fc:	d902      	bls.n	b5904 <pinAvailable+0xc>
    return false;
   b58fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5900:	b002      	add	sp, #8
   b5902:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5904:	f1a0 030b 	sub.w	r3, r0, #11
   b5908:	2b02      	cmp	r3, #2
   b590a:	d81a      	bhi.n	b5942 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b590c:	4c17      	ldr	r4, [pc, #92]	; (b596c <pinAvailable+0x74>)
   b590e:	7821      	ldrb	r1, [r4, #0]
   b5910:	f3bf 8f5b 	dmb	ish
   b5914:	f011 0101 	ands.w	r1, r1, #1
   b5918:	d10b      	bne.n	b5932 <pinAvailable+0x3a>
   b591a:	4620      	mov	r0, r4
   b591c:	9101      	str	r1, [sp, #4]
   b591e:	f7fe fbc4 	bl	b40aa <__cxa_guard_acquire>
   b5922:	9901      	ldr	r1, [sp, #4]
   b5924:	b128      	cbz	r0, b5932 <pinAvailable+0x3a>
   b5926:	4812      	ldr	r0, [pc, #72]	; (b5970 <pinAvailable+0x78>)
   b5928:	f7ff fbe4 	bl	b50f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b592c:	4620      	mov	r0, r4
   b592e:	f7fe fbc1 	bl	b40b4 <__cxa_guard_release>
   b5932:	4b0f      	ldr	r3, [pc, #60]	; (b5970 <pinAvailable+0x78>)
   b5934:	7818      	ldrb	r0, [r3, #0]
   b5936:	f7ff fab3 	bl	b4ea0 <hal_spi_is_enabled>
   b593a:	2800      	cmp	r0, #0
   b593c:	d1df      	bne.n	b58fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b593e:	2001      	movs	r0, #1
   b5940:	e7de      	b.n	b5900 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5942:	2801      	cmp	r0, #1
   b5944:	d809      	bhi.n	b595a <pinAvailable+0x62>
   b5946:	f000 f8a9 	bl	b5a9c <_Z19__fetch_global_Wirev>
   b594a:	2100      	movs	r1, #0
   b594c:	7c00      	ldrb	r0, [r0, #16]
   b594e:	f7ff fa87 	bl	b4e60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5952:	f080 0001 	eor.w	r0, r0, #1
   b5956:	b2c0      	uxtb	r0, r0
   b5958:	e7d2      	b.n	b5900 <pinAvailable+0x8>
   b595a:	3809      	subs	r0, #9
   b595c:	2801      	cmp	r0, #1
   b595e:	d8ee      	bhi.n	b593e <pinAvailable+0x46>
   b5960:	f000 f860 	bl	b5a24 <_Z22__fetch_global_Serial1v>
   b5964:	7c00      	ldrb	r0, [r0, #16]
   b5966:	f7ff fa1b 	bl	b4da0 <hal_usart_is_enabled>
   b596a:	e7f2      	b.n	b5952 <pinAvailable+0x5a>
   b596c:	2003e71c 	.word	0x2003e71c
   b5970:	2003e720 	.word	0x2003e720

000b5974 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5974:	2823      	cmp	r0, #35	; 0x23
{
   b5976:	b538      	push	{r3, r4, r5, lr}
   b5978:	4604      	mov	r4, r0
   b597a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b597c:	d80a      	bhi.n	b5994 <pinMode+0x20>
   b597e:	29ff      	cmp	r1, #255	; 0xff
   b5980:	d008      	beq.n	b5994 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5982:	f7ff ffb9 	bl	b58f8 <pinAvailable>
   b5986:	b128      	cbz	r0, b5994 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5988:	4629      	mov	r1, r5
   b598a:	4620      	mov	r0, r4
}
   b598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5990:	f7ff b99e 	b.w	b4cd0 <hal_gpio_mode>
}
   b5994:	bd38      	pop	{r3, r4, r5, pc}

000b5996 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5996:	b538      	push	{r3, r4, r5, lr}
   b5998:	4604      	mov	r4, r0
   b599a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b599c:	f7ff f9a0 	bl	b4ce0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b59a0:	28ff      	cmp	r0, #255	; 0xff
   b59a2:	d010      	beq.n	b59c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b59a4:	2806      	cmp	r0, #6
   b59a6:	d804      	bhi.n	b59b2 <digitalWrite+0x1c>
   b59a8:	234d      	movs	r3, #77	; 0x4d
   b59aa:	fa23 f000 	lsr.w	r0, r3, r0
   b59ae:	07c3      	lsls	r3, r0, #31
   b59b0:	d409      	bmi.n	b59c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b59b2:	4620      	mov	r0, r4
   b59b4:	f7ff ffa0 	bl	b58f8 <pinAvailable>
   b59b8:	b128      	cbz	r0, b59c6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b59ba:	4629      	mov	r1, r5
   b59bc:	4620      	mov	r0, r4
}
   b59be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b59c2:	f7ff b995 	b.w	b4cf0 <hal_gpio_write>
}
   b59c6:	bd38      	pop	{r3, r4, r5, pc}

000b59c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b59c8:	b510      	push	{r4, lr}
   b59ca:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b59cc:	f7ff f988 	bl	b4ce0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b59d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b59d2:	b2db      	uxtb	r3, r3
   b59d4:	2b01      	cmp	r3, #1
   b59d6:	d908      	bls.n	b59ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b59d8:	4620      	mov	r0, r4
   b59da:	f7ff ff8d 	bl	b58f8 <pinAvailable>
   b59de:	b120      	cbz	r0, b59ea <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b59e0:	4620      	mov	r0, r4
}
   b59e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b59e6:	f7ff b98b 	b.w	b4d00 <hal_gpio_read>
}
   b59ea:	2000      	movs	r0, #0
   b59ec:	bd10      	pop	{r4, pc}

000b59ee <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b59ee:	4770      	bx	lr

000b59f0 <_Z20acquireSerial1Bufferv>:
{
   b59f0:	b538      	push	{r3, r4, r5, lr}
   b59f2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b59f4:	2514      	movs	r5, #20
   b59f6:	462a      	mov	r2, r5
   b59f8:	2100      	movs	r1, #0
   b59fa:	f000 f8a3 	bl	b5b44 <memset>
   b59fe:	8025      	strh	r5, [r4, #0]
   b5a00:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a02:	4907      	ldr	r1, [pc, #28]	; (b5a20 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5a04:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a06:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5a08:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a0a:	f000 f86b 	bl	b5ae4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a0e:	4904      	ldr	r1, [pc, #16]	; (b5a20 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5a10:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a12:	4628      	mov	r0, r5
   b5a14:	f000 f866 	bl	b5ae4 <_ZnajRKSt9nothrow_t>
    };
   b5a18:	60e0      	str	r0, [r4, #12]
}
   b5a1a:	4620      	mov	r0, r4
   b5a1c:	bd38      	pop	{r3, r4, r5, pc}
   b5a1e:	bf00      	nop
   b5a20:	000b5f68 	.word	0x000b5f68

000b5a24 <_Z22__fetch_global_Serial1v>:
{
   b5a24:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a26:	4d0e      	ldr	r5, [pc, #56]	; (b5a60 <_Z22__fetch_global_Serial1v+0x3c>)
   b5a28:	7829      	ldrb	r1, [r5, #0]
   b5a2a:	f3bf 8f5b 	dmb	ish
   b5a2e:	f011 0401 	ands.w	r4, r1, #1
{
   b5a32:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a34:	d111      	bne.n	b5a5a <_Z22__fetch_global_Serial1v+0x36>
   b5a36:	4628      	mov	r0, r5
   b5a38:	f7fe fb37 	bl	b40aa <__cxa_guard_acquire>
   b5a3c:	b168      	cbz	r0, b5a5a <_Z22__fetch_global_Serial1v+0x36>
   b5a3e:	a801      	add	r0, sp, #4
   b5a40:	f7ff ffd6 	bl	b59f0 <_Z20acquireSerial1Bufferv>
   b5a44:	aa01      	add	r2, sp, #4
   b5a46:	4621      	mov	r1, r4
   b5a48:	4806      	ldr	r0, [pc, #24]	; (b5a64 <_Z22__fetch_global_Serial1v+0x40>)
   b5a4a:	f7ff fdcf 	bl	b55ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5a4e:	4628      	mov	r0, r5
   b5a50:	f7fe fb30 	bl	b40b4 <__cxa_guard_release>
   b5a54:	4804      	ldr	r0, [pc, #16]	; (b5a68 <_Z22__fetch_global_Serial1v+0x44>)
   b5a56:	f000 f847 	bl	b5ae8 <atexit>
    return serial1;
}
   b5a5a:	4802      	ldr	r0, [pc, #8]	; (b5a64 <_Z22__fetch_global_Serial1v+0x40>)
   b5a5c:	b007      	add	sp, #28
   b5a5e:	bd30      	pop	{r4, r5, pc}
   b5a60:	2003e728 	.word	0x2003e728
   b5a64:	2003e72c 	.word	0x2003e72c
   b5a68:	000b59ef 	.word	0x000b59ef

000b5a6c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a6c:	4770      	bx	lr
	...

000b5a70 <_Z17acquireWireBufferv>:
{
   b5a70:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5a72:	2520      	movs	r5, #32
   b5a74:	2314      	movs	r3, #20
{
   b5a76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5a78:	6003      	str	r3, [r0, #0]
   b5a7a:	6085      	str	r5, [r0, #8]
   b5a7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a7e:	4906      	ldr	r1, [pc, #24]	; (b5a98 <_Z17acquireWireBufferv+0x28>)
   b5a80:	4628      	mov	r0, r5
   b5a82:	f000 f82f 	bl	b5ae4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a86:	4904      	ldr	r1, [pc, #16]	; (b5a98 <_Z17acquireWireBufferv+0x28>)
	};
   b5a88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a8a:	4628      	mov	r0, r5
   b5a8c:	f000 f82a 	bl	b5ae4 <_ZnajRKSt9nothrow_t>
	};
   b5a90:	60e0      	str	r0, [r4, #12]
}
   b5a92:	4620      	mov	r0, r4
   b5a94:	bd38      	pop	{r3, r4, r5, pc}
   b5a96:	bf00      	nop
   b5a98:	000b5f68 	.word	0x000b5f68

000b5a9c <_Z19__fetch_global_Wirev>:
{
   b5a9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a9e:	4d0e      	ldr	r5, [pc, #56]	; (b5ad8 <_Z19__fetch_global_Wirev+0x3c>)
   b5aa0:	7829      	ldrb	r1, [r5, #0]
   b5aa2:	f3bf 8f5b 	dmb	ish
   b5aa6:	f011 0401 	ands.w	r4, r1, #1
{
   b5aaa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5aac:	d111      	bne.n	b5ad2 <_Z19__fetch_global_Wirev+0x36>
   b5aae:	4628      	mov	r0, r5
   b5ab0:	f7fe fafb 	bl	b40aa <__cxa_guard_acquire>
   b5ab4:	b168      	cbz	r0, b5ad2 <_Z19__fetch_global_Wirev+0x36>
   b5ab6:	a801      	add	r0, sp, #4
   b5ab8:	f7ff ffda 	bl	b5a70 <_Z17acquireWireBufferv>
   b5abc:	aa01      	add	r2, sp, #4
   b5abe:	4621      	mov	r1, r4
   b5ac0:	4806      	ldr	r0, [pc, #24]	; (b5adc <_Z19__fetch_global_Wirev+0x40>)
   b5ac2:	f7ff fdd3 	bl	b566c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5ac6:	4628      	mov	r0, r5
   b5ac8:	f7fe faf4 	bl	b40b4 <__cxa_guard_release>
   b5acc:	4804      	ldr	r0, [pc, #16]	; (b5ae0 <_Z19__fetch_global_Wirev+0x44>)
   b5ace:	f000 f80b 	bl	b5ae8 <atexit>
	return wire;
}
   b5ad2:	4802      	ldr	r0, [pc, #8]	; (b5adc <_Z19__fetch_global_Wirev+0x40>)
   b5ad4:	b007      	add	sp, #28
   b5ad6:	bd30      	pop	{r4, r5, pc}
   b5ad8:	2003e744 	.word	0x2003e744
   b5adc:	2003e748 	.word	0x2003e748
   b5ae0:	000b5a6d 	.word	0x000b5a6d

000b5ae4 <_ZnajRKSt9nothrow_t>:
   b5ae4:	f7fe badd 	b.w	b40a2 <_Znaj>

000b5ae8 <atexit>:
   b5ae8:	2300      	movs	r3, #0
   b5aea:	4601      	mov	r1, r0
   b5aec:	461a      	mov	r2, r3
   b5aee:	4618      	mov	r0, r3
   b5af0:	f000 b85e 	b.w	b5bb0 <__register_exitproc>

000b5af4 <memcpy>:
   b5af4:	440a      	add	r2, r1
   b5af6:	4291      	cmp	r1, r2
   b5af8:	f100 33ff 	add.w	r3, r0, #4294967295
   b5afc:	d100      	bne.n	b5b00 <memcpy+0xc>
   b5afe:	4770      	bx	lr
   b5b00:	b510      	push	{r4, lr}
   b5b02:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5b06:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5b0a:	4291      	cmp	r1, r2
   b5b0c:	d1f9      	bne.n	b5b02 <memcpy+0xe>
   b5b0e:	bd10      	pop	{r4, pc}

000b5b10 <memmove>:
   b5b10:	4288      	cmp	r0, r1
   b5b12:	b510      	push	{r4, lr}
   b5b14:	eb01 0402 	add.w	r4, r1, r2
   b5b18:	d902      	bls.n	b5b20 <memmove+0x10>
   b5b1a:	4284      	cmp	r4, r0
   b5b1c:	4623      	mov	r3, r4
   b5b1e:	d807      	bhi.n	b5b30 <memmove+0x20>
   b5b20:	1e43      	subs	r3, r0, #1
   b5b22:	42a1      	cmp	r1, r4
   b5b24:	d008      	beq.n	b5b38 <memmove+0x28>
   b5b26:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b5b2e:	e7f8      	b.n	b5b22 <memmove+0x12>
   b5b30:	4402      	add	r2, r0
   b5b32:	4601      	mov	r1, r0
   b5b34:	428a      	cmp	r2, r1
   b5b36:	d100      	bne.n	b5b3a <memmove+0x2a>
   b5b38:	bd10      	pop	{r4, pc}
   b5b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b5b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b5b42:	e7f7      	b.n	b5b34 <memmove+0x24>

000b5b44 <memset>:
   b5b44:	4402      	add	r2, r0
   b5b46:	4603      	mov	r3, r0
   b5b48:	4293      	cmp	r3, r2
   b5b4a:	d100      	bne.n	b5b4e <memset+0xa>
   b5b4c:	4770      	bx	lr
   b5b4e:	f803 1b01 	strb.w	r1, [r3], #1
   b5b52:	e7f9      	b.n	b5b48 <memset+0x4>

000b5b54 <srand>:
   b5b54:	b538      	push	{r3, r4, r5, lr}
   b5b56:	4b10      	ldr	r3, [pc, #64]	; (b5b98 <srand+0x44>)
   b5b58:	681d      	ldr	r5, [r3, #0]
   b5b5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b5c:	4604      	mov	r4, r0
   b5b5e:	b9b3      	cbnz	r3, b5b8e <srand+0x3a>
   b5b60:	2018      	movs	r0, #24
   b5b62:	f7ff fa69 	bl	b5038 <malloc>
   b5b66:	4602      	mov	r2, r0
   b5b68:	63a8      	str	r0, [r5, #56]	; 0x38
   b5b6a:	b920      	cbnz	r0, b5b76 <srand+0x22>
   b5b6c:	4b0b      	ldr	r3, [pc, #44]	; (b5b9c <srand+0x48>)
   b5b6e:	480c      	ldr	r0, [pc, #48]	; (b5ba0 <srand+0x4c>)
   b5b70:	2142      	movs	r1, #66	; 0x42
   b5b72:	f7ff fa71 	bl	b5058 <__assert_func>
   b5b76:	490b      	ldr	r1, [pc, #44]	; (b5ba4 <srand+0x50>)
   b5b78:	4b0b      	ldr	r3, [pc, #44]	; (b5ba8 <srand+0x54>)
   b5b7a:	e9c0 1300 	strd	r1, r3, [r0]
   b5b7e:	4b0b      	ldr	r3, [pc, #44]	; (b5bac <srand+0x58>)
   b5b80:	6083      	str	r3, [r0, #8]
   b5b82:	230b      	movs	r3, #11
   b5b84:	8183      	strh	r3, [r0, #12]
   b5b86:	2100      	movs	r1, #0
   b5b88:	2001      	movs	r0, #1
   b5b8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5b8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b90:	2200      	movs	r2, #0
   b5b92:	611c      	str	r4, [r3, #16]
   b5b94:	615a      	str	r2, [r3, #20]
   b5b96:	bd38      	pop	{r3, r4, r5, pc}
   b5b98:	2003dfc4 	.word	0x2003dfc4
   b5b9c:	000b5f69 	.word	0x000b5f69
   b5ba0:	000b5f80 	.word	0x000b5f80
   b5ba4:	abcd330e 	.word	0xabcd330e
   b5ba8:	e66d1234 	.word	0xe66d1234
   b5bac:	0005deec 	.word	0x0005deec

000b5bb0 <__register_exitproc>:
   b5bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5bb4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5c70 <__register_exitproc+0xc0>
   b5bb8:	4606      	mov	r6, r0
   b5bba:	f8d8 0000 	ldr.w	r0, [r8]
   b5bbe:	461f      	mov	r7, r3
   b5bc0:	460d      	mov	r5, r1
   b5bc2:	4691      	mov	r9, r2
   b5bc4:	f000 f856 	bl	b5c74 <__retarget_lock_acquire_recursive>
   b5bc8:	4b25      	ldr	r3, [pc, #148]	; (b5c60 <__register_exitproc+0xb0>)
   b5bca:	681c      	ldr	r4, [r3, #0]
   b5bcc:	b934      	cbnz	r4, b5bdc <__register_exitproc+0x2c>
   b5bce:	4c25      	ldr	r4, [pc, #148]	; (b5c64 <__register_exitproc+0xb4>)
   b5bd0:	601c      	str	r4, [r3, #0]
   b5bd2:	4b25      	ldr	r3, [pc, #148]	; (b5c68 <__register_exitproc+0xb8>)
   b5bd4:	b113      	cbz	r3, b5bdc <__register_exitproc+0x2c>
   b5bd6:	681b      	ldr	r3, [r3, #0]
   b5bd8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5bdc:	6863      	ldr	r3, [r4, #4]
   b5bde:	2b1f      	cmp	r3, #31
   b5be0:	dd07      	ble.n	b5bf2 <__register_exitproc+0x42>
   b5be2:	f8d8 0000 	ldr.w	r0, [r8]
   b5be6:	f000 f847 	bl	b5c78 <__retarget_lock_release_recursive>
   b5bea:	f04f 30ff 	mov.w	r0, #4294967295
   b5bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5bf2:	b34e      	cbz	r6, b5c48 <__register_exitproc+0x98>
   b5bf4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5bf8:	b988      	cbnz	r0, b5c1e <__register_exitproc+0x6e>
   b5bfa:	4b1c      	ldr	r3, [pc, #112]	; (b5c6c <__register_exitproc+0xbc>)
   b5bfc:	b923      	cbnz	r3, b5c08 <__register_exitproc+0x58>
   b5bfe:	f8d8 0000 	ldr.w	r0, [r8]
   b5c02:	f000 f838 	bl	b5c76 <__retarget_lock_release>
   b5c06:	e7f0      	b.n	b5bea <__register_exitproc+0x3a>
   b5c08:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5c0c:	f7ff fa14 	bl	b5038 <malloc>
   b5c10:	2800      	cmp	r0, #0
   b5c12:	d0f4      	beq.n	b5bfe <__register_exitproc+0x4e>
   b5c14:	2300      	movs	r3, #0
   b5c16:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5c1a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5c1e:	6863      	ldr	r3, [r4, #4]
   b5c20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5c24:	2201      	movs	r2, #1
   b5c26:	409a      	lsls	r2, r3
   b5c28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5c2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5c30:	4313      	orrs	r3, r2
   b5c32:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5c36:	2e02      	cmp	r6, #2
   b5c38:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5c3c:	bf02      	ittt	eq
   b5c3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5c42:	4313      	orreq	r3, r2
   b5c44:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5c48:	6863      	ldr	r3, [r4, #4]
   b5c4a:	f8d8 0000 	ldr.w	r0, [r8]
   b5c4e:	1c5a      	adds	r2, r3, #1
   b5c50:	3302      	adds	r3, #2
   b5c52:	6062      	str	r2, [r4, #4]
   b5c54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5c58:	f000 f80e 	bl	b5c78 <__retarget_lock_release_recursive>
   b5c5c:	2000      	movs	r0, #0
   b5c5e:	e7c6      	b.n	b5bee <__register_exitproc+0x3e>
   b5c60:	2003e7e8 	.word	0x2003e7e8
   b5c64:	2003e75c 	.word	0x2003e75c
   b5c68:	00000000 	.word	0x00000000
   b5c6c:	000b5039 	.word	0x000b5039
   b5c70:	2003e028 	.word	0x2003e028

000b5c74 <__retarget_lock_acquire_recursive>:
   b5c74:	4770      	bx	lr

000b5c76 <__retarget_lock_release>:
   b5c76:	4770      	bx	lr

000b5c78 <__retarget_lock_release_recursive>:
   b5c78:	4770      	bx	lr

000b5c7a <link_code_end>:
	...

000b5c7c <dynalib_user>:
   b5c7c:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b5c8c:	0000 0000 414d 3358 3130 3530 7720 7361     ....MAX30105 was
   b5c9c:	6e20 746f 6620 756f 646e 202e 6c50 6165      not found. Plea
   b5cac:	6573 6320 6568 6b63 7720 7269 6e69 2f67     se check wiring/
   b5cbc:	6f70 6577 2e72 4100 7474 6361 2068 6573     power..Attach se
   b5ccc:	736e 726f 7420 206f 6966 676e 7265 7720     nsor to finger w
   b5cdc:	7469 2068 7572 6262 7265 6220 6e61 2e64     ith rubber band.
   b5cec:	5020 6572 7373 6120 796e 6b20 7965 7420      Press any key t
   b5cfc:	206f 7473 7261 2074 6f63 766e 7265 6973     o start conversi
   b5d0c:	6e6f 7200 6465 003d 202c 7269 003d 202c     on.red=., ir=., 
   b5d1c:	5248 003d 202c 5248 6176 696c 3d64 2c00     HR=., HRvalid=.,
   b5d2c:	5320 4f50 3d32 2c00 5320 4f50 5632 6c61      SPO2=., SPO2Val
   b5d3c:	6469 003d                                   id=.

000b5d40 <_ZL14uch_spo2_table>:
   b5d40:	5f5f 605f 6060 6161 6161 6261 6262 6262     ___```aaaaabbbbb
   b5d50:	6363 6363 6363 6363 6464 6464 6464 6464     ccccccccdddddddd
   b5d60:	6464 6464 6464 6464 6464 6464 6363 6363     ddddddddddddcccc
   b5d70:	6363 6363 6262 6262 6262 6161 6161 6060     ccccbbbbbbaaaa``
   b5d80:	6060 5f5f 5e5f 5e5e 5d5d 5c5d 5c5c 5b5b     ``___^^^]]]\\\[[
   b5d90:	5a5a 5959 5859 5758 5657 5556 5455 5354     ZZYYYXXWWVVUUTTS
   b5da0:	5252 5151 5050 4e4f 4d4e 4c4c 4a4b 494a     RRQQPPONNMLLKJJI
   b5db0:	4848 4647 4545 4344 4242 4041 3e3f 3d3e     HHGFEEDCBBA@?>>=
   b5dc0:	3b3c 393a 3838 3637 3435 3233 3031 2e2f     <;:98876543210/.
   b5dd0:	2c2d 2a2b 2829 2627 2425 2223 1f21 1d1e     -,+*)('&%$#"!...
   b5de0:	1b1c 191a 1617 1415 1113 0f10 0c0e 0a0b     ................
   b5df0:	0709 0506 0203 0001                         ........

000b5df8 <_ZTVN5spark13EthernetClassE>:
	...
   b5e00:	50d7 000b 50cd 000b 50c3 000b 50b9 000b     .P...P...P...P..
   b5e10:	50ad 000b 50a1 000b 57d5 000b 57dd 000b     .P...P...W...W..
   b5e20:	5095 000b 508d 000b 5083 000b 5079 000b     .P...P...P..yP..
   b5e30:	580d 000b 7061 0070 5925 252d 2d6d 6425     .X..app.%Y-%m-%d
   b5e40:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5e50:	6d69 0065                                   ime.

000b5e54 <_ZTV9IPAddress>:
	...
   b5e5c:	5389 000b 5379 000b 537b 000b               .S..yS..{S..

000b5e68 <_ZTV9USBSerial>:
	...
   b5e70:	546f 000b 54d7 000b 54ad 000b 513d 000b     oT...T...T..=Q..
   b5e80:	549f 000b 5471 000b 5481 000b 54d1 000b     .T..qT...T...T..
   b5e90:	5491 000b 5469 000b                         .T..iT..

000b5e98 <_ZTV11USARTSerial>:
	...
   b5ea0:	5571 000b 55dd 000b 55b5 000b 513d 000b     qU...U...U..=Q..
   b5eb0:	5585 000b 55a1 000b 5593 000b 55af 000b     .U...U...U...U..
   b5ec0:	5573 000b 5577 000b                         sU..wU..

000b5ec8 <_ZTV7TwoWire>:
	...
   b5ed0:	5615 000b 565f 000b 5637 000b 5617 000b     .V.._V..7V...V..
   b5ee0:	563f 000b 5647 000b 564f 000b 5657 000b     ?V..GV..OV..WV..

000b5ef0 <_ZTVN5spark9WiFiClassE>:
	...
   b5ef8:	5777 000b 576d 000b 5763 000b 5719 000b     wW..mW..cW...W..
   b5f08:	5757 000b 574b 000b 57d5 000b 57dd 000b     WW..KW...W...W..
   b5f18:	573f 000b 5737 000b 572d 000b 5723 000b     ?W..7W..-W..#W..
   b5f28:	580d 000b                                   .X..

000b5f2c <_ZTVN5spark12NetworkClassE>:
	...
   b5f34:	5795 000b 579f 000b 57a9 000b 57b3 000b     .W...W...W...W..
   b5f44:	57bd 000b 57c9 000b 57d5 000b 57dd 000b     .W...W...W...W..
   b5f54:	57e5 000b 57f1 000b 57f9 000b 5803 000b     .W...W...W...X..
   b5f64:	580d 000b                                   .X..

000b5f68 <_ZSt7nothrow>:
   b5f68:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5f78:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5f88:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5f98:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5fa8:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5fb8:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b5fc8:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b5fd8:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5fe8:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5ff8:	646e 632e                                    nd.c.

000b5ffd <link_const_data_end>:
   b5ffd:	00          	.byte	0x00
	...

000b6000 <link_constructors_location>:
   b6000:	000b43c5 	.word	0x000b43c5
   b6004:	000b50e1 	.word	0x000b50e1
   b6008:	000b5109 	.word	0x000b5109
   b600c:	000b512d 	.word	0x000b512d
   b6010:	000b5209 	.word	0x000b5209
   b6014:	000b5219 	.word	0x000b5219
   b6018:	000b5235 	.word	0x000b5235
   b601c:	000b5781 	.word	0x000b5781
   b6020:	000b58e5 	.word	0x000b58e5
